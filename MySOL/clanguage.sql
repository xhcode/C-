-- phpMyAdmin SQL Dump
-- version 4.7.3
-- https://www.phpmyadmin.net/
--
-- Host: localhost
-- Generation Time: 2018-06-08 16:06:37
-- 服务器版本： 5.7.18-log
-- PHP Version: 7.0.21

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `clanguage`
--

-- --------------------------------------------------------

--
-- 表的结构 `arithmetic`
--

CREATE TABLE `arithmetic` (
  `ID` int(8) NOT NULL,
  `name` char(100) NOT NULL,
  `sort` char(225) NOT NULL,
  `content` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `arithmetic`
--

INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(1, '1、最大公约数', '一、数论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* Greatest Common Divisor 最大公约数</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 几个整数，公有的约数，叫做这几个数的公约数；</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 其中最大的一个，叫做这几个数的最大公约数。</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 例如：12、16的公约数有±1、±2、±4，其中最大的一个是4，</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 4是12与16的最大公约数，一般记为（12、16）=4。</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp comments\">/* 欧几里德算法（辗转相除法）求最大公约数</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 原理： 已知a,b,c为正整数，若a除以b余c，则（a,b）=(b,c)</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*        即gcd(a,b)=gcd(b,a mod b)，当b为0时，两数的最大公约数即为a</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">gcd(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y)</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">t;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(y &gt; 0)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">t = x % y;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">x = y;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">y = t;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">x;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,b;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d %d\"</code><code class=\"cpp plain\">,&amp;a,&amp;b);</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d与%d最大公约数为：\"</code><code class=\"cpp plain\">,a,b);</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\\n\"</code><code class=\"cpp plain\">,gcd(a,b));</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(2, '2、最小公倍数', '一、数论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* Least Common Multiple 最小公倍数</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* lcm(a,b) = a*b/gcd(a,b)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number6 index5 alt1\"> </div><div class=\"line number7 index6 alt2\"><code class=\"cpp comments\">/* 最大公约数 */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">gcd(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y)</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">t;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(y &gt; 0)</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">t = x % y;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">x = y;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">y = t;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">x;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp comments\">/* 最小公倍数 */</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">lcm(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y)</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">t;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">t = x*y/gcd(x,y);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">t;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number28 index27 alt1\"> </div><div class=\"line number29 index28 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,b;</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d %d\"</code><code class=\"cpp plain\">,&amp;a,&amp;b);</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d与%d最小公倍数为：\"</code><code class=\"cpp plain\">,a,b);</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\\n\"</code><code class=\"cpp plain\">,lcm(a,b));</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(3, '3、素数判断', '一、数论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* Prime 素数判断 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* </code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp comments\">* 判断一个整数m是否是素数，只需被2~√m之间的每一个整数去除就可以了。</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">* 如果m不能被2~√m间任一整数整除，m必定是素数。</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">*/</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">bool</code> <code class=\"cpp plain\">is_prime(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">u)</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(u == 0 || u == 1)</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(u == 2)</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(u%2 == 0)</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=3;i &lt;= </code><code class=\"cpp functions bold\">sqrt</code><code class=\"cpp plain\">((</code><code class=\"cpp color1 bold\">float</code><code class=\"cpp plain\">)u);i+=2)</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(u%i == 0)</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;a);</code></div><div class=\"line number28 index27 alt1\"> </div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(is_prime(a))</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d是素数\\n\"</code><code class=\"cpp plain\">,a);</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d不是素数\\n\"</code><code class=\"cpp plain\">,a);</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number37 index36 alt2\"> </div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(4, '4、素数筛法', '一、数论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* Sieve Prime 素数筛法 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number6 index5 alt1\"> </div><div class=\"line number7 index6 alt2\"><code class=\"cpp comments\">/* </code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 把从1开始的、某一范围内的正整数从小到大顺序排列，1不是素数，首先把它筛掉。</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 剩下的数中选择最小的数是素数，然后去掉它的倍数。依次类推，直到筛子为空时结束。</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp comments\">/* M:1000以内素数 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">M = 1000;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp color1 bold\">bool</code> <code class=\"cpp plain\">mark[M]; </code><code class=\"cpp comments\">//true:prime number</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">sieve_prime()</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(mark,</code><code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(mark));</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">mark[0] = mark[1] = </code><code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=2; i &lt;= </code><code class=\"cpp functions bold\">sqrt</code><code class=\"cpp plain\">((</code><code class=\"cpp color1 bold\">float</code><code class=\"cpp plain\">)M); i++)</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(mark[i]) {</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j=i*i; j &lt; M; j+=i)</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">mark[j] = </code><code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number26 index25 alt1\"> </div><div class=\"line number27 index26 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j = 0;</code></div><div class=\"line number30 index29 alt1\"> </div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">sieve_prime();</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d以内素数如下：\\n\"</code><code class=\"cpp plain\">,M);</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;M;i++)</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(mark[i])</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d  \"</code><code class=\"cpp plain\">,i);</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">j++;</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(j%10 == 0)</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number46 index45 alt1\"> </div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(5, '5、扩展欧几里德', '一、数论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* Extended Euclid 扩展欧几里德算法 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 如果GCD(a,b) = d,则存在x,y,使d=ax+by</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* extended_euclid(a,b)=ax+by</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 即接受两个整数a,b，输出三个整数d,x,y。d,x,y满足等式ax+by=d，且d是a,b的最大公约数。</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 常用在求解模线性方程及方程组中</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">extended_euclid(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*x,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*y)</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">d;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(b == 0) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">*x = 1;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">*y = 0;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">a;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d = extended_euclid(b,a%b,y,x);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">*y-=a/b*(*x);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">d;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,x = 0,y = 0;</code></div><div class=\"line number26 index25 alt1\"> </div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">i = extended_euclid(4,6,&amp;x,&amp;y);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"4*%d+6*%d = %d\\n\"</code><code class=\"cpp plain\">,x,y,i);</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(6, '6、模逆元', '一、数论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>一整数a对同余n之模逆元素是指满足以下公式的整数b</p><p>    a^(-1)≡b (mod n).</p><p>也可以写成以下的式子</p><p>    ab≡1 (mod n).</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* Module Inverse 模逆元 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">extended_euclid(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*x,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*y)</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">d;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(b == 0) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">*x = 1;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">*y = 0;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">a;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d = extended_euclid(b,a%b,y,x);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">*y-=a/b*(*x);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">d;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\"> </code> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp comments\">/* ax ≡ 1 (mod n) 如540*1674 mod 1769=1*/</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Inv(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n)</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">d,x,y;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d = extended_euclid(a, n,&amp;x,&amp;y);</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(d == 1)</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(x%n+n)%n;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 无解 */</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">-1;</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,n,x;</code></div><div class=\"line number33 index32 alt2\"> </div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d%d\"</code><code class=\"cpp plain\">,&amp;a,&amp;n);</code></div><div class=\"line number35 index34 alt2\"> </div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">x = Inv(a,n);</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(x!=-1)</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d*%d ≡ 1 (mod %d)\\n\"</code><code class=\"cpp plain\">,a,x,n);</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"无解\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(7, '7、模线性方程', '一、数论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* Modular Linear Equation 模线性方程(同余方程) */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 求最大公约数 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">gcd(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y)</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">t;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(y &gt; 0)</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">t = x % y;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">x = y;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">y = t;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">x;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp comments\">/* 扩展欧几里德算法 */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">extended_euclid(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*x,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*y)</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">d;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(b == 0) {</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">*x = 1;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">*y = 0;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">a;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d = extended_euclid(b,a%b,y,x);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">*y-=a/b*(*x);</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">d;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\"> </code> </div><div class=\"line number32 index31 alt1\"><code class=\"cpp comments\">/* 如果GCD(a,b)不能整除c,则ax+by=c没有整数解</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* ax≡b (mod n) n &gt; 0</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 上式等价于二元一次方程ax–ny=b </code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">modular_linear_equation(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n)</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">d,x,y,x0,g;</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">g = gcd(a,n);</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(b%g!=0){</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"无解\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number44 index43 alt1\"> </div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">a /= g;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">b /= g;</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n /= g;</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d = extended_euclid(a,n,&amp;x,&amp;y);</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(b%d==0)</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* x0:basic solution */</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">x0 = (x*(b/d))%n;</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ans = n;</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;d;i++){</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">ans = (x0+i*(n/d))%n;</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\\n\"</code><code class=\"cpp plain\">,ans);</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"无解\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number62 index61 alt1\"> </div><div class=\"line number63 index62 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,b,n;</code></div><div class=\"line number66 index65 alt1\"> </div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d%d%d\"</code><code class=\"cpp plain\">,&amp;a,&amp;b,&amp;n);</code></div><div class=\"line number68 index67 alt1\"> </div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">modular_linear_equation(a,b,n);</code></div><div class=\"line number70 index69 alt1\"> </div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(8, '8、中国余数定理', '一、数论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 设m1，m2，…，mi为两两互质的正整数，a1，a2，…，ak为任意整数，则同余方程组</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* x≡a1(mod m1)；</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* x≡a2(mod m2)；</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* ……</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* x≡ai(mod mi)；</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 总有整数解</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp comments\">/* 扩展欧几里德算法 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">extended_euclid(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*x,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*y)</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">d;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(b == 0) {</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">*x = 1;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">*y = 0;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">a;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d = extended_euclid(b,a%b,y,x);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">*y-=a/b*(*x);</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">d;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number24 index23 alt1\"> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp comments\">/* 中国余数定理 */</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">chinese_remainder(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">w[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len)</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,d,x,y,m,n,ret;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret = 0;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n = 1;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;len;i++)</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">n*=w[i];</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;len;i++)</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">m = n/w[i];</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">d = extended_euclid(w[i],m,&amp;x,&amp;y);</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">ret = (ret+y*m*b[i])%n;</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(n+ret%n)%n;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number41 index40 alt2\"> </div><div class=\"line number42 index41 alt1\"><code class=\"cpp comments\">/* 求正整数N，使N除以3余2，除以5余3，除以7余2 */</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b[]={2,3,2},w[]={3,5,7},N;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">N = chinese_remainder(b,w,3);</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"正整数N：%d\"</code><code class=\"cpp plain\">,N);</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(9, '9、欧拉函数', '一、数论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* Euler Function欧拉函数 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 求2..n-1中与n互质数的个数 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">euler(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n)</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ans = 1;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=2;i*i&lt;=n;i++)</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(n%i==0)</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">n/=i;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">ans*=i-1;</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(n%i==0)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">n/=i;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">ans*=i;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(n&gt;1)</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">ans *= n-1;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ans;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number30 index29 alt1\"> </div><div class=\"line number31 index30 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,num;</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;a);</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">num = euler(a);</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"2...%d中与%d互质数的个数是：%d\\n\"</code><code class=\"cpp plain\">,a-1,a,num);</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(10, '10、素数测试', '一、数论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* Miller_Rabin 算法进行素数测试，可以判断 &lt;2^63的数 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 随机算法判定次数，S越大，判错概率越小 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">S=20;</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* 计算 (a*b)%c  a,b,c &lt;2^63 */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">mult_mod(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">b,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">c)</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">a%=c;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">b%=c;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">ret=0;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(b)</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(b&amp;1){ret+=a;ret%=c;}</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a&lt;&lt;=1;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a&gt;=c)a%=c;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">b&gt;&gt;=1;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp comments\">/* 计算  x^n %c */</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">pow_mod(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">mod)</code><code class=\"cpp comments\">//x^n%c</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(n==1)</code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">x%mod;</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">x%=mod;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">tmp=x;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">ret=1;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(n)</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(n&amp;1) ret=mult_mod(ret,tmp,mod);</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">tmp=mult_mod(tmp,tmp,mod);</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">n&gt;&gt;=1;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp comments\">/* 以a为基,n-1=x*2^t a^(n-1)=1(mod n)  验证n是不是合数</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 一定是合数返回true,不一定返回false */</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp color1 bold\">bool</code> <code class=\"cpp plain\">check(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">t)</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">ret=pow_mod(a,x,n);</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">last=ret;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=1;i&lt;=t;i++)</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">ret=mult_mod(ret,ret,n);</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ret==1&amp;&amp;last!=1&amp;&amp;last!=n-1) </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">last=ret;</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ret!=1) </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number55 index54 alt2\"> </div><div class=\"line number56 index55 alt1\"><code class=\"cpp comments\">/* Miller_Rabin()算法素数判定</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 是素数返回true，合数返回false */</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp color1 bold\">bool</code> <code class=\"cpp plain\">Miller_Rabin(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">n)</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(n&lt;2)</code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(n==2)</code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 偶数 */</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">((n&amp;1)==0) </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">x=n-1;</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">t=0;</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">((x&amp;1)==0){x&gt;&gt;=1;t++;}</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;S;i++)</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">a=</code><code class=\"cpp functions bold\">rand</code><code class=\"cpp plain\">()%(n-1)+1;</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(check(a,n,x,t))</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number75 index74 alt2\"> </div><div class=\"line number76 index75 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">a;</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">bool</code> <code class=\"cpp plain\">flag;</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%lld\"</code><code class=\"cpp plain\">,&amp;a);</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">flag = Miller_Rabin(a);</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(flag)</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%ld是素数\\n\"</code><code class=\"cpp plain\">,a);</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%ld不是素数\\n\"</code><code class=\"cpp plain\">,a);</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number90 index89 alt1\"> </div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(11, '11、因式分解', '一、数论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div><div class=\"line number121 index120 alt2\">121</div><div class=\"line number122 index121 alt1\">122</div><div class=\"line number123 index122 alt2\">123</div><div class=\"line number124 index123 alt1\">124</div><div class=\"line number125 index124 alt2\">125</div><div class=\"line number126 index125 alt1\">126</div><div class=\"line number127 index126 alt2\">127</div><div class=\"line number128 index127 alt1\">128</div><div class=\"line number129 index128 alt2\">129</div><div class=\"line number130 index129 alt1\">130</div><div class=\"line number131 index130 alt2\">131</div><div class=\"line number132 index131 alt1\">132</div><div class=\"line number133 index132 alt2\">133</div><div class=\"line number134 index133 alt1\">134</div><div class=\"line number135 index134 alt2\">135</div><div class=\"line number136 index135 alt1\">136</div><div class=\"line number137 index136 alt2\">137</div><div class=\"line number138 index137 alt1\">138</div><div class=\"line number139 index138 alt2\">139</div><div class=\"line number140 index139 alt1\">140</div><div class=\"line number141 index140 alt2\">141</div><div class=\"line number142 index141 alt1\">142</div><div class=\"line number143 index142 alt2\">143</div><div class=\"line number144 index143 alt1\">144</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* pollard_rho 算法进行质因数分解 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 随机算法判定次数，S越大，判错概率越小 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">S=20;</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* 计算 (a*b)%c  a,b,c &lt;2^63 */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">mult_mod(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">b,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">c)</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">a%=c;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">b%=c;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">ret=0;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(b)</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(b&amp;1){ret+=a;ret%=c;}</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a&lt;&lt;=1;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a&gt;=c)a%=c;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">b&gt;&gt;=1;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp comments\">/* 计算  x^n %c */</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">pow_mod(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">mod)</code><code class=\"cpp comments\">//x^n%c</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(n==1)</code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">x%mod;</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">x%=mod;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">tmp=x;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">ret=1;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(n)</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(n&amp;1) ret=mult_mod(ret,tmp,mod);</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">tmp=mult_mod(tmp,tmp,mod);</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">n&gt;&gt;=1;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp comments\">/* 以a为基,n-1=x*2^t a^(n-1)=1(mod n)  验证n是不是合数</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 一定是合数返回true,不一定返回false */</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp color1 bold\">bool</code> <code class=\"cpp plain\">check(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">t)</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">ret=pow_mod(a,x,n);</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">last=ret;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=1;i&lt;=t;i++)</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">ret=mult_mod(ret,ret,n);</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ret==1&amp;&amp;last!=1&amp;&amp;last!=n-1) </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">last=ret;</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ret!=1) </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number55 index54 alt2\"> </div><div class=\"line number56 index55 alt1\"><code class=\"cpp comments\">/* Miller_Rabin()算法素数判定</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 是素数返回true，合数返回false */</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp color1 bold\">bool</code> <code class=\"cpp plain\">Miller_Rabin(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">n)</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(n&lt;2)</code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(n==2)</code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 偶数 */</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">((n&amp;1)==0) </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">x=n-1;</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">t=0;</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">((x&amp;1)==0){x&gt;&gt;=1;t++;}</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;S;i++)</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">a=</code><code class=\"cpp functions bold\">rand</code><code class=\"cpp plain\">()%(n-1)+1;</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(check(a,n,x,t))</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number75 index74 alt2\"> </div><div class=\"line number76 index75 alt1\"><code class=\"cpp comments\">/* 质因数分解结果 */</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">factor[100];</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp comments\">/* 质因数的个数 */</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">tol;</code></div><div class=\"line number80 index79 alt1\"> </div><div class=\"line number81 index80 alt2\"><code class=\"cpp comments\">/* 最大公约数 */</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">gcd(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">b)</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a==0)</code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a&lt;0) </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">gcd(-a,b);</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(b)</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">t=a%b;</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a=b;</code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">b=t;</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">a;</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number94 index93 alt1\"> </div><div class=\"line number95 index94 alt2\"><code class=\"cpp comments\">/* 质因数分解 */</code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">Pollard_rho(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">c)</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">i=1,k=2;</code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">x0=</code><code class=\"cpp functions bold\">rand</code><code class=\"cpp plain\">()%x;</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">y=x0;</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(1)</code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">i++;</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">x0=(mult_mod(x0,x0,x)+c)%x;</code></div><div class=\"line number105 index104 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">d=gcd(y-x0,x);</code></div><div class=\"line number106 index105 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(d!=1&amp;&amp;d!=x) </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">d;</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(y==x0) </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">x;</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i==k){y=x0;k+=k;}</code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number111 index110 alt2\"> </div><div class=\"line number112 index111 alt1\"><code class=\"cpp comments\">/* 对n进行素因子分解 */</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">findfac(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">n)</code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 素数 */</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Miller_Rabin(n))</code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number118 index117 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">factor[tol++]=n;</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number121 index120 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">p=n;</code></div><div class=\"line number122 index121 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p&gt;=n)p=Pollard_rho(p,</code><code class=\"cpp functions bold\">rand</code><code class=\"cpp plain\">()%(n-1)+1);</code></div><div class=\"line number123 index122 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">findfac(p);</code></div><div class=\"line number124 index123 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">findfac(n/p);</code></div><div class=\"line number125 index124 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number126 index125 alt1\"> </div><div class=\"line number127 index126 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number128 index127 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number129 index128 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">n;</code></div><div class=\"line number130 index129 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%lld\"</code><code class=\"cpp plain\">,&amp;n)!=EOF)</code></div><div class=\"line number131 index130 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number132 index131 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">tol=0;</code></div><div class=\"line number133 index132 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">findfac(n);</code></div><div class=\"line number134 index133 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;tol;i++)</code></div><div class=\"line number135 index134 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%lld \"</code><code class=\"cpp plain\">,factor[i]);</code></div><div class=\"line number136 index135 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number137 index136 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Miller_Rabin(n))</code></div><div class=\"line number138 index137 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Yes\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number139 index138 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code> </div><div class=\"line number140 index139 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"No\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number141 index140 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number142 index141 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number143 index142 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number144 index143 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(12, '1、高精度加法', '二、高精度计算', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 高精度加法 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 全局变量，存储大数运算的结果 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">c[2000];</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* 判断字符串ch是否全为0</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 若全为0，返回0，否则返回1</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Judge(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">ch[])</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,k;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(ch);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ch[i]!=</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">)</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp comments\">/* 先确定a和b中的最大位数k，然后依照由低至高位的顺序进行加法运算。</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 注意进位，若高位有进位，则c的长度为k+1。</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">BigNumberAdd(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[],</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b1[])</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j,k,lena,lenb;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[1000]={0},b[1000]={0},d[1000]={0};</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lena=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(a1);</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lenb=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(b1);</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将加数与被加数化为整型数组 */</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lena;i++)</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i]=a1[lena-i-1]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lenb;i++)</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">b[i]=b1[lenb-1-i]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number35 index34 alt2\"> </div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=lena&gt;lenb?lena:lenb;</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">d[i]=a[i]+b[i]+d[i];</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">d[i+1]=d[i+1]+d[i]/10;</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">d[i]=d[i]%10;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若高位进 */</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(d[k])</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">k++;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(!d[k-1])</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">k--;</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将整型数组逆着转变并赋值给c字符型数组 */</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=0;j&lt;k;j++)</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">c[j]=d[k-j-1]+</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若全为0，则只输出一个 */</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Judge(c))</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(c,</code><code class=\"cpp string\">\"0\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number55 index54 alt2\"> </div><div class=\"line number56 index55 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[] = {</code><code class=\"cpp string\">\'1\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'2\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'3\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'4\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'5\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'6\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'7\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'8\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b1[] = {</code><code class=\"cpp string\">\'2\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'3\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'4\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'5\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'6\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'6\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'7\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'8\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">len = 0;</code></div><div class=\"line number61 index60 alt2\"> </div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">BigNumberAdd(a1,b1);</code></div><div class=\"line number63 index62 alt2\"> </div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len = </code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(c);</code></div><div class=\"line number65 index64 alt2\"> </div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"len:%d result:\\n\"</code><code class=\"cpp plain\">,len);</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;len;i++)</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">,c[i]);</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(13, '2、高精度减法', '二、高精度计算', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div><div class=\"line number121 index120 alt2\">121</div><div class=\"line number122 index121 alt1\">122</div><div class=\"line number123 index122 alt2\">123</div><div class=\"line number124 index123 alt1\">124</div><div class=\"line number125 index124 alt2\">125</div><div class=\"line number126 index125 alt1\">126</div><div class=\"line number127 index126 alt2\">127</div><div class=\"line number128 index127 alt1\">128</div><div class=\"line number129 index128 alt2\">129</div><div class=\"line number130 index129 alt1\">130</div><div class=\"line number131 index130 alt2\">131</div><div class=\"line number132 index131 alt1\">132</div><div class=\"line number133 index132 alt2\">133</div><div class=\"line number134 index133 alt1\">134</div><div class=\"line number135 index134 alt2\">135</div><div class=\"line number136 index135 alt1\">136</div><div class=\"line number137 index136 alt2\">137</div><div class=\"line number138 index137 alt1\">138</div><div class=\"line number139 index138 alt2\">139</div><div class=\"line number140 index139 alt1\">140</div><div class=\"line number141 index140 alt2\">141</div><div class=\"line number142 index141 alt1\">142</div><div class=\"line number143 index142 alt2\">143</div><div class=\"line number144 index143 alt1\">144</div><div class=\"line number145 index144 alt2\">145</div><div class=\"line number146 index145 alt1\">146</div><div class=\"line number147 index146 alt2\">147</div><div class=\"line number148 index147 alt1\">148</div><div class=\"line number149 index148 alt2\">149</div><div class=\"line number150 index149 alt1\">150</div><div class=\"line number151 index150 alt2\">151</div><div class=\"line number152 index151 alt1\">152</div><div class=\"line number153 index152 alt2\">153</div><div class=\"line number154 index153 alt1\">154</div><div class=\"line number155 index154 alt2\">155</div><div class=\"line number156 index155 alt1\">156</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 高精度减法 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 全局变量，存储大数运算的结果 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">c[2000];</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp comments\">/* 高精度除以高精度的余数 */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">arr[1000];</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* 高精度除以低精度的余数 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">z=0;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp comments\">/* 判断字符串ch是否全为0</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp comments\">* 若全为0，返回0，否则返回1</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Judge(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">ch[])</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,k;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(ch);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ch[i]!=</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">)</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number24 index23 alt1\"> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp comments\">/* 比较字符串的大小 */</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Compare(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a[],</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b[])</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">lena,lenb,i; </code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lena=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(a);</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lenb=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(b);</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(lena&lt;lenb)</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">-1;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(lena&gt;lenb)</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">strcmp</code><code class=\"cpp plain\">(a,b)==0)</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lena;i++)</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">{</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a[i]&gt;b[i])</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">                        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a[i]&lt;b[i])</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">                        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">-1;</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">}</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number53 index52 alt2\"> </div><div class=\"line number54 index53 alt1\"> </div><div class=\"line number55 index54 alt2\"><code class=\"cpp comments\">/* 依照由低位至高位的顺序进行减法运算。在每次位运算中，若出现不够减的情况，</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp comments\">* 则向高位借位。在进行了la的减法后，若最高位为0，则a的长度减。</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp comments\">* 若A、B大小未知，则需先判断大小。</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp comments\">* a1为被减数，b1为减数</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp comments\">*/</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">BigNumberSub(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[],</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b1[])</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">lena,lenb,i,j,k,flag;</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[1000]={0},b[1000]={0},d[1000]={0};</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lena=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(a1);</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lenb=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(b1);</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若被减数大于等于减数 */</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Compare(a1,b1)&gt;=0)</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lena;i++)</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">a[i]=a1[lena-1-i]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lenb;i++)</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">b[i]=b1[lenb-1-i]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 结果正的标志 */</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">flag=0;</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 若被减数小于减数 */</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lenb;i++)</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">a[i]=b1[lenb-1-i]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lena;i++)</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">b[i]=a1[lena-1-i]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 结果负的标志 */</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">flag=1;</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=lena&gt;lenb?lena:lenb;</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 大数减小数 */</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a[i]&lt;b[i])</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 若被减数不够减，向高位借一位 */</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">a[i+1]--;</code></div><div class=\"line number94 index93 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">d[i]=a[i]-b[i]+10;</code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">d[i]=a[i]-b[i];</code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number99 index98 alt2\"> </div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若较高位已为0，并且不止1位时 */</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(!d[i-1])</code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">k--;</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">i--;</code></div><div class=\"line number105 index104 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number106 index105 alt1\"> </div><div class=\"line number107 index106 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 根据flag，输出有无\"-\" */</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!flag)</code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 将结果转化为字符逆着赋给数组c */</code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 若差的第一个字母为0，则马上跳过 */</code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!i&amp;&amp;!d[k-i-1])</code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">continue</code><code class=\"cpp plain\">;</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">c[i]=d[k-i-1]+</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number118 index117 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number121 index120 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">c[0]=</code><code class=\"cpp string\">\'-\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number122 index121 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 将结果转化为字符逆着赋给数组c */</code></div><div class=\"line number123 index122 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=1;i&lt;=k;i++)</code></div><div class=\"line number124 index123 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number125 index124 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 若差的第一个字母为0，则马上跳过 */</code></div><div class=\"line number126 index125 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i==1&amp;&amp;!d[k-i])</code></div><div class=\"line number127 index126 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">continue</code><code class=\"cpp plain\">;</code></div><div class=\"line number128 index127 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 注意d的下标，不是k-i-1 */</code></div><div class=\"line number129 index128 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">c[i]=d[k-i]+</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number130 index129 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number131 index130 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number132 index131 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若差全为0，则只输出一个 */</code></div><div class=\"line number133 index132 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Judge(c))</code></div><div class=\"line number134 index133 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(c,</code><code class=\"cpp string\">\"0\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number135 index134 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number136 index135 alt1\"> </div><div class=\"line number137 index136 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number138 index137 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number139 index138 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[] = {</code><code class=\"cpp string\">\'1\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'2\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'3\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'4\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'5\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'6\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'7\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'8\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number140 index139 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b1[] = {</code><code class=\"cpp string\">\'2\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'3\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'4\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'5\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'6\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'6\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'7\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'8\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number141 index140 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">len = 0;</code></div><div class=\"line number142 index141 alt1\"> </div><div class=\"line number143 index142 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">BigNumberSub(a1,b1);</code></div><div class=\"line number144 index143 alt1\"> </div><div class=\"line number145 index144 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len = </code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(c);</code></div><div class=\"line number146 index145 alt1\"> </div><div class=\"line number147 index146 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"result:\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number148 index147 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;len;i++)</code></div><div class=\"line number149 index148 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number150 index149 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">,c[i]);</code></div><div class=\"line number151 index150 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number152 index151 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number153 index152 alt2\"> </div><div class=\"line number154 index153 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number155 index154 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number156 index155 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(14, '3、高精度乘法', '二、高精度计算', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 高精度乘法 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 全局变量，存储大数运算的结果 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">c[2000];</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* 判断字符串ch是否全为0</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">* 若全为0，返回0，否则返回1</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Judge(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">ch[])</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,k;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(ch);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ch[i]!=</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">)</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp comments\">/* 高精度乘以低精度 </code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 将多位数存入数组，低位在前、高位在后，然后用一位数去乘数组的各位，考虑进位，最后按正常顺序输出*/</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">BigNumMultiSmall(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b1)</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j,t;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[2000]={0};</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">t=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(a1);</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将字符串转化为整型数组，并逆置 */</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;t;i++)</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i]=a1[t-1-i]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">a[0]=a[0]*b1;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 整型数组的每个元素乘以b1，然后对其进行求余，整除，使其只有一位数 */</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=1;i&lt;t;i++)</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i]*=b1;</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i]+=a[i-1]/10;</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i-1]=a[i-1]%10;</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若最后一个元素大于9 */</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(a[i-1]&gt;9)</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i]=a[i-1]/10;</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i-1]=a[i-1]%10;</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">i++;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number47 index46 alt2\"> </div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将得到的整型数组逆置赋给字符串 */</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=0;j&lt;i;j++)</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">c[j]=a[i-j-1]+</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若积全为0，则只输出一个0 */</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Judge(c))</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(c,</code><code class=\"cpp string\">\"0\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number55 index54 alt2\"> </div><div class=\"line number56 index55 alt1\"><code class=\"cpp comments\">/* 高精度乘以高精度 */</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">BigNumMultiBig(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[],</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b1[])</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j,k,lena,lenb;</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[1000]={0},b[1000]={0},d[2000]={0};</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lena=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(a1);</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lenb=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(b1);</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将字符串转化为整型数组，并逆置 */</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lena;i++)</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i]=a1[lena-i-1]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lenb;i++)</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">b[i]=b1[lenb-i-1]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 计算乘数从低位到高位以此乘以被乘数的低位到高位 */</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lena;i++)</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=0;j&lt;lenb;j++)</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">d[i+j]=d[i+j]+a[i]*b[j];</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">d[i+j+1]+=d[i+j]/10;</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">d[i+j]=d[i+j]%10;</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 根据高位是否为判断整型数组的位数 */</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">k=lena+lenb;</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(!d[k-1])</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">k--;</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 积转化为字符型 */</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">c[i]=d[k-1-i]+</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 若积全为0，则只输出一个1 */</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Judge(c))</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(c,</code><code class=\"cpp string\">\"0\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number87 index86 alt2\"> </div><div class=\"line number88 index87 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[] = {</code><code class=\"cpp string\">\'1\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'2\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'3\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'4\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'5\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'6\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'7\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'8\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b1 = 12345;</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b2[] = {</code><code class=\"cpp string\">\'2\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'3\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'4\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'5\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'6\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'6\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'7\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'8\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">len = 0;</code></div><div class=\"line number94 index93 alt1\"> </div><div class=\"line number95 index94 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">BigNumMultiSmall(a1,b1);</code></div><div class=\"line number96 index95 alt1\"> </div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len = </code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(c);</code></div><div class=\"line number98 index97 alt1\"> </div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"123456789*12345=\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;len;i++)</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">,c[i]);</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number105 index104 alt2\"> </div><div class=\"line number106 index105 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(c,0,2000);</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">BigNumMultiBig(a1,b2);</code></div><div class=\"line number108 index107 alt1\"> </div><div class=\"line number109 index108 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len = </code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(c);</code></div><div class=\"line number110 index109 alt1\"> </div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"123456789*234566789=\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;len;i++)</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">,c[i]);</code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number117 index116 alt2\"> </div><div class=\"line number118 index117 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(15, '4、整型常量阶乘', '二、高精度计算', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 整型常量阶乘 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 全局变量，存储大数运算的结果 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">c[1000];</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* 判断字符串ch是否全为0</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">* 若全为0，返回0，否则返回1</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Judge(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">ch[])</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,k;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(ch);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ch[i]!=</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">)</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp comments\">/* 整型常量阶乘 */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">BigNumFact(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x)</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,k,m=0,a[1000]={0};</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">a[0]=1;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(;x;x--)</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* m为在求阶乘过程中a的元素个数 */</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(k=i=0;i&lt;=m;i++)</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 数组各个元素均乘以x(x递减)，以完成阶乘的运算 */</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">k=k+a[i]*x;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">a[i]=k%10;</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">k/=10;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(k)</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">a[++m]=k%10;</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">k/=10;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number42 index41 alt1\"> </div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 阶乘的结果转化为字符型 */</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;=m;i++)</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">c[i]=a[m-i]+</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若结果全为0，则只输出一个 */</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Judge(c))</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(c,</code><code class=\"cpp string\">\"0\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp comments\">/* 计算100！ */</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len = 0;</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">BigNumFact(100);</code></div><div class=\"line number55 index54 alt2\"> </div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len = </code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(c);</code></div><div class=\"line number57 index56 alt2\"> </div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;len;i++)</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">,c[i]);</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number63 index62 alt2\"> </div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(16, '5、整型常量阶乘和', '二、高精度计算', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 整型常量阶乘和 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 全局变量，存储大数运算的结果 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">c[1000];</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* 判断字符串ch是否全为0</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">* 若全为0，返回0，否则返回1</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Judge(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">ch[])</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,k;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(ch);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ch[i]!=</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">)</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp comments\">/* 整型常量阶乘 */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">BigNumFact(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x)</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,k,m=0,a[1000]={0};</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">a[0]=1;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(;x;x--)</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* m为在求阶乘过程中a的元素个数 */</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(k=i=0;i&lt;=m;i++)</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 数组各个元素均乘以x(x递减)，以完成阶乘的运算 */</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">k=k+a[i]*x;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">a[i]=k%10;</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">k/=10;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(k)</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">a[++m]=k%10;</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">k/=10;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number42 index41 alt1\"> </div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 阶乘的结果转化为字符型 */</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;=m;i++)</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">c[i]=a[m-i]+</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若结果全为0，则只输出一个 */</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Judge(c))</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(c,</code><code class=\"cpp string\">\"0\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number50 index49 alt1\"> </div><div class=\"line number51 index50 alt2\"><code class=\"cpp comments\">/* 高精度加法 */</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">BigNumberAdd(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[],</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b1[])</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j,k,lena,lenb;</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[1000]={0},b[1000]={0},d[1000]={0};</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lena=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(a1);</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lenb=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(b1);</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将加数与被加数化为整型数组 */</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lena;i++)</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i]=a1[lena-i-1]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lenb;i++)</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">b[i]=b1[lenb-1-i]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number63 index62 alt2\"> </div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=lena&gt;lenb?lena:lenb;</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">d[i]=a[i]+b[i]+d[i];</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">d[i+1]=d[i+1]+d[i]/10;</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">d[i]=d[i]%10;</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若高位进 */</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(d[k])</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">k++;</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(!d[k-1])</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">k--;</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将整型数组逆着转变并赋值给c字符型数组 */</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=0;j&lt;k;j++)</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">c[j]=d[k-j-1]+</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若全为0，则只输出一个 */</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Judge(c))</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(c,</code><code class=\"cpp string\">\"0\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number83 index82 alt2\"> </div><div class=\"line number84 index83 alt1\"><code class=\"cpp comments\">/* 整型常量阶乘和 */</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">BigNumFactAdd(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">t)</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">sum[2000],d[2000];</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(d,0,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(d));</code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(sum,0,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(sum));</code></div><div class=\"line number91 index90 alt2\"> </div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 分别求出相应i的阶乘然后相加 */</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=t;i&gt;0;i--)</code></div><div class=\"line number94 index93 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">BigNumFact(i);</code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(d,c);</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(c,0,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(c));</code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">BigNumberAdd(d,sum);</code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(sum,c);</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(c,0,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(c));</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(c,sum);</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number104 index103 alt1\"> </div><div class=\"line number105 index104 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number106 index105 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len = 0;</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">BigNumFactAdd(10);</code></div><div class=\"line number109 index108 alt2\"> </div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len = </code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(c);</code></div><div class=\"line number111 index110 alt2\"> </div><div class=\"line number112 index111 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;len;i++)</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">,c[i]);</code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number117 index116 alt2\"> </div><div class=\"line number118 index117 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(17, '6、高精度的乘方', '二、高精度计算', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 高精度的乘方 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 全局变量，存储大数运算的结果 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">c[1000];</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* 判断字符串ch是否全为0</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">* 若全为0，返回0，否则返回1</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Judge(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">ch[])</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,k;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(ch);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ch[i]!=</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">)</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp comments\">/* 高精度乘以高精度 */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">BigNumMultiBig(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[],</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b1[])</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j,k,lena,lenb;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[1000]={0},b[1000]={0},d[2000]={0};</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lena=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(a1);</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lenb=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(b1);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将字符串转化为整型数组，并逆置 */</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lena;i++)</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i]=a1[lena-i-1]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lenb;i++)</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">b[i]=b1[lenb-i-1]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 计算乘数从低位到高位以此乘以被乘数的低位到高位 */</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lena;i++)</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=0;j&lt;lenb;j++)</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">d[i+j]=d[i+j]+a[i]*b[j];</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">d[i+j+1]+=d[i+j]/10;</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">d[i+j]=d[i+j]%10;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 根据高位是否为判断整型数组的位数 */</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">k=lena+lenb;</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(!d[k-1])</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">k--;</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 积转化为字符型 */</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">c[i]=d[k-1-i]+</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 若积全为0，则只输出一个1 */</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Judge(c))</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(c,</code><code class=\"cpp string\">\"0\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number52 index51 alt1\"> </div><div class=\"line number53 index52 alt2\"><code class=\"cpp comments\">/* 高精度的乘方 */</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">BigNumInvol(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b1)</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">temp[1000];</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(temp,a1);/</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=2;i&lt;b1;i++)</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">BigNumMultiBig(a1,temp);</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(temp,c);</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(c,0,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(c));</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">BigNumMultiBig(a1,temp);</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Judge(c))</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(c,</code><code class=\"cpp string\">\"0\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number70 index69 alt1\"> </div><div class=\"line number71 index70 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[] = {</code><code class=\"cpp string\">\'1\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'2\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'3\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'4\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'5\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'6\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'7\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'8\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len = 0,b1=2;</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">BigNumInvol(a1,b1);</code></div><div class=\"line number76 index75 alt1\"> </div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len = </code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(c);</code></div><div class=\"line number78 index77 alt1\"> </div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"123456789^%d=\"</code><code class=\"cpp plain\">,b1);</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;len;i++)</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">,c[i]);</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number85 index84 alt2\"> </div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(18, '7、高精度除法', '二、高精度计算', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div><div class=\"line number121 index120 alt2\">121</div><div class=\"line number122 index121 alt1\">122</div><div class=\"line number123 index122 alt2\">123</div><div class=\"line number124 index123 alt1\">124</div><div class=\"line number125 index124 alt2\">125</div><div class=\"line number126 index125 alt1\">126</div><div class=\"line number127 index126 alt2\">127</div><div class=\"line number128 index127 alt1\">128</div><div class=\"line number129 index128 alt2\">129</div><div class=\"line number130 index129 alt1\">130</div><div class=\"line number131 index130 alt2\">131</div><div class=\"line number132 index131 alt1\">132</div><div class=\"line number133 index132 alt2\">133</div><div class=\"line number134 index133 alt1\">134</div><div class=\"line number135 index134 alt2\">135</div><div class=\"line number136 index135 alt1\">136</div><div class=\"line number137 index136 alt2\">137</div><div class=\"line number138 index137 alt1\">138</div><div class=\"line number139 index138 alt2\">139</div><div class=\"line number140 index139 alt1\">140</div><div class=\"line number141 index140 alt2\">141</div><div class=\"line number142 index141 alt1\">142</div><div class=\"line number143 index142 alt2\">143</div><div class=\"line number144 index143 alt1\">144</div><div class=\"line number145 index144 alt2\">145</div><div class=\"line number146 index145 alt1\">146</div><div class=\"line number147 index146 alt2\">147</div><div class=\"line number148 index147 alt1\">148</div><div class=\"line number149 index148 alt2\">149</div><div class=\"line number150 index149 alt1\">150</div><div class=\"line number151 index150 alt2\">151</div><div class=\"line number152 index151 alt1\">152</div><div class=\"line number153 index152 alt2\">153</div><div class=\"line number154 index153 alt1\">154</div><div class=\"line number155 index154 alt2\">155</div><div class=\"line number156 index155 alt1\">156</div><div class=\"line number157 index156 alt2\">157</div><div class=\"line number158 index157 alt1\">158</div><div class=\"line number159 index158 alt2\">159</div><div class=\"line number160 index159 alt1\">160</div><div class=\"line number161 index160 alt2\">161</div><div class=\"line number162 index161 alt1\">162</div><div class=\"line number163 index162 alt2\">163</div><div class=\"line number164 index163 alt1\">164</div><div class=\"line number165 index164 alt2\">165</div><div class=\"line number166 index165 alt1\">166</div><div class=\"line number167 index166 alt2\">167</div><div class=\"line number168 index167 alt1\">168</div><div class=\"line number169 index168 alt2\">169</div><div class=\"line number170 index169 alt1\">170</div><div class=\"line number171 index170 alt2\">171</div><div class=\"line number172 index171 alt1\">172</div><div class=\"line number173 index172 alt2\">173</div><div class=\"line number174 index173 alt1\">174</div><div class=\"line number175 index174 alt2\">175</div><div class=\"line number176 index175 alt1\">176</div><div class=\"line number177 index176 alt2\">177</div><div class=\"line number178 index177 alt1\">178</div><div class=\"line number179 index178 alt2\">179</div><div class=\"line number180 index179 alt1\">180</div><div class=\"line number181 index180 alt2\">181</div><div class=\"line number182 index181 alt1\">182</div><div class=\"line number183 index182 alt2\">183</div><div class=\"line number184 index183 alt1\">184</div><div class=\"line number185 index184 alt2\">185</div><div class=\"line number186 index185 alt1\">186</div><div class=\"line number187 index186 alt2\">187</div><div class=\"line number188 index187 alt1\">188</div><div class=\"line number189 index188 alt2\">189</div><div class=\"line number190 index189 alt1\">190</div><div class=\"line number191 index190 alt2\">191</div><div class=\"line number192 index191 alt1\">192</div><div class=\"line number193 index192 alt2\">193</div><div class=\"line number194 index193 alt1\">194</div><div class=\"line number195 index194 alt2\">195</div><div class=\"line number196 index195 alt1\">196</div><div class=\"line number197 index196 alt2\">197</div><div class=\"line number198 index197 alt1\">198</div><div class=\"line number199 index198 alt2\">199</div><div class=\"line number200 index199 alt1\">200</div><div class=\"line number201 index200 alt2\">201</div><div class=\"line number202 index201 alt1\">202</div><div class=\"line number203 index202 alt2\">203</div><div class=\"line number204 index203 alt1\">204</div><div class=\"line number205 index204 alt2\">205</div><div class=\"line number206 index205 alt1\">206</div><div class=\"line number207 index206 alt2\">207</div><div class=\"line number208 index207 alt1\">208</div><div class=\"line number209 index208 alt2\">209</div><div class=\"line number210 index209 alt1\">210</div><div class=\"line number211 index210 alt2\">211</div><div class=\"line number212 index211 alt1\">212</div><div class=\"line number213 index212 alt2\">213</div><div class=\"line number214 index213 alt1\">214</div><div class=\"line number215 index214 alt2\">215</div><div class=\"line number216 index215 alt1\">216</div><div class=\"line number217 index216 alt2\">217</div><div class=\"line number218 index217 alt1\">218</div><div class=\"line number219 index218 alt2\">219</div><div class=\"line number220 index219 alt1\">220</div><div class=\"line number221 index220 alt2\">221</div><div class=\"line number222 index221 alt1\">222</div><div class=\"line number223 index222 alt2\">223</div><div class=\"line number224 index223 alt1\">224</div><div class=\"line number225 index224 alt2\">225</div><div class=\"line number226 index225 alt1\">226</div><div class=\"line number227 index226 alt2\">227</div><div class=\"line number228 index227 alt1\">228</div><div class=\"line number229 index228 alt2\">229</div><div class=\"line number230 index229 alt1\">230</div><div class=\"line number231 index230 alt2\">231</div><div class=\"line number232 index231 alt1\">232</div><div class=\"line number233 index232 alt2\">233</div><div class=\"line number234 index233 alt1\">234</div><div class=\"line number235 index234 alt2\">235</div><div class=\"line number236 index235 alt1\">236</div><div class=\"line number237 index236 alt2\">237</div><div class=\"line number238 index237 alt1\">238</div><div class=\"line number239 index238 alt2\">239</div><div class=\"line number240 index239 alt1\">240</div><div class=\"line number241 index240 alt2\">241</div><div class=\"line number242 index241 alt1\">242</div><div class=\"line number243 index242 alt2\">243</div><div class=\"line number244 index243 alt1\">244</div><div class=\"line number245 index244 alt2\">245</div><div class=\"line number246 index245 alt1\">246</div><div class=\"line number247 index246 alt2\">247</div><div class=\"line number248 index247 alt1\">248</div><div class=\"line number249 index248 alt2\">249</div><div class=\"line number250 index249 alt1\">250</div><div class=\"line number251 index250 alt2\">251</div><div class=\"line number252 index251 alt1\">252</div><div class=\"line number253 index252 alt2\">253</div><div class=\"line number254 index253 alt1\">254</div><div class=\"line number255 index254 alt2\">255</div><div class=\"line number256 index255 alt1\">256</div><div class=\"line number257 index256 alt2\">257</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 高精度除法 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 全局变量，存储大数运算的结果 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">c[1000];</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp comments\">/* 高精度除以高精度的余数 */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">arr[1000];</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* 高精度除以低精度的余数 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">z=0;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp comments\">/* 判断字符串ch是否全为0</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp comments\">* 若全为0，返回0，否则返回1</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Judge(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">ch[])</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,k;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(ch);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ch[i]!=</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">)</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number24 index23 alt1\"> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp comments\">/* 比较字符串的大小 */</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Compare(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a[],</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b[])</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">lena,lenb,i; </code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lena=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(a);</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lenb=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(b);</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(lena&lt;lenb)</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">-1;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(lena&gt;lenb)</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">strcmp</code><code class=\"cpp plain\">(a,b)==0)</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lena;i++)</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">{</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a[i]&gt;b[i])</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">                        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a[i]&lt;b[i])</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">                        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">-1;</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">}</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number53 index52 alt2\"> </div><div class=\"line number54 index53 alt1\"><code class=\"cpp comments\">/* 依照由低位至高位的顺序进行减法运算。在每次位运算中，若出现不够减的情况，</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp comments\">* 则向高位借位。在进行了la的减法后，若最高位为0，则a的长度减。</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp comments\">* 若A、B大小未知，则需先判断大小。</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp comments\">* a1为被减数，b1为减数</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">BigNumberSub(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[],</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b1[])</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">lena,lenb,i,k,flag;</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[1000]={0},b[1000]={0},d[1000]={0};</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lena=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(a1);</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lenb=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(b1);</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若被减数大于等于减数 */</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Compare(a1,b1)&gt;=0)</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lena;i++)</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">a[i]=a1[lena-1-i]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lenb;i++)</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">b[i]=b1[lenb-1-i]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 结果正的标志 */</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">flag=0;</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 若被减数小于减数 */</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lenb;i++)</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">a[i]=b1[lenb-1-i]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lena;i++)</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">b[i]=a1[lena-1-i]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 结果负的标志 */</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">flag=1;</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=lena&gt;lenb?lena:lenb;</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 大数减小数 */</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a[i]&lt;b[i])</code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 若被减数不够减，向高位借一位 */</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">a[i+1]--;</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">d[i]=a[i]-b[i]+10;</code></div><div class=\"line number94 index93 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">d[i]=a[i]-b[i];</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number98 index97 alt1\"> </div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若较高位已为0，并且不止1位时 */</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(!d[i-1])</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">k--;</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">i--;</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number105 index104 alt2\"> </div><div class=\"line number106 index105 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 根据flag，输出有无\"-\" */</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!flag)</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 将结果转化为字符逆着赋给数组c */</code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 若差的第一个字母为0，则马上跳过 */</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!i&amp;&amp;!d[k-i-1])</code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">continue</code><code class=\"cpp plain\">;</code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">c[i]=d[k-i-1]+</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number118 index117 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">c[0]=</code><code class=\"cpp string\">\'-\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number121 index120 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 将结果转化为字符逆着赋给数组c */</code></div><div class=\"line number122 index121 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=1;i&lt;=k;i++)</code></div><div class=\"line number123 index122 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number124 index123 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 若差的第一个字母为0，则马上跳过 */</code></div><div class=\"line number125 index124 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i==1&amp;&amp;!d[k-i])</code></div><div class=\"line number126 index125 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">continue</code><code class=\"cpp plain\">;</code></div><div class=\"line number127 index126 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 注意d的下标，不是k-i-1 */</code></div><div class=\"line number128 index127 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">c[i]=d[k-i]+</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number129 index128 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number130 index129 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number131 index130 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若差全为0，则只输出一个 */</code></div><div class=\"line number132 index131 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Judge(c))</code></div><div class=\"line number133 index132 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(c,</code><code class=\"cpp string\">\"0\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number134 index133 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number135 index134 alt2\"> </div><div class=\"line number136 index135 alt1\"><code class=\"cpp comments\">/* 高精度除以低精度 */</code></div><div class=\"line number137 index136 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">BigNumDividSmall(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b1)</code></div><div class=\"line number138 index137 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number139 index138 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!b1)</code></div><div class=\"line number140 index139 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number141 index140 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j,k,flag=0,a[1000]={0};</code></div><div class=\"line number142 index141 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b[2000];</code></div><div class=\"line number143 index142 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(b,0,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(b));</code></div><div class=\"line number144 index143 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(a1);</code></div><div class=\"line number145 index144 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number146 index145 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i]=a1[i]-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number147 index146 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">z=0;</code></div><div class=\"line number148 index147 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number149 index148 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number150 index149 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">z=a[i]+z*10;</code></div><div class=\"line number151 index150 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">b[i]=z/b1+</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number152 index151 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">z=z%b1;</code></div><div class=\"line number153 index152 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number154 index153 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">i=j=0;</code></div><div class=\"line number155 index154 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(b[i++]==</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">);</code></div><div class=\"line number156 index155 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=i-1;i&lt;k;i++)</code></div><div class=\"line number157 index156 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">c[j++]=b[i];</code></div><div class=\"line number158 index157 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number159 index158 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number160 index159 alt1\"> </div><div class=\"line number161 index160 alt2\"><code class=\"cpp comments\">/* 高精度除以高精度 */</code></div><div class=\"line number162 index161 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">BigNumDividBig(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[],</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b1[])</code></div><div class=\"line number163 index162 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number164 index163 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b[1000],</code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">[1000];</code></div><div class=\"line number165 index164 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">lena1,lentime,i,j,k,flag=0;</code></div><div class=\"line number166 index165 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(arr,0,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(arr));</code><code class=\"cpp comments\">//若被除数小于除数，则商为，余数为被除数</code></div><div class=\"line number167 index166 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Compare(a1,b1)&lt;0)</code></div><div class=\"line number168 index167 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(arr,a1);</code></div><div class=\"line number169 index168 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">//若两数相等，则商为，余数为</code></div><div class=\"line number170 index169 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number171 index170 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!Compare(a1,b1))</code></div><div class=\"line number172 index171 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">c[0]=</code><code class=\"cpp string\">\'1\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number173 index172 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">//若被除数大于除数</code></div><div class=\"line number174 index173 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number175 index174 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number176 index175 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">j=lentime=0;</code></div><div class=\"line number177 index176 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">lena1=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(a1);</code></div><div class=\"line number178 index177 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(b,0,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(b));</code></div><div class=\"line number179 index178 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">,0,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">));</code></div><div class=\"line number180 index179 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lena1;i++)</code></div><div class=\"line number181 index180 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code><code class=\"cpp comments\">//计算得到被除数的前几位,得到整型数组形式的商</code></div><div class=\"line number182 index181 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp comments\">//time的一个元素表示一次相除的商</code></div><div class=\"line number183 index182 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">b[j++]=a1[i];</code></div><div class=\"line number184 index183 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">flag=0;</code></div><div class=\"line number185 index184 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(Compare(b,b1)&gt;=0)</code></div><div class=\"line number186 index185 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">{</code></div><div class=\"line number187 index186 alt2\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">BigNumberSub(b,b1);</code></div><div class=\"line number188 index187 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(b,c);</code></div><div class=\"line number189 index188 alt2\"><code class=\"cpp spaces\">                    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(c,0,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(c));</code></div><div class=\"line number190 index189 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">[lentime]++;</code></div><div class=\"line number191 index190 alt2\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">flag=1;</code><code class=\"cpp comments\">//控制time的元素的位置</code></div><div class=\"line number192 index191 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">}</code></div><div class=\"line number193 index192 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(flag)</code><code class=\"cpp comments\">//将商转换为字符</code></div><div class=\"line number194 index193 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">[lentime]+=</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number195 index194 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">else</code><code class=\"cpp comments\">//当被除数前几位小于除数，商补</code></div><div class=\"line number196 index195 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">[lentime]=</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number197 index196 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!</code><code class=\"cpp functions bold\">strcmp</code><code class=\"cpp plain\">(b,</code><code class=\"cpp string\">\"0\"</code><code class=\"cpp plain\">))</code><code class=\"cpp comments\">//若b为‘’</code></div><div class=\"line number198 index197 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">j=0;</code></div><div class=\"line number199 index198 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">else</code><code class=\"cpp comments\">//继续在b的后面加值</code></div><div class=\"line number200 index199 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">j=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(b);</code></div><div class=\"line number201 index200 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">lentime++;</code></div><div class=\"line number202 index201 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number203 index202 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">k=0;</code></div><div class=\"line number204 index203 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;lentime;i++)</code></div><div class=\"line number205 index204 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">[i]!=</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">)</code></div><div class=\"line number206 index205 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code><code class=\"cpp comments\">//找到time数组中第一个不为的位置</code></div><div class=\"line number207 index206 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=i;j&lt;lentime;j++)</code></div><div class=\"line number208 index207 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">c[k++]=</code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">[j];</code></div><div class=\"line number209 index208 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(arr,b);</code></div><div class=\"line number210 index209 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number211 index210 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Judge(c))</code></div><div class=\"line number212 index211 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(c,</code><code class=\"cpp string\">\"0\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number213 index212 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Judge(arr))</code></div><div class=\"line number214 index213 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(arr,</code><code class=\"cpp string\">\"0\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number215 index214 alt2\"><code class=\"cpp plain\">}    </code></div><div class=\"line number216 index215 alt1\"> </div><div class=\"line number217 index216 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number218 index217 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number219 index218 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[] = {</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'2\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'3\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'4\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'5\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'6\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'7\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'8\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number220 index219 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b1 = 12345;</code></div><div class=\"line number221 index220 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b2[] = {</code><code class=\"cpp string\">\'2\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'3\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'4\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'5\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'6\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'6\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'7\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'8\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">,</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number222 index221 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">len = 0;</code></div><div class=\"line number223 index222 alt2\"> </div><div class=\"line number224 index223 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">BigNumDividSmall(a1,b1);</code></div><div class=\"line number225 index224 alt2\"> </div><div class=\"line number226 index225 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len = </code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(c);</code></div><div class=\"line number227 index226 alt2\"> </div><div class=\"line number228 index227 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"923456789/12345=\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number229 index228 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;len;i++)</code></div><div class=\"line number230 index229 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number231 index230 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">,c[i]);</code></div><div class=\"line number232 index231 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number233 index232 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number234 index233 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"余数：%ld\\n\"</code><code class=\"cpp plain\">,z);</code></div><div class=\"line number235 index234 alt2\"> </div><div class=\"line number236 index235 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(c,0,2000);</code></div><div class=\"line number237 index236 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">BigNumDividBig(a1,b2);</code></div><div class=\"line number238 index237 alt1\"> </div><div class=\"line number239 index238 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len = </code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(c);</code></div><div class=\"line number240 index239 alt1\"> </div><div class=\"line number241 index240 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"923456789/234566789=\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number242 index241 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;len;i++)</code></div><div class=\"line number243 index242 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number244 index243 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">,c[i]);</code></div><div class=\"line number245 index244 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number246 index245 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number247 index246 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number248 index247 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"余数：\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number249 index248 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(arr);i++)</code></div><div class=\"line number250 index249 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number251 index250 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">,arr[i]);</code></div><div class=\"line number252 index251 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number253 index252 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number254 index253 alt1\"> </div><div class=\"line number255 index254 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number256 index255 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number257 index256 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(19, '1、二分法', '三、数值分析', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 二分法 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">f(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x)</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1+x-x*x*x;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp comments\">/* 1+x-x^3 = 0 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">a = 1, b = 2, e = 1e-5;</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">e = </code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(e);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(f(a)) &lt;= e)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"solution: %lg\\n\"</code><code class=\"cpp plain\">, a);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(f(b)) &lt;= e)</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"solution: %lg\\n\"</code><code class=\"cpp plain\">, b);</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(f(a)*f(b) &gt; 0)</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"f(%lg)*f(%lg) &gt; 0 ! need &lt;= 0 !\\n\"</code><code class=\"cpp plain\">, a, b);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(b-a) &gt; e)</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">c = (a+b)/2.0;</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(f(a)* f ( c ) &lt; 0)</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">b = c;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">a = c;</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"solution: %lg\\n\"</code><code class=\"cpp plain\">, (a+b)/2.0);</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number41 index40 alt2\"> </div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(20, '2、迭代法', '三、数值分析', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 迭代法 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">a = 30,x0,x1;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a&lt;0)</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Error!\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">x0=a/2;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">x1=(x0+a/x0)/2;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">do</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">x0=x1;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">x1=(x0+a/x0)/2;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(x0-x1)&gt;=1e-6);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Result:\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"sqrt(%g)=%g\\n\"</code><code class=\"cpp plain\">,a,x1);</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(21, '3、牛顿迭代', '三、数值分析', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 牛顿迭代 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* 函数f(x)=1+x-x^3 */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">func(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x)</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1+x-x*x*x;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp comments\">/* 导函数 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">func1(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x)</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1-3*x*x;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp comments\">/* 牛顿迭代 */</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Newton(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">*x,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">precision,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">maxcyc)</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x1,x0;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">k;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">x0=*x;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(k=0;k&lt;maxcyc;k++)</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(func1(x0)==0.0)</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"迭代过程中导数为0!\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">x1=x0-func(x0)/func1(x0);</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(x1-x0)&lt;precision || </code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(func(x1))&lt;precision)</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">*x=x1;</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">x0=x1;</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"迭代次数超过预期！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x = 2,precision = 1e-5;</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">maxcyc = 5;</code></div><div class=\"line number46 index45 alt1\"> </div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Newton(&amp;x,precision,maxcyc)==1) </code><code class=\"cpp comments\">//若函数返回值为1</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"该值附近的根为：%lf\\n\"</code><code class=\"cpp plain\">,x);</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp comments\">//若函数返回值为0</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"迭代失败！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(22, '4、数值积分', '三、数值分析', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 辛普生法计算积分值 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/*********************************************</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp comments\">* 用复合辛普生法计算函数f(x)从a到b的积分值 </code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">* 输入: f--函数f(x)的指针 </code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">*         a--积分下限 </code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp comments\">*         b--积分上限 </code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp comments\">*         n--分段数 </code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp comments\">* 输出: 返回值为f(x)从a点到b点的积分值 </code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp comments\">***********************************************/</code> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">composite_simpson(</code><code class=\"cpp color1 bold\">double</code><code class=\"cpp plain\">(*f)(</code><code class=\"cpp color1 bold\">double</code><code class=\"cpp plain\">),</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">b,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n) </code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp plain\">{ </code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">s,h,x; </code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i; </code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"x\\t\\tf(x)\\t\\ts\\n\"</code><code class=\"cpp plain\">); </code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s=(*f)(a)-(*f)(b); </code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">h=(b-a)/(2*n); </code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">x=a; </code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=1;i&lt;2*n;i+=2) </code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{ </code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">x+=h; </code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">s+=4*(*f)(x); </code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%f\\t%f\\t%f\\n\"</code><code class=\"cpp plain\">,x,(*f)(x),s*h/3); </code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">x+=h; </code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">s+=2*(*f)(x); </code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%f\\t%f\\t%f\\n\"</code><code class=\"cpp plain\">,x,(*f)(x),s*h/3); </code></div><div class=\"line number30 index29 alt1\"> </div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">(s*h/3); </code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp plain\">} </code></div><div class=\"line number34 index33 alt1\"> </div><div class=\"line number35 index34 alt2\"> </div><div class=\"line number36 index35 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">myfun(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x) </code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp plain\">{ </code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y; </code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">y=4.0/(1+x*x); </code></div><div class=\"line number41 index40 alt2\"> </div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">(y); </code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp plain\">} </code></div><div class=\"line number44 index43 alt1\"> </div><div class=\"line number45 index44 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main() </code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp plain\">{ </code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code><code class=\"cpp plain\">(*fun)(</code><code class=\"cpp color1 bold\">double</code><code class=\"cpp plain\">); </code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">a,b,result; </code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n; </code></div><div class=\"line number50 index49 alt1\"> </div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">a=0; </code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">b=1; </code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n=4; </code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">fun=myfun; </code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">result=composite_simpson(fun,a,b,n); </code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n积分值为:%f\\n\"</code><code class=\"cpp plain\">,result); </code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(23, '5、高斯消元', '三、数值分析', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 高斯消元 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define N 10</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0,j=0,r=0,n=0,k=1;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">a[N][N],x[N],max=-1,sum1=0,sum2=0;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 输入矩阵维数 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Please enter n(0&lt;n&lt;11):\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;n);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 输入矩阵元素，最后一列为b[] */</code> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=1;i&lt;=n;i++)</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=1;j&lt;=n+1;j++)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Please enter a[%d][%d]:\\n\"</code><code class=\"cpp plain\">,i,j);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%f\"</code><code class=\"cpp plain\">,&amp;a[i][j]);    </code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">do</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=k;i&lt;=n;i++)</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(a[i][k])&gt;max)</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">max=a[i][k];</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">r=i;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a[r][k]==0)</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Cannot solve!\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(1);</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number37 index36 alt2\"> </div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 换行 */</code> </div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=1;j&lt;=n+1;j++)</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">sum1=a[k][j];</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">a[k][j]=a[r][j];</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">a[r][j]=sum1;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number47 index46 alt2\"> </div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 将矩阵化为上三角矩阵 */</code> </div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=k+1;i&lt;=n;i++)</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=k+1;j&lt;=n+1;j++)</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">a[i][j]=a[i][j]-(a[i][k])*(a[k][j])/(a[k][k]);</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">k=k+1;</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">max=-1;           </code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(k&lt;(n-1));</code></div><div class=\"line number59 index58 alt2\"> </div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 求x[] */</code> </div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">x[n]=(a[n][n+1])/(a[n][n]);</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(k=n-1;k&gt;=1;k--)</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=k+1;j&lt;=n;j++)</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">sum2=sum2+(a[k][j])*(x[j]);</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">x[k]=(a[k][n+1]-sum2)/(a[k][k]);</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">sum2=0;</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number69 index68 alt2\"> </div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 输出结果 */</code> </div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=1;i&lt;=n;i++)</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%f\\n\"</code><code class=\"cpp plain\">,x[i]);</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(1);</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(24, '1、多边形', '四、计算几何', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div><div class=\"line number121 index120 alt2\">121</div><div class=\"line number122 index121 alt1\">122</div><div class=\"line number123 index122 alt2\">123</div><div class=\"line number124 index123 alt1\">124</div><div class=\"line number125 index124 alt2\">125</div><div class=\"line number126 index125 alt1\">126</div><div class=\"line number127 index126 alt2\">127</div><div class=\"line number128 index127 alt1\">128</div><div class=\"line number129 index128 alt2\">129</div><div class=\"line number130 index129 alt1\">130</div><div class=\"line number131 index130 alt2\">131</div><div class=\"line number132 index131 alt1\">132</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#define MAXN 1000</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#define offset 10000</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp preprocessor\">#define eps 1e-8</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define zero(x) (((x)&gt;0?(x):-(x))&lt;eps)</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define _sign(x) ((x)&gt;eps?1:((x)&lt;-eps?2:0))</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">point{</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,y;};</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">line{point a,b;};</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">xmult(point p1,point p2,point p0){</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp comments\">//判定凸多边形,顶点按顺时针或逆时针给出,允许相邻边共线</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">is_convex(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,point* p){</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,s[3]={1,1,1};</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n&amp;&amp;s[1]|s[2];i++)</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">s[_sign(xmult(p[(i+1)%n],p[(i+2)%n],p[i]))]=0;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">s[1]|s[2];</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp comments\">//判定凸多边形,顶点按顺时针或逆时针给出,不允许相邻边共线</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">is_convex_v2(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,point* p){</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,s[3]={1,1,1};</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n&amp;&amp;s[0]&amp;&amp;s[1]|s[2];i++)</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">s[_sign(xmult(p[(i+1)%n],p[(i+2)%n],p[i]))]=0;</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">s[0]&amp;&amp;s[1]|s[2];</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number30 index29 alt1\"> </div><div class=\"line number31 index30 alt2\"><code class=\"cpp comments\">//判点在凸多边形内或多边形边上,顶点按顺时针或逆时针给出</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">inside_convex(point q,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,point* p){</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,s[3]={1,1,1};</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n&amp;&amp;s[1]|s[2];i++)</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">s[1]|s[2];</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number38 index37 alt1\"> </div><div class=\"line number39 index38 alt2\"><code class=\"cpp comments\">//判点在凸多边形内,顶点按顺时针或逆时针给出,在多边形边上返回0</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">inside_convex_v2(point q,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,point* p){</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,s[3]={1,1,1};</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n&amp;&amp;s[0]&amp;&amp;s[1]|s[2];i++)</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">s[_sign(xmult(p[(i+1)%n],q,p[i]))]=0;</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">s[0]&amp;&amp;s[1]|s[2];</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number46 index45 alt1\"> </div><div class=\"line number47 index46 alt2\"><code class=\"cpp comments\">//判点在任意多边形内,顶点按顺时针或逆时针给出</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp comments\">//on_edge表示点在多边形边上时的返回值,offset为多边形坐标上限</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">inside_polygon(point q,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,point* p,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">on_edge=1){</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point q2;</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0,count;</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(i&lt;n)</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(count=i=0,q2.x=</code><code class=\"cpp functions bold\">rand</code><code class=\"cpp plain\">()+offset,q2.y=</code><code class=\"cpp functions bold\">rand</code><code class=\"cpp plain\">()+offset;i&lt;n;i++)</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(zero(xmult(q,p[i],p[(i+1)%n]))&amp;&amp;(p[i].x-q.x)*(p[(i+1)%n].x-q.x)&lt;eps&amp;&amp;(p[i].y-q.y)*(p[(i+1)%n].y-q.y)&lt;eps)</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">on_edge;</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(zero(xmult(q,q2,p[i])))</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(xmult(q,p[i],q2)*xmult(q,p[(i+1)%n],q2)&lt;-eps&amp;&amp;xmult(p[i],q,p[(i+1)%n])*xmult(p[i],q2,p[(i+1)%n])&lt;-eps)</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">count++;</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">count&amp;1;</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number62 index61 alt1\"> </div><div class=\"line number63 index62 alt2\"><code class=\"cpp keyword bold\">inline</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">opposite_side(point p1,point p2,point l1,point l2){</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">xmult(l1,p1,l2)*xmult(l1,p2,l2)&lt;-eps;</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number66 index65 alt1\"> </div><div class=\"line number67 index66 alt2\"><code class=\"cpp keyword bold\">inline</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_online_in(point p,point l1,point l2){</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(xmult(p,l1,l2))&amp;&amp;(l1.x-p.x)*(l2.x-p.x)&lt;eps&amp;&amp;(l1.y-p.y)*(l2.y-p.y)&lt;eps;</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number70 index69 alt1\"> </div><div class=\"line number71 index70 alt2\"><code class=\"cpp comments\">//判线段在任意多边形内,顶点按顺时针或逆时针给出,与边界相交返回1</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">inside_polygon(point l1,point l2,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,point* p){</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point t[MAXN],tt;</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j,k=0;</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!inside_polygon(l1,n,p)||!inside_polygon(l2,n,p))</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(opposite_side(l1,l2,p[i],p[(i+1)%n])&amp;&amp;opposite_side(p[i],p[(i+1)%n],l1,l2))</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(dot_online_in(l1,p[i],p[(i+1)%n]))</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">t[k++]=l1;</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(dot_online_in(l2,p[i],p[(i+1)%n]))</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">t[k++]=l2;</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(dot_online_in(p[i],l1,l2))</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">t[k++]=p[i];</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;k;i++)</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(j=i+1;j&lt;k;j++){</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">tt.x=(t[i].x+t[j].x)/2;</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">tt.y=(t[i].y+t[j].y)/2;</code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!inside_polygon(tt,n,p))</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">                    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;            </code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number94 index93 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number95 index94 alt2\"> </div><div class=\"line number96 index95 alt1\"><code class=\"cpp plain\">point intersection(line u,line v){</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point ret=u.a;</code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">t=((u.a.x-v.a.x)*(v.a.y-v.b.y)-(u.a.y-v.a.y)*(v.a.x-v.b.x))</code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">/((u.a.x-u.b.x)*(v.a.y-v.b.y)-(u.a.y-u.b.y)*(v.a.x-v.b.x));</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.x+=(u.b.x-u.a.x)*t;</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.y+=(u.b.y-u.a.y)*t;</code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number104 index103 alt1\"> </div><div class=\"line number105 index104 alt2\"><code class=\"cpp plain\">point barycenter(point a,point b,point c){</code></div><div class=\"line number106 index105 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">line u,v;</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.a.x=(a.x+b.x)/2;</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.a.y=(a.y+b.y)/2;</code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.b=c;</code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.a.x=(a.x+c.x)/2;</code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.a.y=(a.y+c.y)/2;</code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.b=b;</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">intersection(u,v);</code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number115 index114 alt2\"> </div><div class=\"line number116 index115 alt1\"><code class=\"cpp comments\">//多边形重心</code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp plain\">point barycenter(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,point* p){</code></div><div class=\"line number118 index117 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point ret,t;</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">t1=0,t2;</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number121 index120 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.x=ret.y=0;</code></div><div class=\"line number122 index121 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=1;i&lt;n-1;i++)</code></div><div class=\"line number123 index122 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(t2=xmult(p[0],p[i],p[i+1]))&gt;eps){</code></div><div class=\"line number124 index123 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">t=barycenter(p[0],p[i],p[i+1]);</code></div><div class=\"line number125 index124 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">ret.x+=t.x*t2;</code></div><div class=\"line number126 index125 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">ret.y+=t.y*t2;</code></div><div class=\"line number127 index126 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">t1+=t2;</code></div><div class=\"line number128 index127 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number129 index128 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(t1)&gt;eps)</code></div><div class=\"line number130 index129 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">ret.x/=t1,ret.y/=t1;</code></div><div class=\"line number131 index130 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number132 index131 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(25, '2、多边形切割', '四、计算几何', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">//多边形切割</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp comments\">//可用于半平面交</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#define MAXN 100</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#define eps 1e-8</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp preprocessor\">#define zero(x) (((x)&gt;0?(x):-(x))&lt;eps)</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">point{</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,y;};</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">xmult(point p1,point p2,point p0){</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">same_side(point p1,point p2,point l1,point l2){</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">xmult(l1,p1,l2)*xmult(l1,p2,l2)&gt;eps;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">point intersection(point u1,point u2,point v1,point v2){</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point ret=u1;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">t=((u1.x-v1.x)*(v1.y-v2.y)-(u1.y-v1.y)*(v1.x-v2.x))</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">/((u1.x-u2.x)*(v1.y-v2.y)-(u1.y-u2.y)*(v1.x-v2.x));</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.x+=(u2.x-u1.x)*t;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.y+=(u2.y-u1.y)*t;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number24 index23 alt1\"> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp comments\">//将多边形沿l1,l2确定的直线切割在side侧切割,保证l1,l2,side不共线</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">polygon_cut(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">&amp; n,point* p,point l1,point l2,point side){</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point pp[100];</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">m=0,i;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++){</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(same_side(p[i],side,l1,l2))</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">pp[m++]=p[i];</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!same_side(p[i],p[(i+1)%n],l1,l2)&amp;&amp;!(zero(xmult(p[i],l1,l2))&amp;&amp;zero(xmult(p[(i+1)%n],l1,l2))))</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">pp[m++]=intersection(p[i],p[(i+1)%n],l1,l2);</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(n=i=0;i&lt;m;i++)</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!i||!zero(pp[i].x-pp[i-1].x)||!zero(pp[i].y-pp[i-1].y))</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">p[n++]=pp[i];</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(zero(p[n-1].x-p[0].x)&amp;&amp;zero(p[n-1].y-p[0].y))</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">n--;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(n&lt;3)</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">n=0;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(26, '3、浮点几何函数', '四、计算几何', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div><div class=\"line number121 index120 alt2\">121</div><div class=\"line number122 index121 alt1\">122</div><div class=\"line number123 index122 alt2\">123</div><div class=\"line number124 index123 alt1\">124</div><div class=\"line number125 index124 alt2\">125</div><div class=\"line number126 index125 alt1\">126</div><div class=\"line number127 index126 alt2\">127</div><div class=\"line number128 index127 alt1\">128</div><div class=\"line number129 index128 alt2\">129</div><div class=\"line number130 index129 alt1\">130</div><div class=\"line number131 index130 alt2\">131</div><div class=\"line number132 index131 alt1\">132</div><div class=\"line number133 index132 alt2\">133</div><div class=\"line number134 index133 alt1\">134</div><div class=\"line number135 index134 alt2\">135</div><div class=\"line number136 index135 alt1\">136</div><div class=\"line number137 index136 alt2\">137</div><div class=\"line number138 index137 alt1\">138</div><div class=\"line number139 index138 alt2\">139</div><div class=\"line number140 index139 alt1\">140</div><div class=\"line number141 index140 alt2\">141</div><div class=\"line number142 index141 alt1\">142</div><div class=\"line number143 index142 alt2\">143</div><div class=\"line number144 index143 alt1\">144</div><div class=\"line number145 index144 alt2\">145</div><div class=\"line number146 index145 alt1\">146</div><div class=\"line number147 index146 alt2\">147</div><div class=\"line number148 index147 alt1\">148</div><div class=\"line number149 index148 alt2\">149</div><div class=\"line number150 index149 alt1\">150</div><div class=\"line number151 index150 alt2\">151</div><div class=\"line number152 index151 alt1\">152</div><div class=\"line number153 index152 alt2\">153</div><div class=\"line number154 index153 alt1\">154</div><div class=\"line number155 index154 alt2\">155</div><div class=\"line number156 index155 alt1\">156</div><div class=\"line number157 index156 alt2\">157</div><div class=\"line number158 index157 alt1\">158</div><div class=\"line number159 index158 alt2\">159</div><div class=\"line number160 index159 alt1\">160</div><div class=\"line number161 index160 alt2\">161</div><div class=\"line number162 index161 alt1\">162</div><div class=\"line number163 index162 alt2\">163</div><div class=\"line number164 index163 alt1\">164</div><div class=\"line number165 index164 alt2\">165</div><div class=\"line number166 index165 alt1\">166</div><div class=\"line number167 index166 alt2\">167</div><div class=\"line number168 index167 alt1\">168</div><div class=\"line number169 index168 alt2\">169</div><div class=\"line number170 index169 alt1\">170</div><div class=\"line number171 index170 alt2\">171</div><div class=\"line number172 index171 alt1\">172</div><div class=\"line number173 index172 alt2\">173</div><div class=\"line number174 index173 alt1\">174</div><div class=\"line number175 index174 alt2\">175</div><div class=\"line number176 index175 alt1\">176</div><div class=\"line number177 index176 alt2\">177</div><div class=\"line number178 index177 alt1\">178</div><div class=\"line number179 index178 alt2\">179</div><div class=\"line number180 index179 alt1\">180</div><div class=\"line number181 index180 alt2\">181</div><div class=\"line number182 index181 alt1\">182</div><div class=\"line number183 index182 alt2\">183</div><div class=\"line number184 index183 alt1\">184</div><div class=\"line number185 index184 alt2\">185</div><div class=\"line number186 index185 alt1\">186</div><div class=\"line number187 index186 alt2\">187</div><div class=\"line number188 index187 alt1\">188</div><div class=\"line number189 index188 alt2\">189</div><div class=\"line number190 index189 alt1\">190</div><div class=\"line number191 index190 alt2\">191</div><div class=\"line number192 index191 alt1\">192</div><div class=\"line number193 index192 alt2\">193</div><div class=\"line number194 index193 alt1\">194</div><div class=\"line number195 index194 alt2\">195</div><div class=\"line number196 index195 alt1\">196</div><div class=\"line number197 index196 alt2\">197</div><div class=\"line number198 index197 alt1\">198</div><div class=\"line number199 index198 alt2\">199</div><div class=\"line number200 index199 alt1\">200</div><div class=\"line number201 index200 alt2\">201</div><div class=\"line number202 index201 alt1\">202</div><div class=\"line number203 index202 alt2\">203</div><div class=\"line number204 index203 alt1\">204</div><div class=\"line number205 index204 alt2\">205</div><div class=\"line number206 index205 alt1\">206</div><div class=\"line number207 index206 alt2\">207</div><div class=\"line number208 index207 alt1\">208</div><div class=\"line number209 index208 alt2\">209</div><div class=\"line number210 index209 alt1\">210</div><div class=\"line number211 index210 alt2\">211</div><div class=\"line number212 index211 alt1\">212</div><div class=\"line number213 index212 alt2\">213</div><div class=\"line number214 index213 alt1\">214</div><div class=\"line number215 index214 alt2\">215</div><div class=\"line number216 index215 alt1\">216</div><div class=\"line number217 index216 alt2\">217</div><div class=\"line number218 index217 alt1\">218</div><div class=\"line number219 index218 alt2\">219</div><div class=\"line number220 index219 alt1\">220</div><div class=\"line number221 index220 alt2\">221</div><div class=\"line number222 index221 alt1\">222</div><div class=\"line number223 index222 alt2\">223</div><div class=\"line number224 index223 alt1\">224</div><div class=\"line number225 index224 alt2\">225</div><div class=\"line number226 index225 alt1\">226</div><div class=\"line number227 index226 alt2\">227</div><div class=\"line number228 index227 alt1\">228</div><div class=\"line number229 index228 alt2\">229</div><div class=\"line number230 index229 alt1\">230</div><div class=\"line number231 index230 alt2\">231</div><div class=\"line number232 index231 alt1\">232</div><div class=\"line number233 index232 alt2\">233</div><div class=\"line number234 index233 alt1\">234</div><div class=\"line number235 index234 alt2\">235</div><div class=\"line number236 index235 alt1\">236</div><div class=\"line number237 index236 alt2\">237</div><div class=\"line number238 index237 alt1\">238</div><div class=\"line number239 index238 alt2\">239</div><div class=\"line number240 index239 alt1\">240</div><div class=\"line number241 index240 alt2\">241</div><div class=\"line number242 index241 alt1\">242</div><div class=\"line number243 index242 alt2\">243</div><div class=\"line number244 index243 alt1\">244</div><div class=\"line number245 index244 alt2\">245</div><div class=\"line number246 index245 alt1\">246</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">//浮点几何函数库</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#define eps 1e-8</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#define zero(x) (((x)&gt;0?(x):-(x))&lt;eps)</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">point{</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,y;};</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">line{point a,b;};</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">//计算cross product (P1-P0)x(P2-P0)</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">xmult(point p1,point p2,point p0){</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">xmult(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x0,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y0){</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(x1-x0)*(y2-y0)-(x2-x0)*(y1-y0);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp comments\">//计算dot product (P1-P0).(P2-P0)</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">dmult(point p1,point p2,point p0){</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(p1.x-p0.x)*(p2.x-p0.x)+(p1.y-p0.y)*(p2.y-p0.y);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">dmult(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x0,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y0){</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(x1-x0)*(x2-x0)+(y1-y0)*(y2-y0);</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp comments\">//两点距离</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">distance(point p1,point p2){</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">sqrt</code><code class=\"cpp plain\">((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">distance(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y2){</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">sqrt</code><code class=\"cpp plain\">((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number31 index30 alt2\"> </div><div class=\"line number32 index31 alt1\"><code class=\"cpp comments\">//判三点共线</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dots_inline(point p1,point p2,point p3){</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(xmult(p1,p2,p3));</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dots_inline(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x3,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y3){</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(xmult(x1,y1,x2,y2,x3,y3));</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp comments\">//判点是否在线段上,包括端点</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_online_in(point p,line l){</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(xmult(p,l.a,l.b))&amp;&amp;(l.a.x-p.x)*(l.b.x-p.x)&lt;eps&amp;&amp;(l.a.y-p.y)*(l.b.y-p.y)&lt;eps;</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_online_in(point p,point l1,point l2){</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(xmult(p,l1,l2))&amp;&amp;(l1.x-p.x)*(l2.x-p.x)&lt;eps&amp;&amp;(l1.y-p.y)*(l2.y-p.y)&lt;eps;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_online_in(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y2){</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(xmult(x,y,x1,y1,x2,y2))&amp;&amp;(x1-x)*(x2-x)&lt;eps&amp;&amp;(y1-y)*(y2-y)&lt;eps;</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number50 index49 alt1\"> </div><div class=\"line number51 index50 alt2\"><code class=\"cpp comments\">//判点是否在线段上,不包括端点</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_online_ex(point p,line l){</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dot_online_in(p,l)&amp;&amp;(!zero(p.x-l.a.x)||!zero(p.y-l.a.y))&amp;&amp;(!zero(p.x-l.b.x)||!zero(p.y-l.b.y));</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_online_ex(point p,point l1,point l2){</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dot_online_in(p,l1,l2)&amp;&amp;(!zero(p.x-l1.x)||!zero(p.y-l1.y))&amp;&amp;(!zero(p.x-l2.x)||!zero(p.y-l2.y));</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_online_ex(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y2){</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dot_online_in(x,y,x1,y1,x2,y2)&amp;&amp;(!zero(x-x1)||!zero(y-y1))&amp;&amp;(!zero(x-x2)||!zero(y-y2));</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number61 index60 alt2\"> </div><div class=\"line number62 index61 alt1\"><code class=\"cpp comments\">//判两点在线段同侧,点在线段上返回0</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">same_side(point p1,point p2,line l){</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">xmult(l.a,p1,l.b)*xmult(l.a,p2,l.b)&gt;eps;</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">same_side(point p1,point p2,point l1,point l2){</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">xmult(l1,p1,l2)*xmult(l1,p2,l2)&gt;eps;</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number69 index68 alt2\"> </div><div class=\"line number70 index69 alt1\"><code class=\"cpp comments\">//判两点在线段异侧,点在线段上返回0</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">opposite_side(point p1,point p2,line l){</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">xmult(l.a,p1,l.b)*xmult(l.a,p2,l.b)&lt;-eps;</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">opposite_side(point p1,point p2,point l1,point l2){</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">xmult(l1,p1,l2)*xmult(l1,p2,l2)&lt;-eps;</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number77 index76 alt2\"> </div><div class=\"line number78 index77 alt1\"><code class=\"cpp comments\">//判两直线平行</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">parallel(line u,line v){</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero((u.a.x-u.b.x)*(v.a.y-v.b.y)-(v.a.x-v.b.x)*(u.a.y-u.b.y));</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">parallel(point u1,point u2,point v1,point v2){</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero((u1.x-u2.x)*(v1.y-v2.y)-(v1.x-v2.x)*(u1.y-u2.y));</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number85 index84 alt2\"> </div><div class=\"line number86 index85 alt1\"><code class=\"cpp comments\">//判两直线垂直</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">perpendicular(line u,line v){</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero((u.a.x-u.b.x)*(v.a.x-v.b.x)+(u.a.y-u.b.y)*(v.a.y-v.b.y));</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">perpendicular(point u1,point u2,point v1,point v2){</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero((u1.x-u2.x)*(v1.x-v2.x)+(u1.y-u2.y)*(v1.y-v2.y));</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number93 index92 alt2\"> </div><div class=\"line number94 index93 alt1\"><code class=\"cpp comments\">//判两线段相交,包括端点和部分重合</code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">intersect_in(line u,line v){</code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!dots_inline(u.a,u.b,v.a)||!dots_inline(u.a,u.b,v.b))</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">!same_side(u.a,u.b,v)&amp;&amp;!same_side(v.a,v.b,u);</code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dot_online_in(u.a,v)||dot_online_in(u.b,v)||dot_online_in(v.a,u)||dot_online_in(v.b,u);</code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">intersect_in(point u1,point u2,point v1,point v2){</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!dots_inline(u1,u2,v1)||!dots_inline(u1,u2,v2))</code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">!same_side(u1,u2,v1,v2)&amp;&amp;!same_side(v1,v2,u1,u2);</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dot_online_in(u1,v1,v2)||dot_online_in(u2,v1,v2)||dot_online_in(v1,u1,u2)||dot_online_in(v2,u1,u2);</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number105 index104 alt2\"> </div><div class=\"line number106 index105 alt1\"><code class=\"cpp comments\">//判两线段相交,不包括端点和部分重合</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">intersect_ex(line u,line v){</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">opposite_side(u.a,u.b,v)&amp;&amp;opposite_side(v.a,v.b,u);</code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">intersect_ex(point u1,point u2,point v1,point v2){</code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">opposite_side(u1,u2,v1,v2)&amp;&amp;opposite_side(v1,v2,u1,u2);</code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number113 index112 alt2\"> </div><div class=\"line number114 index113 alt1\"><code class=\"cpp comments\">//计算两直线交点,注意事先判断直线是否平行!</code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp comments\">//线段交点请另外判线段相交(同时还是要判断是否平行!)</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp plain\">point intersection(line u,line v){</code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point ret=u.a;</code></div><div class=\"line number118 index117 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">t=((u.a.x-v.a.x)*(v.a.y-v.b.y)-(u.a.y-v.a.y)*(v.a.x-v.b.x))</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">/((u.a.x-u.b.x)*(v.a.y-v.b.y)-(u.a.y-u.b.y)*(v.a.x-v.b.x));</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.x+=(u.b.x-u.a.x)*t;</code></div><div class=\"line number121 index120 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.y+=(u.b.y-u.a.y)*t;</code></div><div class=\"line number122 index121 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number123 index122 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number124 index123 alt1\"><code class=\"cpp plain\">point intersection(point u1,point u2,point v1,point v2){</code></div><div class=\"line number125 index124 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point ret=u1;</code></div><div class=\"line number126 index125 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">t=((u1.x-v1.x)*(v1.y-v2.y)-(u1.y-v1.y)*(v1.x-v2.x))</code></div><div class=\"line number127 index126 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">/((u1.x-u2.x)*(v1.y-v2.y)-(u1.y-u2.y)*(v1.x-v2.x));</code></div><div class=\"line number128 index127 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.x+=(u2.x-u1.x)*t;</code></div><div class=\"line number129 index128 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.y+=(u2.y-u1.y)*t;</code></div><div class=\"line number130 index129 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number131 index130 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number132 index131 alt1\"> </div><div class=\"line number133 index132 alt2\"><code class=\"cpp comments\">//点到直线上的最近点</code></div><div class=\"line number134 index133 alt1\"><code class=\"cpp plain\">point ptoline(point p,line l){</code></div><div class=\"line number135 index134 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point t=p;</code></div><div class=\"line number136 index135 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">t.x+=l.a.y-l.b.y,t.y+=l.b.x-l.a.x;</code></div><div class=\"line number137 index136 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">intersection(p,t,l.a,l.b);</code></div><div class=\"line number138 index137 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number139 index138 alt2\"><code class=\"cpp plain\">point ptoline(point p,point l1,point l2){</code></div><div class=\"line number140 index139 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point t=p;</code></div><div class=\"line number141 index140 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">t.x+=l1.y-l2.y,t.y+=l2.x-l1.x;</code></div><div class=\"line number142 index141 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">intersection(p,t,l1,l2);</code></div><div class=\"line number143 index142 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number144 index143 alt1\"> </div><div class=\"line number145 index144 alt2\"><code class=\"cpp comments\">//点到直线距离</code></div><div class=\"line number146 index145 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">disptoline(point p,line l){</code></div><div class=\"line number147 index146 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(xmult(p,l.a,l.b))/distance(l.a,l.b);</code></div><div class=\"line number148 index147 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number149 index148 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">disptoline(point p,point l1,point l2){</code></div><div class=\"line number150 index149 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(xmult(p,l1,l2))/distance(l1,l2);</code></div><div class=\"line number151 index150 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number152 index151 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">disptoline(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y2){</code></div><div class=\"line number153 index152 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(xmult(x,y,x1,y1,x2,y2))/distance(x1,y1,x2,y2);</code></div><div class=\"line number154 index153 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number155 index154 alt2\"> </div><div class=\"line number156 index155 alt1\"><code class=\"cpp comments\">//点到线段上的最近点</code></div><div class=\"line number157 index156 alt2\"><code class=\"cpp plain\">point ptoseg(point p,line l){</code></div><div class=\"line number158 index157 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point t=p;</code></div><div class=\"line number159 index158 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">t.x+=l.a.y-l.b.y,t.y+=l.b.x-l.a.x;</code></div><div class=\"line number160 index159 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(xmult(l.a,t,p)*xmult(l.b,t,p)&gt;eps)</code></div><div class=\"line number161 index160 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">distance(p,l.a)&lt;distance(p,l.b)?l.a:l.b;</code></div><div class=\"line number162 index161 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">intersection(p,t,l.a,l.b);</code></div><div class=\"line number163 index162 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number164 index163 alt1\"><code class=\"cpp plain\">point ptoseg(point p,point l1,point l2){</code></div><div class=\"line number165 index164 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point t=p;</code></div><div class=\"line number166 index165 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">t.x+=l1.y-l2.y,t.y+=l2.x-l1.x;</code></div><div class=\"line number167 index166 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(xmult(l1,t,p)*xmult(l2,t,p)&gt;eps)</code></div><div class=\"line number168 index167 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">distance(p,l1)&lt;distance(p,l2)?l1:l2;</code></div><div class=\"line number169 index168 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">intersection(p,t,l1,l2);</code></div><div class=\"line number170 index169 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number171 index170 alt2\"> </div><div class=\"line number172 index171 alt1\"><code class=\"cpp comments\">//点到线段距离</code></div><div class=\"line number173 index172 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">disptoseg(point p,line l){</code></div><div class=\"line number174 index173 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point t=p;</code></div><div class=\"line number175 index174 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">t.x+=l.a.y-l.b.y,t.y+=l.b.x-l.a.x;</code></div><div class=\"line number176 index175 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(xmult(l.a,t,p)*xmult(l.b,t,p)&gt;eps)</code></div><div class=\"line number177 index176 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">distance(p,l.a)&lt;distance(p,l.b)?distance(p,l.a):distance(p,l.b);</code></div><div class=\"line number178 index177 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(xmult(p,l.a,l.b))/distance(l.a,l.b);</code></div><div class=\"line number179 index178 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number180 index179 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">disptoseg(point p,point l1,point l2){</code></div><div class=\"line number181 index180 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point t=p;</code></div><div class=\"line number182 index181 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">t.x+=l1.y-l2.y,t.y+=l2.x-l1.x;</code></div><div class=\"line number183 index182 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(xmult(l1,t,p)*xmult(l2,t,p)&gt;eps)</code></div><div class=\"line number184 index183 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">distance(p,l1)&lt;distance(p,l2)?distance(p,l1):distance(p,l2);</code></div><div class=\"line number185 index184 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(xmult(p,l1,l2))/distance(l1,l2);</code></div><div class=\"line number186 index185 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number187 index186 alt2\"> </div><div class=\"line number188 index187 alt1\"><code class=\"cpp comments\">//矢量V以P为顶点逆时针旋转angle并放大scale倍</code></div><div class=\"line number189 index188 alt2\"><code class=\"cpp plain\">point rotate(point v,point p,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">angle,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">scale){</code></div><div class=\"line number190 index189 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point ret=p;</code></div><div class=\"line number191 index190 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.x-=p.x,v.y-=p.y;</code></div><div class=\"line number192 index191 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p.x=scale*</code><code class=\"cpp functions bold\">cos</code><code class=\"cpp plain\">(angle);</code></div><div class=\"line number193 index192 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p.y=scale*</code><code class=\"cpp functions bold\">sin</code><code class=\"cpp plain\">(angle);</code></div><div class=\"line number194 index193 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.x+=v.x*p.x-v.y*p.y;</code></div><div class=\"line number195 index194 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.y+=v.x*p.y+v.y*p.x;</code></div><div class=\"line number196 index195 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number197 index196 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number198 index197 alt1\"> </div><div class=\"line number199 index198 alt2\"><code class=\"cpp comments\">//p点关于直线L的对称点</code></div><div class=\"line number200 index199 alt1\"><code class=\"cpp plain\">ponit symmetricalPointofLine(point p, line L)</code></div><div class=\"line number201 index200 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number202 index201 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point p2;</code></div><div class=\"line number203 index202 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">d;</code></div><div class=\"line number204 index203 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d = L.a * L.a + L.b * L.b;</code></div><div class=\"line number205 index204 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p2.x = (L.b * L.b * p.x - L.a * L.a * p.x - </code></div><div class=\"line number206 index205 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">2 * L.a * L.b * p.y - 2 * L.a * L.c) / d;</code></div><div class=\"line number207 index206 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p2.y = (L.a * L.a * p.y - L.b * L.b * p.y - </code></div><div class=\"line number208 index207 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">2 * L.a * L.b * p.x - 2 * L.b * L.c) / d;</code></div><div class=\"line number209 index208 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">p2;</code></div><div class=\"line number210 index209 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number211 index210 alt2\"> </div><div class=\"line number212 index211 alt1\"><code class=\"cpp comments\">//求两点的平分线</code></div><div class=\"line number213 index212 alt2\"><code class=\"cpp plain\">line bisector(point&amp; a, point&amp; b) {</code></div><div class=\"line number214 index213 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">line ab, ans;  ab.set(a, b);</code></div><div class=\"line number215 index214 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">midx = (a.x + b.x)/2.0,    midy = (a.y + b.y)/2.0;</code></div><div class=\"line number216 index215 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ans.a = -ab.b, ans.b = -ab.a, ans.c = -ab.b * midx + ab.a * midy;</code></div><div class=\"line number217 index216 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ans;</code></div><div class=\"line number218 index217 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number219 index218 alt2\"> </div><div class=\"line number220 index219 alt1\"><code class=\"cpp comments\">// 已知入射线、镜面，求反射线。 </code></div><div class=\"line number221 index220 alt2\"><code class=\"cpp comments\">// a1,b1,c1为镜面直线方程(a1 x + b1 y + c1 = 0 ,下同)系数;  </code></div><div class=\"line number222 index221 alt1\"><code class=\"cpp plain\">a2,b2,c2为入射光直线方程系数;  </code></div><div class=\"line number223 index222 alt2\"><code class=\"cpp plain\">a,b,c为反射光直线方程系数. </code></div><div class=\"line number224 index223 alt1\"><code class=\"cpp comments\">// 光是有方向的，使用时注意：入射光向量:&lt;-b2,a2&gt;；反射光向量:&lt;b,-a&gt;. </code></div><div class=\"line number225 index224 alt2\"><code class=\"cpp comments\">// 不要忘记结果中可能会有\"negative zeros\" </code></div><div class=\"line number226 index225 alt1\"> </div><div class=\"line number227 index226 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">reflect(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">a1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">b1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">c1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">a2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">b2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">c2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">&amp;a,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">&amp;b,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">&amp;c) </code></div><div class=\"line number228 index227 alt1\"><code class=\"cpp plain\">{ </code></div><div class=\"line number229 index228 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">n,m; </code></div><div class=\"line number230 index229 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">tpb,tpa; </code></div><div class=\"line number231 index230 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">tpb=b1*b2+a1*a2; </code></div><div class=\"line number232 index231 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">tpa=a2*b1-a1*b2; </code></div><div class=\"line number233 index232 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">m=(tpb*b1+tpa*a1)/(b1*b1+a1*a1); </code></div><div class=\"line number234 index233 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n=(tpa*b1-tpb*a1)/(b1*b1+a1*a1); </code></div><div class=\"line number235 index234 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(a1*b2-a2*b1)&lt;1e-20) </code></div><div class=\"line number236 index235 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{ </code></div><div class=\"line number237 index236 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a=a2;b=b2;c=c2; </code></div><div class=\"line number238 index237 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">; </code></div><div class=\"line number239 index238 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code></div><div class=\"line number240 index239 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">xx,yy; </code><code class=\"cpp comments\">//(xx,yy)是入射线与镜面的交点。 </code></div><div class=\"line number241 index240 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">xx=(b1*c2-b2*c1)/(a1*b2-a2*b1); </code></div><div class=\"line number242 index241 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">yy=(a2*c1-a1*c2)/(a1*b2-a2*b1); </code></div><div class=\"line number243 index242 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">a=n; </code></div><div class=\"line number244 index243 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">b=-m; </code></div><div class=\"line number245 index244 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">c=m*yy-xx*n; </code></div><div class=\"line number246 index245 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(27, '4、面积', '四、计算几何', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">point{</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,y;};</code></div><div class=\"line number3 index2 alt2\"> </div><div class=\"line number4 index3 alt1\"><code class=\"cpp comments\">//计算cross product (P1-P0)x(P2-P0)</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">xmult(point p1,point p2,point p0){</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">xmult(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x0,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y0){</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(x1-x0)*(y2-y0)-(x2-x0)*(y1-y0);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp comments\">//计算三角形面积,输入三顶点</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">area_triangle(point p1,point p2,point p3){</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(xmult(p1,p2,p3))/2;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">area_triangle(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x3,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y3){</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(xmult(x1,y1,x2,y2,x3,y3))/2;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp comments\">//计算三角形面积,输入三边长</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">area_triangle(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">b,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">c){</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">s=(a+b+c)/2;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">sqrt</code><code class=\"cpp plain\">(s*(s-a)*(s-b)*(s-c));</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp comments\">//计算多边形面积,顶点按顺时针或逆时针给出</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">area_polygon(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,point* p){</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">s1=0,s2=0;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">s1+=p[(i+1)%n].y*p[i].x,s2+=p[(i+1)%n].y*p[(i+2)%n].x;</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(s1-s2)/2;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(28, '5、球面', '四、计算几何', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">pi=</code><code class=\"cpp functions bold\">acos</code><code class=\"cpp plain\">(-1);</code></div><div class=\"line number3 index2 alt2\"> </div><div class=\"line number4 index3 alt1\"><code class=\"cpp comments\">//计算圆心角lat表示纬度,-90&lt;=w&lt;=90,lng表示经度</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">//返回两点所在大圆劣弧对应圆心角,0&lt;=angle&lt;=pi</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">angle(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">lng1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">lat1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">lng2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">lat2){</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">dlng=</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(lng1-lng2)*pi/180;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(dlng&gt;=pi+pi)</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">dlng-=pi+pi;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(dlng&gt;pi)</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">dlng=pi+pi-dlng;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lat1*=pi/180,lat2*=pi/180;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">acos</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">cos</code><code class=\"cpp plain\">(lat1)*</code><code class=\"cpp functions bold\">cos</code><code class=\"cpp plain\">(lat2)*</code><code class=\"cpp functions bold\">cos</code><code class=\"cpp plain\">(dlng)+</code><code class=\"cpp functions bold\">sin</code><code class=\"cpp plain\">(lat1)*</code><code class=\"cpp functions bold\">sin</code><code class=\"cpp plain\">(lat2));</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp comments\">//计算距离,r为球半径</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">line_dist(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">r,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">lng1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">lat1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">lng2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">lat2){</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">dlng=</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(lng1-lng2)*pi/180;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(dlng&gt;=pi+pi)</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">dlng-=pi+pi;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(dlng&gt;pi)</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">dlng=pi+pi-dlng;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">lat1*=pi/180,lat2*=pi/180;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">r*</code><code class=\"cpp functions bold\">sqrt</code><code class=\"cpp plain\">(2-2*(</code><code class=\"cpp functions bold\">cos</code><code class=\"cpp plain\">(lat1)*</code><code class=\"cpp functions bold\">cos</code><code class=\"cpp plain\">(lat2)*</code><code class=\"cpp functions bold\">cos</code><code class=\"cpp plain\">(dlng)+</code><code class=\"cpp functions bold\">sin</code><code class=\"cpp plain\">(lat1)*</code><code class=\"cpp functions bold\">sin</code><code class=\"cpp plain\">(lat2)));</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number26 index25 alt1\"> </div><div class=\"line number27 index26 alt2\"><code class=\"cpp comments\">//计算球面距离,r为球半径</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp keyword bold\">inline</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">sphere_dist(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">r,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">lng1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">lat1,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">lng2,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">lat2){</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">r*angle(lng1,lat1,lng2,lat2);</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(29, '6、三角形', '四、计算几何', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div><div class=\"line number121 index120 alt2\">121</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">point{</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,y;};</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">line{point a,b;};</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">distance(point p1,point p2){</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">sqrt</code><code class=\"cpp plain\">((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp plain\">point intersection(line u,line v){</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point ret=u.a;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">t=((u.a.x-v.a.x)*(v.a.y-v.b.y)-(u.a.y-v.a.y)*(v.a.x-v.b.x))</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">/((u.a.x-u.b.x)*(v.a.y-v.b.y)-(u.a.y-u.b.y)*(v.a.x-v.b.x));</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.x+=(u.b.x-u.a.x)*t;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.y+=(u.b.y-u.a.y)*t;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp comments\">//外心</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">point circumcenter(point a,point b,point c){</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">line u,v;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.a.x=(a.x+b.x)/2;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.a.y=(a.y+b.y)/2;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.b.x=u.a.x-a.y+b.y;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.b.y=u.a.y+a.x-b.x;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.a.x=(a.x+c.x)/2;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.a.y=(a.y+c.y)/2;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.b.x=v.a.x-a.y+c.y;</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.b.y=v.a.y+a.x-c.x;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">intersection(u,v);</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number31 index30 alt2\"> </div><div class=\"line number32 index31 alt1\"><code class=\"cpp comments\">//内心</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp plain\">point incenter(point a,point b,point c){</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">line u,v;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">m,n;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.a=a;</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">m=</code><code class=\"cpp functions bold\">atan2</code><code class=\"cpp plain\">(b.y-a.y,b.x-a.x);</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n=</code><code class=\"cpp functions bold\">atan2</code><code class=\"cpp plain\">(c.y-a.y,c.x-a.x);</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.b.x=u.a.x+</code><code class=\"cpp functions bold\">cos</code><code class=\"cpp plain\">((m+n)/2);</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.b.y=u.a.y+</code><code class=\"cpp functions bold\">sin</code><code class=\"cpp plain\">((m+n)/2);</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.a=b;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">m=</code><code class=\"cpp functions bold\">atan2</code><code class=\"cpp plain\">(a.y-b.y,a.x-b.x);</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n=</code><code class=\"cpp functions bold\">atan2</code><code class=\"cpp plain\">(c.y-b.y,c.x-b.x);</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.b.x=v.a.x+</code><code class=\"cpp functions bold\">cos</code><code class=\"cpp plain\">((m+n)/2);</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.b.y=v.a.y+</code><code class=\"cpp functions bold\">sin</code><code class=\"cpp plain\">((m+n)/2);</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">intersection(u,v);</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number48 index47 alt1\"> </div><div class=\"line number49 index48 alt2\"><code class=\"cpp comments\">//垂心</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp plain\">point perpencenter(point a,point b,point c){</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">line u,v;</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.a=c;</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.b.x=u.a.x-a.y+b.y;</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.b.y=u.a.y+a.x-b.x;</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.a=b;</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.b.x=v.a.x-a.y+c.y;</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.b.y=v.a.y+a.x-c.x;</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">intersection(u,v);</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number60 index59 alt1\"> </div><div class=\"line number61 index60 alt2\"><code class=\"cpp comments\">//重心</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp comments\">//到三角形三顶点距离的平方和最小的点</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp comments\">//三角形内到三边距离之积最大的点</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp plain\">point barycenter(point a,point b,point c){</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">line u,v;</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.a.x=(a.x+b.x)/2;</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.a.y=(a.y+b.y)/2;</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.b=c;</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.a.x=(a.x+c.x)/2;</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.a.y=(a.y+c.y)/2;</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">v.b=b;</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">intersection(u,v);</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number74 index73 alt1\"> </div><div class=\"line number75 index74 alt2\"><code class=\"cpp comments\">//费马点</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp comments\">//到三角形三顶点距离之和最小的点</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp plain\">point fermentpoint(point a,point b,point c){</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point u,v;</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">step=</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(a.x)+</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(a.y)+</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(b.x)+</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(b.y)+</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(c.x)+</code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(c.y);</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j,k;</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.x=(a.x+b.x+c.x)/3;</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">u.y=(a.y+b.y+c.y)/3;</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(step&gt;1e-10)</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(k=0;k&lt;10;step/=2,k++)</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=-1;i&lt;=1;i++)</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(j=-1;j&lt;=1;j++){</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">v.x=u.x+step*i;</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">v.y=u.y+step*j;</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp spaces\">                    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(distance(u,a)+distance(u,b)+distance(u,c)&gt;distance(v,a)+distance(v,b)+distance(v,c))</code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp spaces\">                        </code><code class=\"cpp plain\">u=v;</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">}</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">u;</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number94 index93 alt1\"> </div><div class=\"line number95 index94 alt2\"><code class=\"cpp comments\">//求曲率半径 三角形内最大可围成面积</code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp preprocessor\">#include&lt;iostream&gt;</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">#include&lt;cmath&gt;</code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp keyword bold\">using</code> <code class=\"cpp keyword bold\">namespace</code> <code class=\"cpp plain\">std;</code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">pi=3.14159265358979;</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">{</code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">a,b,c,d,p,s,r,ans,R,x,l; </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">T=0;</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&amp;&amp;a+b+c+d)</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp spaces\">     </code><code class=\"cpp plain\">{</code></div><div class=\"line number105 index104 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">T++;</code></div><div class=\"line number106 index105 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">l=a+b+c;</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=l/2;</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">s=</code><code class=\"cpp functions bold\">sqrt</code><code class=\"cpp plain\">(p*(p-a)*(p-b)*(p-c));</code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">R= s /p;</code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(d &gt;= l)  ans = s;</code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(2*pi*R&gt;=d) ans=d*d/(4*pi);</code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">r = (l-d)/((l/R)-(2*pi));</code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">x = r*r*s/(R*R);</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">ans = s - x + pi * r * r;  </code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number118 index117 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Case %d: %.2lf\\n\"</code><code class=\"cpp plain\">,T,ans);</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp spaces\">     </code><code class=\"cpp plain\">}</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp spaces\">     </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number121 index120 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(30, '7、三维几何', '四、计算几何', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div><div class=\"line number121 index120 alt2\">121</div><div class=\"line number122 index121 alt1\">122</div><div class=\"line number123 index122 alt2\">123</div><div class=\"line number124 index123 alt1\">124</div><div class=\"line number125 index124 alt2\">125</div><div class=\"line number126 index125 alt1\">126</div><div class=\"line number127 index126 alt2\">127</div><div class=\"line number128 index127 alt1\">128</div><div class=\"line number129 index128 alt2\">129</div><div class=\"line number130 index129 alt1\">130</div><div class=\"line number131 index130 alt2\">131</div><div class=\"line number132 index131 alt1\">132</div><div class=\"line number133 index132 alt2\">133</div><div class=\"line number134 index133 alt1\">134</div><div class=\"line number135 index134 alt2\">135</div><div class=\"line number136 index135 alt1\">136</div><div class=\"line number137 index136 alt2\">137</div><div class=\"line number138 index137 alt1\">138</div><div class=\"line number139 index138 alt2\">139</div><div class=\"line number140 index139 alt1\">140</div><div class=\"line number141 index140 alt2\">141</div><div class=\"line number142 index141 alt1\">142</div><div class=\"line number143 index142 alt2\">143</div><div class=\"line number144 index143 alt1\">144</div><div class=\"line number145 index144 alt2\">145</div><div class=\"line number146 index145 alt1\">146</div><div class=\"line number147 index146 alt2\">147</div><div class=\"line number148 index147 alt1\">148</div><div class=\"line number149 index148 alt2\">149</div><div class=\"line number150 index149 alt1\">150</div><div class=\"line number151 index150 alt2\">151</div><div class=\"line number152 index151 alt1\">152</div><div class=\"line number153 index152 alt2\">153</div><div class=\"line number154 index153 alt1\">154</div><div class=\"line number155 index154 alt2\">155</div><div class=\"line number156 index155 alt1\">156</div><div class=\"line number157 index156 alt2\">157</div><div class=\"line number158 index157 alt1\">158</div><div class=\"line number159 index158 alt2\">159</div><div class=\"line number160 index159 alt1\">160</div><div class=\"line number161 index160 alt2\">161</div><div class=\"line number162 index161 alt1\">162</div><div class=\"line number163 index162 alt2\">163</div><div class=\"line number164 index163 alt1\">164</div><div class=\"line number165 index164 alt2\">165</div><div class=\"line number166 index165 alt1\">166</div><div class=\"line number167 index166 alt2\">167</div><div class=\"line number168 index167 alt1\">168</div><div class=\"line number169 index168 alt2\">169</div><div class=\"line number170 index169 alt1\">170</div><div class=\"line number171 index170 alt2\">171</div><div class=\"line number172 index171 alt1\">172</div><div class=\"line number173 index172 alt2\">173</div><div class=\"line number174 index173 alt1\">174</div><div class=\"line number175 index174 alt2\">175</div><div class=\"line number176 index175 alt1\">176</div><div class=\"line number177 index176 alt2\">177</div><div class=\"line number178 index177 alt1\">178</div><div class=\"line number179 index178 alt2\">179</div><div class=\"line number180 index179 alt1\">180</div><div class=\"line number181 index180 alt2\">181</div><div class=\"line number182 index181 alt1\">182</div><div class=\"line number183 index182 alt2\">183</div><div class=\"line number184 index183 alt1\">184</div><div class=\"line number185 index184 alt2\">185</div><div class=\"line number186 index185 alt1\">186</div><div class=\"line number187 index186 alt2\">187</div><div class=\"line number188 index187 alt1\">188</div><div class=\"line number189 index188 alt2\">189</div><div class=\"line number190 index189 alt1\">190</div><div class=\"line number191 index190 alt2\">191</div><div class=\"line number192 index191 alt1\">192</div><div class=\"line number193 index192 alt2\">193</div><div class=\"line number194 index193 alt1\">194</div><div class=\"line number195 index194 alt2\">195</div><div class=\"line number196 index195 alt1\">196</div><div class=\"line number197 index196 alt2\">197</div><div class=\"line number198 index197 alt1\">198</div><div class=\"line number199 index198 alt2\">199</div><div class=\"line number200 index199 alt1\">200</div><div class=\"line number201 index200 alt2\">201</div><div class=\"line number202 index201 alt1\">202</div><div class=\"line number203 index202 alt2\">203</div><div class=\"line number204 index203 alt1\">204</div><div class=\"line number205 index204 alt2\">205</div><div class=\"line number206 index205 alt1\">206</div><div class=\"line number207 index206 alt2\">207</div><div class=\"line number208 index207 alt1\">208</div><div class=\"line number209 index208 alt2\">209</div><div class=\"line number210 index209 alt1\">210</div><div class=\"line number211 index210 alt2\">211</div><div class=\"line number212 index211 alt1\">212</div><div class=\"line number213 index212 alt2\">213</div><div class=\"line number214 index213 alt1\">214</div><div class=\"line number215 index214 alt2\">215</div><div class=\"line number216 index215 alt1\">216</div><div class=\"line number217 index216 alt2\">217</div><div class=\"line number218 index217 alt1\">218</div><div class=\"line number219 index218 alt2\">219</div><div class=\"line number220 index219 alt1\">220</div><div class=\"line number221 index220 alt2\">221</div><div class=\"line number222 index221 alt1\">222</div><div class=\"line number223 index222 alt2\">223</div><div class=\"line number224 index223 alt1\">224</div><div class=\"line number225 index224 alt2\">225</div><div class=\"line number226 index225 alt1\">226</div><div class=\"line number227 index226 alt2\">227</div><div class=\"line number228 index227 alt1\">228</div><div class=\"line number229 index228 alt2\">229</div><div class=\"line number230 index229 alt1\">230</div><div class=\"line number231 index230 alt2\">231</div><div class=\"line number232 index231 alt1\">232</div><div class=\"line number233 index232 alt2\">233</div><div class=\"line number234 index233 alt1\">234</div><div class=\"line number235 index234 alt2\">235</div><div class=\"line number236 index235 alt1\">236</div><div class=\"line number237 index236 alt2\">237</div><div class=\"line number238 index237 alt1\">238</div><div class=\"line number239 index238 alt2\">239</div><div class=\"line number240 index239 alt1\">240</div><div class=\"line number241 index240 alt2\">241</div><div class=\"line number242 index241 alt1\">242</div><div class=\"line number243 index242 alt2\">243</div><div class=\"line number244 index243 alt1\">244</div><div class=\"line number245 index244 alt2\">245</div><div class=\"line number246 index245 alt1\">246</div><div class=\"line number247 index246 alt2\">247</div><div class=\"line number248 index247 alt1\">248</div><div class=\"line number249 index248 alt2\">249</div><div class=\"line number250 index249 alt1\">250</div><div class=\"line number251 index250 alt2\">251</div><div class=\"line number252 index251 alt1\">252</div><div class=\"line number253 index252 alt2\">253</div><div class=\"line number254 index253 alt1\">254</div><div class=\"line number255 index254 alt2\">255</div><div class=\"line number256 index255 alt1\">256</div><div class=\"line number257 index256 alt2\">257</div><div class=\"line number258 index257 alt1\">258</div><div class=\"line number259 index258 alt2\">259</div><div class=\"line number260 index259 alt1\">260</div><div class=\"line number261 index260 alt2\">261</div><div class=\"line number262 index261 alt1\">262</div><div class=\"line number263 index262 alt2\">263</div><div class=\"line number264 index263 alt1\">264</div><div class=\"line number265 index264 alt2\">265</div><div class=\"line number266 index265 alt1\">266</div><div class=\"line number267 index266 alt2\">267</div><div class=\"line number268 index267 alt1\">268</div><div class=\"line number269 index268 alt2\">269</div><div class=\"line number270 index269 alt1\">270</div><div class=\"line number271 index270 alt2\">271</div><div class=\"line number272 index271 alt1\">272</div><div class=\"line number273 index272 alt2\">273</div><div class=\"line number274 index273 alt1\">274</div><div class=\"line number275 index274 alt2\">275</div><div class=\"line number276 index275 alt1\">276</div><div class=\"line number277 index276 alt2\">277</div><div class=\"line number278 index277 alt1\">278</div><div class=\"line number279 index278 alt2\">279</div><div class=\"line number280 index279 alt1\">280</div><div class=\"line number281 index280 alt2\">281</div><div class=\"line number282 index281 alt1\">282</div><div class=\"line number283 index282 alt2\">283</div><div class=\"line number284 index283 alt1\">284</div><div class=\"line number285 index284 alt2\">285</div><div class=\"line number286 index285 alt1\">286</div><div class=\"line number287 index286 alt2\">287</div><div class=\"line number288 index287 alt1\">288</div><div class=\"line number289 index288 alt2\">289</div><div class=\"line number290 index289 alt1\">290</div><div class=\"line number291 index290 alt2\">291</div><div class=\"line number292 index291 alt1\">292</div><div class=\"line number293 index292 alt2\">293</div><div class=\"line number294 index293 alt1\">294</div><div class=\"line number295 index294 alt2\">295</div><div class=\"line number296 index295 alt1\">296</div><div class=\"line number297 index296 alt2\">297</div><div class=\"line number298 index297 alt1\">298</div><div class=\"line number299 index298 alt2\">299</div><div class=\"line number300 index299 alt1\">300</div><div class=\"line number301 index300 alt2\">301</div><div class=\"line number302 index301 alt1\">302</div><div class=\"line number303 index302 alt2\">303</div><div class=\"line number304 index303 alt1\">304</div><div class=\"line number305 index304 alt2\">305</div><div class=\"line number306 index305 alt1\">306</div><div class=\"line number307 index306 alt2\">307</div><div class=\"line number308 index307 alt1\">308</div><div class=\"line number309 index308 alt2\">309</div><div class=\"line number310 index309 alt1\">310</div><div class=\"line number311 index310 alt2\">311</div><div class=\"line number312 index311 alt1\">312</div><div class=\"line number313 index312 alt2\">313</div><div class=\"line number314 index313 alt1\">314</div><div class=\"line number315 index314 alt2\">315</div><div class=\"line number316 index315 alt1\">316</div><div class=\"line number317 index316 alt2\">317</div><div class=\"line number318 index317 alt1\">318</div><div class=\"line number319 index318 alt2\">319</div><div class=\"line number320 index319 alt1\">320</div><div class=\"line number321 index320 alt2\">321</div><div class=\"line number322 index321 alt1\">322</div><div class=\"line number323 index322 alt2\">323</div><div class=\"line number324 index323 alt1\">324</div><div class=\"line number325 index324 alt2\">325</div><div class=\"line number326 index325 alt1\">326</div><div class=\"line number327 index326 alt2\">327</div><div class=\"line number328 index327 alt1\">328</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">//三维几何函数库</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#define eps 1e-8</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#define zero(x) (((x)&gt;0?(x):-(x))&lt;eps)</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">point3{</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,y,z;};</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">line3{point3 a,b;};</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">plane3{point3 a,b,c;};</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">//计算cross product U x V</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">point3 xmult(point3 u,point3 v){</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point3 ret;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.x=u.y*v.z-v.y*u.z;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.y=u.z*v.x-u.x*v.z;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.z=u.x*v.y-u.y*v.x;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp comments\">//计算dot product U . V</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">dmult(point3 u,point3 v){</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">u.x*v.x+u.y*v.y+u.z*v.z;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp comments\">//矢量差 U - V</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">point3 subt(point3 u,point3 v){</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point3 ret;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.x=u.x-v.x;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.y=u.y-v.y;</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.z=u.z-v.z;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number31 index30 alt2\"> </div><div class=\"line number32 index31 alt1\"><code class=\"cpp comments\">//取平面法向量</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp plain\">point3 pvec(plane3 s){</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">xmult(subt(s.a,s.b),subt(s.b,s.c));</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp plain\">point3 pvec(point3 s1,point3 s2,point3 s3){</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">xmult(subt(s1,s2),subt(s2,s3));</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp comments\">//两点距离,单参数取向量大小</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">distance(point3 p1,point3 p2){</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">sqrt</code><code class=\"cpp plain\">((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y)+(p1.z-p2.z)*(p1.z-p2.z));</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number44 index43 alt1\"> </div><div class=\"line number45 index44 alt2\"><code class=\"cpp comments\">//向量大小</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">vlen(point3 p){</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">sqrt</code><code class=\"cpp plain\">(p.x*p.x+p.y*p.y+p.z*p.z);</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number49 index48 alt2\"> </div><div class=\"line number50 index49 alt1\"><code class=\"cpp comments\">//判三点共线</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dots_inline(point3 p1,point3 p2,point3 p3){</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">vlen(xmult(subt(p1,p2),subt(p2,p3)))&lt;eps;</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number54 index53 alt1\"> </div><div class=\"line number55 index54 alt2\"><code class=\"cpp comments\">//判四点共面</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dots_onplane(point3 a,point3 b,point3 c,point3 d){</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(dmult(pvec(a,b,c),subt(d,a)));</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number59 index58 alt2\"> </div><div class=\"line number60 index59 alt1\"><code class=\"cpp comments\">//判点是否在线段上,包括端点和共线</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_online_in(point3 p,line3 l){</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(vlen(xmult(subt(p,l.a),subt(p,l.b))))&amp;&amp;(l.a.x-p.x)*(l.b.x-p.x)&lt;eps&amp;&amp;</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">(l.a.y-p.y)*(l.b.y-p.y)&lt;eps&amp;&amp;(l.a.z-p.z)*(l.b.z-p.z)&lt;eps;</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_online_in(point3 p,point3 l1,point3 l2){</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(vlen(xmult(subt(p,l1),subt(p,l2))))&amp;&amp;(l1.x-p.x)*(l2.x-p.x)&lt;eps&amp;&amp;</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">(l1.y-p.y)*(l2.y-p.y)&lt;eps&amp;&amp;(l1.z-p.z)*(l2.z-p.z)&lt;eps;</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number69 index68 alt2\"> </div><div class=\"line number70 index69 alt1\"><code class=\"cpp comments\">//判点是否在线段上,不包括端点</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_online_ex(point3 p,line3 l){</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dot_online_in(p,l)&amp;&amp;(!zero(p.x-l.a.x)||!zero(p.y-l.a.y)||!zero(p.z-l.a.z))&amp;&amp;</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">(!zero(p.x-l.b.x)||!zero(p.y-l.b.y)||!zero(p.z-l.b.z));</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_online_ex(point3 p,point3 l1,point3 l2){</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dot_online_in(p,l1,l2)&amp;&amp;(!zero(p.x-l1.x)||!zero(p.y-l1.y)||!zero(p.z-l1.z))&amp;&amp;</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">(!zero(p.x-l2.x)||!zero(p.y-l2.y)||!zero(p.z-l2.z));</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number79 index78 alt2\"> </div><div class=\"line number80 index79 alt1\"><code class=\"cpp comments\">//判点是否在空间三角形上,包括边界,三点共线无意义</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_inplane_in(point3 p,plane3 s){</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(vlen(xmult(subt(s.a,s.b),subt(s.a,s.c)))-vlen(xmult(subt(p,s.a),subt(p,s.b)))-</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">vlen(xmult(subt(p,s.b),subt(p,s.c)))-vlen(xmult(subt(p,s.c),subt(p,s.a))));</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_inplane_in(point3 p,point3 s1,point3 s2,point3 s3){</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(vlen(xmult(subt(s1,s2),subt(s1,s3)))-vlen(xmult(subt(p,s1),subt(p,s2)))-</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">vlen(xmult(subt(p,s2),subt(p,s3)))-vlen(xmult(subt(p,s3),subt(p,s1))));</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number89 index88 alt2\"> </div><div class=\"line number90 index89 alt1\"><code class=\"cpp comments\">//判点是否在空间三角形上,不包括边界,三点共线无意义</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_inplane_ex(point3 p,plane3 s){</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dot_inplane_in(p,s)&amp;&amp;vlen(xmult(subt(p,s.a),subt(p,s.b)))&gt;eps&amp;&amp;</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">vlen(xmult(subt(p,s.b),subt(p,s.c)))&gt;eps&amp;&amp;vlen(xmult(subt(p,s.c),subt(p,s.a)))&gt;eps;</code></div><div class=\"line number94 index93 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dot_inplane_ex(point3 p,point3 s1,point3 s2,point3 s3){</code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dot_inplane_in(p,s1,s2,s3)&amp;&amp;vlen(xmult(subt(p,s1),subt(p,s2)))&gt;eps&amp;&amp;</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">vlen(xmult(subt(p,s2),subt(p,s3)))&gt;eps&amp;&amp;vlen(xmult(subt(p,s3),subt(p,s1)))&gt;eps;</code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number99 index98 alt2\"> </div><div class=\"line number100 index99 alt1\"><code class=\"cpp comments\">//判两点在线段同侧,点在线段上返回0,不共面无意义</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">same_side(point3 p1,point3 p2,line3 l){</code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dmult(xmult(subt(l.a,l.b),subt(p1,l.b)),xmult(subt(l.a,l.b),subt(p2,l.b)))&gt;eps;</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">same_side(point3 p1,point3 p2,point3 l1,point3 l2){</code></div><div class=\"line number105 index104 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dmult(xmult(subt(l1,l2),subt(p1,l2)),xmult(subt(l1,l2),subt(p2,l2)))&gt;eps;</code></div><div class=\"line number106 index105 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number107 index106 alt2\"> </div><div class=\"line number108 index107 alt1\"><code class=\"cpp comments\">//判两点在线段异侧,点在线段上返回0,不共面无意义</code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">opposite_side(point3 p1,point3 p2,line3 l){</code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dmult(xmult(subt(l.a,l.b),subt(p1,l.b)),xmult(subt(l.a,l.b),subt(p2,l.b)))&lt;-eps;</code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">opposite_side(point3 p1,point3 p2,point3 l1,point3 l2){</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dmult(xmult(subt(l1,l2),subt(p1,l2)),xmult(subt(l1,l2),subt(p2,l2)))&lt;-eps;</code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number115 index114 alt2\"> </div><div class=\"line number116 index115 alt1\"><code class=\"cpp comments\">//判两点在平面同侧,点在平面上返回0</code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">same_side(point3 p1,point3 p2,plane3 s){</code></div><div class=\"line number118 index117 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dmult(pvec(s),subt(p1,s.a))*dmult(pvec(s),subt(p2,s.a))&gt;eps;</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">same_side(point3 p1,point3 p2,point3 s1,point3 s2,point3 s3){</code></div><div class=\"line number121 index120 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dmult(pvec(s1,s2,s3),subt(p1,s1))*dmult(pvec(s1,s2,s3),subt(p2,s1))&gt;eps;</code></div><div class=\"line number122 index121 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number123 index122 alt2\"> </div><div class=\"line number124 index123 alt1\"><code class=\"cpp comments\">//判两点在平面异侧,点在平面上返回0</code></div><div class=\"line number125 index124 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">opposite_side(point3 p1,point3 p2,plane3 s){</code></div><div class=\"line number126 index125 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dmult(pvec(s),subt(p1,s.a))*dmult(pvec(s),subt(p2,s.a))&lt;-eps;</code></div><div class=\"line number127 index126 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number128 index127 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">opposite_side(point3 p1,point3 p2,point3 s1,point3 s2,point3 s3){</code></div><div class=\"line number129 index128 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dmult(pvec(s1,s2,s3),subt(p1,s1))*dmult(pvec(s1,s2,s3),subt(p2,s1))&lt;-eps;</code></div><div class=\"line number130 index129 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number131 index130 alt2\"> </div><div class=\"line number132 index131 alt1\"><code class=\"cpp comments\">//判两直线平行</code></div><div class=\"line number133 index132 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">parallel(line3 u,line3 v){</code></div><div class=\"line number134 index133 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">vlen(xmult(subt(u.a,u.b),subt(v.a,v.b)))&lt;eps;</code></div><div class=\"line number135 index134 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number136 index135 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">parallel(point3 u1,point3 u2,point3 v1,point3 v2){</code></div><div class=\"line number137 index136 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">vlen(xmult(subt(u1,u2),subt(v1,v2)))&lt;eps;</code></div><div class=\"line number138 index137 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number139 index138 alt2\"> </div><div class=\"line number140 index139 alt1\"><code class=\"cpp comments\">//判两平面平行</code></div><div class=\"line number141 index140 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">parallel(plane3 u,plane3 v){</code></div><div class=\"line number142 index141 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">vlen(xmult(pvec(u),pvec(v)))&lt;eps;</code></div><div class=\"line number143 index142 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number144 index143 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">parallel(point3 u1,point3 u2,point3 u3,point3 v1,point3 v2,point3 v3){</code></div><div class=\"line number145 index144 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">vlen(xmult(pvec(u1,u2,u3),pvec(v1,v2,v3)))&lt;eps;</code></div><div class=\"line number146 index145 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number147 index146 alt2\"> </div><div class=\"line number148 index147 alt1\"><code class=\"cpp comments\">//判直线与平面平行</code></div><div class=\"line number149 index148 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">parallel(line3 l,plane3 s){</code></div><div class=\"line number150 index149 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(dmult(subt(l.a,l.b),pvec(s)));</code></div><div class=\"line number151 index150 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number152 index151 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">parallel(point3 l1,point3 l2,point3 s1,point3 s2,point3 s3){</code></div><div class=\"line number153 index152 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(dmult(subt(l1,l2),pvec(s1,s2,s3)));</code></div><div class=\"line number154 index153 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number155 index154 alt2\"> </div><div class=\"line number156 index155 alt1\"><code class=\"cpp comments\">//判两直线垂直</code></div><div class=\"line number157 index156 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">perpendicular(line3 u,line3 v){</code></div><div class=\"line number158 index157 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(dmult(subt(u.a,u.b),subt(v.a,v.b)));</code></div><div class=\"line number159 index158 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number160 index159 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">perpendicular(point3 u1,point3 u2,point3 v1,point3 v2){</code></div><div class=\"line number161 index160 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(dmult(subt(u1,u2),subt(v1,v2)));</code></div><div class=\"line number162 index161 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number163 index162 alt2\"> </div><div class=\"line number164 index163 alt1\"><code class=\"cpp comments\">//判两平面垂直</code></div><div class=\"line number165 index164 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">perpendicular(plane3 u,plane3 v){</code></div><div class=\"line number166 index165 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(dmult(pvec(u),pvec(v)));</code></div><div class=\"line number167 index166 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number168 index167 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">perpendicular(point3 u1,point3 u2,point3 u3,point3 v1,point3 v2,point3 v3){</code></div><div class=\"line number169 index168 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">zero(dmult(pvec(u1,u2,u3),pvec(v1,v2,v3)));</code></div><div class=\"line number170 index169 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number171 index170 alt2\"> </div><div class=\"line number172 index171 alt1\"><code class=\"cpp comments\">//判直线与平面平行</code></div><div class=\"line number173 index172 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">perpendicular(line3 l,plane3 s){</code></div><div class=\"line number174 index173 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">vlen(xmult(subt(l.a,l.b),pvec(s)))&lt;eps;</code></div><div class=\"line number175 index174 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number176 index175 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">perpendicular(point3 l1,point3 l2,point3 s1,point3 s2,point3 s3){</code></div><div class=\"line number177 index176 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">vlen(xmult(subt(l1,l2),pvec(s1,s2,s3)))&lt;eps;</code></div><div class=\"line number178 index177 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number179 index178 alt2\"> </div><div class=\"line number180 index179 alt1\"><code class=\"cpp comments\">//判两线段相交,包括端点和部分重合</code></div><div class=\"line number181 index180 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">intersect_in(line3 u,line3 v){</code></div><div class=\"line number182 index181 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!dots_onplane(u.a,u.b,v.a,v.b))</code></div><div class=\"line number183 index182 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number184 index183 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!dots_inline(u.a,u.b,v.a)||!dots_inline(u.a,u.b,v.b))</code></div><div class=\"line number185 index184 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">!same_side(u.a,u.b,v)&amp;&amp;!same_side(v.a,v.b,u);</code></div><div class=\"line number186 index185 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dot_online_in(u.a,v)||dot_online_in(u.b,v)||dot_online_in(v.a,u)||dot_online_in(v.b,u);</code></div><div class=\"line number187 index186 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number188 index187 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">intersect_in(point3 u1,point3 u2,point3 v1,point3 v2){</code></div><div class=\"line number189 index188 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!dots_onplane(u1,u2,v1,v2))</code></div><div class=\"line number190 index189 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number191 index190 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!dots_inline(u1,u2,v1)||!dots_inline(u1,u2,v2))</code></div><div class=\"line number192 index191 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">!same_side(u1,u2,v1,v2)&amp;&amp;!same_side(v1,v2,u1,u2);</code></div><div class=\"line number193 index192 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dot_online_in(u1,v1,v2)||dot_online_in(u2,v1,v2)||dot_online_in(v1,u1,u2)||dot_online_in(v2,u1,u2);</code></div><div class=\"line number194 index193 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number195 index194 alt2\"> </div><div class=\"line number196 index195 alt1\"><code class=\"cpp comments\">//判两线段相交,不包括端点和部分重合</code></div><div class=\"line number197 index196 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">intersect_ex(line3 u,line3 v){</code></div><div class=\"line number198 index197 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dots_onplane(u.a,u.b,v.a,v.b)&amp;&amp;opposite_side(u.a,u.b,v)&amp;&amp;opposite_side(v.a,v.b,u);</code></div><div class=\"line number199 index198 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number200 index199 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">intersect_ex(point3 u1,point3 u2,point3 v1,point3 v2){</code></div><div class=\"line number201 index200 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dots_onplane(u1,u2,v1,v2)&amp;&amp;opposite_side(u1,u2,v1,v2)&amp;&amp;opposite_side(v1,v2,u1,u2);</code></div><div class=\"line number202 index201 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number203 index202 alt2\"> </div><div class=\"line number204 index203 alt1\"><code class=\"cpp comments\">//判线段与空间三角形相交,包括交于边界和(部分)包含</code></div><div class=\"line number205 index204 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">intersect_in(line3 l,plane3 s){</code></div><div class=\"line number206 index205 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">!same_side(l.a,l.b,s)&amp;&amp;!same_side(s.a,s.b,l.a,l.b,s.c)&amp;&amp;</code></div><div class=\"line number207 index206 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">!same_side(s.b,s.c,l.a,l.b,s.a)&amp;&amp;!same_side(s.c,s.a,l.a,l.b,s.b);</code></div><div class=\"line number208 index207 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number209 index208 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">intersect_in(point3 l1,point3 l2,point3 s1,point3 s2,point3 s3){</code></div><div class=\"line number210 index209 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">!same_side(l1,l2,s1,s2,s3)&amp;&amp;!same_side(s1,s2,l1,l2,s3)&amp;&amp;</code></div><div class=\"line number211 index210 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">!same_side(s2,s3,l1,l2,s1)&amp;&amp;!same_side(s3,s1,l1,l2,s2);</code></div><div class=\"line number212 index211 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number213 index212 alt2\"> </div><div class=\"line number214 index213 alt1\"><code class=\"cpp comments\">//判线段与空间三角形相交,不包括交于边界和(部分)包含</code></div><div class=\"line number215 index214 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">intersect_ex(line3 l,plane3 s){</code></div><div class=\"line number216 index215 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">opposite_side(l.a,l.b,s)&amp;&amp;opposite_side(s.a,s.b,l.a,l.b,s.c)&amp;&amp;</code></div><div class=\"line number217 index216 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">opposite_side(s.b,s.c,l.a,l.b,s.a)&amp;&amp;opposite_side(s.c,s.a,l.a,l.b,s.b);</code></div><div class=\"line number218 index217 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number219 index218 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">intersect_ex(point3 l1,point3 l2,point3 s1,point3 s2,point3 s3){</code></div><div class=\"line number220 index219 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">opposite_side(l1,l2,s1,s2,s3)&amp;&amp;opposite_side(s1,s2,l1,l2,s3)&amp;&amp;</code></div><div class=\"line number221 index220 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">opposite_side(s2,s3,l1,l2,s1)&amp;&amp;opposite_side(s3,s1,l1,l2,s2);</code></div><div class=\"line number222 index221 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number223 index222 alt2\"> </div><div class=\"line number224 index223 alt1\"><code class=\"cpp comments\">//计算两直线交点,注意事先判断直线是否共面和平行!</code></div><div class=\"line number225 index224 alt2\"><code class=\"cpp comments\">//线段交点请另外判线段相交(同时还是要判断是否平行!)</code></div><div class=\"line number226 index225 alt1\"><code class=\"cpp plain\">point3 intersection(line3 u,line3 v){</code></div><div class=\"line number227 index226 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point3 ret=u.a;</code></div><div class=\"line number228 index227 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">t=((u.a.x-v.a.x)*(v.a.y-v.b.y)-(u.a.y-v.a.y)*(v.a.x-v.b.x))</code></div><div class=\"line number229 index228 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">/((u.a.x-u.b.x)*(v.a.y-v.b.y)-(u.a.y-u.b.y)*(v.a.x-v.b.x));</code></div><div class=\"line number230 index229 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.x+=(u.b.x-u.a.x)*t;</code></div><div class=\"line number231 index230 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.y+=(u.b.y-u.a.y)*t;</code></div><div class=\"line number232 index231 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.z+=(u.b.z-u.a.z)*t;</code></div><div class=\"line number233 index232 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number234 index233 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number235 index234 alt2\"><code class=\"cpp plain\">point3 intersection(point3 u1,point3 u2,point3 v1,point3 v2){</code></div><div class=\"line number236 index235 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point3 ret=u1;</code></div><div class=\"line number237 index236 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">t=((u1.x-v1.x)*(v1.y-v2.y)-(u1.y-v1.y)*(v1.x-v2.x))</code></div><div class=\"line number238 index237 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">/((u1.x-u2.x)*(v1.y-v2.y)-(u1.y-u2.y)*(v1.x-v2.x));</code></div><div class=\"line number239 index238 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.x+=(u2.x-u1.x)*t;</code></div><div class=\"line number240 index239 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.y+=(u2.y-u1.y)*t;</code></div><div class=\"line number241 index240 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.z+=(u2.z-u1.z)*t;</code></div><div class=\"line number242 index241 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number243 index242 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number244 index243 alt1\"> </div><div class=\"line number245 index244 alt2\"><code class=\"cpp comments\">//计算直线与平面交点,注意事先判断是否平行,并保证三点不共线!</code></div><div class=\"line number246 index245 alt1\"><code class=\"cpp comments\">//线段和空间三角形交点请另外判断</code></div><div class=\"line number247 index246 alt2\"><code class=\"cpp plain\">point3 intersection(line3 l,plane3 s){</code></div><div class=\"line number248 index247 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point3 ret=pvec(s);</code></div><div class=\"line number249 index248 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">t=(ret.x*(s.a.x-l.a.x)+ret.y*(s.a.y-l.a.y)+ret.z*(s.a.z-l.a.z))/</code></div><div class=\"line number250 index249 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">(ret.x*(l.b.x-l.a.x)+ret.y*(l.b.y-l.a.y)+ret.z*(l.b.z-l.a.z));</code></div><div class=\"line number251 index250 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.x=l.a.x+(l.b.x-l.a.x)*t;</code></div><div class=\"line number252 index251 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.y=l.a.y+(l.b.y-l.a.y)*t;</code></div><div class=\"line number253 index252 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.z=l.a.z+(l.b.z-l.a.z)*t;</code></div><div class=\"line number254 index253 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number255 index254 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number256 index255 alt1\"><code class=\"cpp plain\">point3 intersection(point3 l1,point3 l2,point3 s1,point3 s2,point3 s3){</code></div><div class=\"line number257 index256 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point3 ret=pvec(s1,s2,s3);</code></div><div class=\"line number258 index257 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">t=(ret.x*(s1.x-l1.x)+ret.y*(s1.y-l1.y)+ret.z*(s1.z-l1.z))/</code></div><div class=\"line number259 index258 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">(ret.x*(l2.x-l1.x)+ret.y*(l2.y-l1.y)+ret.z*(l2.z-l1.z));</code></div><div class=\"line number260 index259 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.x=l1.x+(l2.x-l1.x)*t;</code></div><div class=\"line number261 index260 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.y=l1.y+(l2.y-l1.y)*t;</code></div><div class=\"line number262 index261 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.z=l1.z+(l2.z-l1.z)*t;</code></div><div class=\"line number263 index262 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number264 index263 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number265 index264 alt2\"> </div><div class=\"line number266 index265 alt1\"><code class=\"cpp comments\">//计算两平面交线,注意事先判断是否平行,并保证三点不共线!</code></div><div class=\"line number267 index266 alt2\"><code class=\"cpp plain\">line3 intersection(plane3 u,plane3 v){</code></div><div class=\"line number268 index267 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">line3 ret;</code></div><div class=\"line number269 index268 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.a=parallel(v.a,v.b,u.a,u.b,u.c)?intersection(v.b,v.c,u.a,u.b,u.c):intersection(v.a,v.b,u.a,u.b,u.c);</code></div><div class=\"line number270 index269 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.b=parallel(v.c,v.a,u.a,u.b,u.c)?intersection(v.b,v.c,u.a,u.b,u.c):intersection(v.c,v.a,u.a,u.b,u.c);</code></div><div class=\"line number271 index270 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number272 index271 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number273 index272 alt2\"><code class=\"cpp plain\">line3 intersection(point3 u1,point3 u2,point3 u3,point3 v1,point3 v2,point3 v3){</code></div><div class=\"line number274 index273 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">line3 ret;</code></div><div class=\"line number275 index274 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.a=parallel(v1,v2,u1,u2,u3)?intersection(v2,v3,u1,u2,u3):intersection(v1,v2,u1,u2,u3);</code></div><div class=\"line number276 index275 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret.b=parallel(v3,v1,u1,u2,u3)?intersection(v2,v3,u1,u2,u3):intersection(v3,v1,u1,u2,u3);</code></div><div class=\"line number277 index276 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number278 index277 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number279 index278 alt2\"> </div><div class=\"line number280 index279 alt1\"><code class=\"cpp comments\">//点到直线距离</code></div><div class=\"line number281 index280 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ptoline(point3 p,line3 l){</code></div><div class=\"line number282 index281 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">vlen(xmult(subt(p,l.a),subt(l.b,l.a)))/distance(l.a,l.b);</code></div><div class=\"line number283 index282 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number284 index283 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ptoline(point3 p,point3 l1,point3 l2){</code></div><div class=\"line number285 index284 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">vlen(xmult(subt(p,l1),subt(l2,l1)))/distance(l1,l2);</code></div><div class=\"line number286 index285 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number287 index286 alt2\"> </div><div class=\"line number288 index287 alt1\"><code class=\"cpp comments\">//点到平面距离</code></div><div class=\"line number289 index288 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ptoplane(point3 p,plane3 s){</code></div><div class=\"line number290 index289 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(dmult(pvec(s),subt(p,s.a)))/vlen(pvec(s));</code></div><div class=\"line number291 index290 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number292 index291 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ptoplane(point3 p,point3 s1,point3 s2,point3 s3){</code></div><div class=\"line number293 index292 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(dmult(pvec(s1,s2,s3),subt(p,s1)))/vlen(pvec(s1,s2,s3));</code></div><div class=\"line number294 index293 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number295 index294 alt2\"> </div><div class=\"line number296 index295 alt1\"><code class=\"cpp comments\">//直线到直线距离</code></div><div class=\"line number297 index296 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">linetoline(line3 u,line3 v){</code></div><div class=\"line number298 index297 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point3 n=xmult(subt(u.a,u.b),subt(v.a,v.b));</code></div><div class=\"line number299 index298 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(dmult(subt(u.a,v.a),n))/vlen(n);</code></div><div class=\"line number300 index299 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number301 index300 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">linetoline(point3 u1,point3 u2,point3 v1,point3 v2){</code></div><div class=\"line number302 index301 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">point3 n=xmult(subt(u1,u2),subt(v1,v2));</code></div><div class=\"line number303 index302 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(dmult(subt(u1,v1),n))/vlen(n);</code></div><div class=\"line number304 index303 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number305 index304 alt2\"> </div><div class=\"line number306 index305 alt1\"><code class=\"cpp comments\">//两直线夹角cos值</code></div><div class=\"line number307 index306 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">angle_cos(line3 u,line3 v){</code></div><div class=\"line number308 index307 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dmult(subt(u.a,u.b),subt(v.a,v.b))/vlen(subt(u.a,u.b))/vlen(subt(v.a,v.b));</code></div><div class=\"line number309 index308 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number310 index309 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">angle_cos(point3 u1,point3 u2,point3 v1,point3 v2){</code></div><div class=\"line number311 index310 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dmult(subt(u1,u2),subt(v1,v2))/vlen(subt(u1,u2))/vlen(subt(v1,v2));</code></div><div class=\"line number312 index311 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number313 index312 alt2\"> </div><div class=\"line number314 index313 alt1\"><code class=\"cpp comments\">//两平面夹角cos值</code></div><div class=\"line number315 index314 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">angle_cos(plane3 u,plane3 v){</code></div><div class=\"line number316 index315 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dmult(pvec(u),pvec(v))/vlen(pvec(u))/vlen(pvec(v));</code></div><div class=\"line number317 index316 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number318 index317 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">angle_cos(point3 u1,point3 u2,point3 u3,point3 v1,point3 v2,point3 v3){</code></div><div class=\"line number319 index318 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dmult(pvec(u1,u2,u3),pvec(v1,v2,v3))/vlen(pvec(u1,u2,u3))/vlen(pvec(v1,v2,v3));</code></div><div class=\"line number320 index319 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number321 index320 alt2\"> </div><div class=\"line number322 index321 alt1\"><code class=\"cpp comments\">//直线平面夹角sin值</code></div><div class=\"line number323 index322 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">angle_sin(line3 l,plane3 s){</code></div><div class=\"line number324 index323 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dmult(subt(l.a,l.b),pvec(s))/vlen(subt(l.a,l.b))/vlen(pvec(s));</code></div><div class=\"line number325 index324 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number326 index325 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">angle_sin(point3 l1,point3 l2,point3 s1,point3 s2,point3 s3){</code></div><div class=\"line number327 index326 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dmult(subt(l1,l2),pvec(s1,s2,s3))/vlen(subt(l1,l2))/vlen(pvec(s1,s2,s3));</code></div><div class=\"line number328 index327 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(31, '8、凸包', '四、计算几何', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">maxn=500;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">p</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,y;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp plain\">};</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,top;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">p list[maxn];</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">s[maxn];</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">m(p p1,p p2,p p0)</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp color1 bold\">bool</code> <code class=\"cpp plain\">cmp(p p1,p p2)</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">t;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">t=m(p1,p2,list[0]); </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(t&gt;0||(t==0&amp;&amp;</code><code class=\"cpp functions bold\">pow</code><code class=\"cpp plain\">(p1.x-list[0].x,2)+</code><code class=\"cpp functions bold\">pow</code><code class=\"cpp plain\">(p1.y-list[0].y,2)&lt;</code><code class=\"cpp functions bold\">pow</code><code class=\"cpp plain\">(p2.x-list[0].x,2)+</code><code class=\"cpp functions bold\">pow</code><code class=\"cpp plain\">(p2.y-list[0].y,2)))</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">init()</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;  p t;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">cin&gt;&gt;n;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">cin&gt;&gt;list[i].x&gt;&gt;list[i].y;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((list[i].y&lt;list[0].y)||(list[i].y==list[0].y&amp;&amp;list[i].x&lt;list[0].x)) {t=list[0];list[0]=list[i]; list[i]=t;}</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">sort(list+1,list+n,cmp);</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">graham()</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">{</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;3;i++) s[i]=i;</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">top=2;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=3;i&lt;n;i++)</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">     </code><code class=\"cpp plain\">{</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">      </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(m(list[i],list[s[top]],list[s[top-1]])&gt;=0) top--;</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">      </code><code class=\"cpp plain\">s[++top]=i;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">     </code><code class=\"cpp plain\">}</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;=top;i++)</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"( %.2lf , %.2lf )\\n\"</code><code class=\"cpp plain\">,list[s[i]].x,list[s[i]].y);</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">}</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">{</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">init();</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">graham();</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">}</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp comments\">// 卷包裹法求点集凸壳    </code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">ConvexClosure(POINT PointSet[],POINT ch[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">&amp;len) </code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp plain\">{ </code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">top=0,i,index,first; </code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">curmax,curcos,curdis; </code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">POINT tmp; </code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">LINESEG l1,l2; </code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">bool</code> <code class=\"cpp plain\">use[MAXV]; </code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">tmp=PointSet[0]; </code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">index=0; </code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">// 选取y最小点，如果多于一个，则选取最左点 </code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=1;i&lt;n;i++) </code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{ </code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(PointSet[i].y&lt;tmp.y||PointSet[i].y == tmp.y&amp;&amp;PointSet[i].x&lt;tmp.x) </code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{ </code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">index=i; </code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">} </code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">use[i]=</code><code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">; </code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">tmp=PointSet[index]; </code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">first=index; </code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">use[index]=</code><code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">; </code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">index=-1; </code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ch[top++]=tmp; </code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">tmp.x-=100; </code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">l1.s=tmp; </code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">l1.e=ch[0]; </code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">l2.s=ch[0]; </code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(index!=first) </code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{ </code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">curmax=-100; </code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">curdis=0; </code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">// 选取与最后一条确定边夹角最小的点，即余弦值最大者 </code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;n;i++) </code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{ </code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(use[i])</code><code class=\"cpp keyword bold\">continue</code><code class=\"cpp plain\">; </code></div><div class=\"line number94 index93 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">l2.e=PointSet[i]; </code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">curcos=cosine(l1,l2); </code><code class=\"cpp comments\">// 根据cos值求夹角余弦，范围在 （-1 -- 1 ） </code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(curcos&gt;curmax || </code><code class=\"cpp functions bold\">fabs</code><code class=\"cpp plain\">(curcos-curmax)&lt;1e-6 &amp;&amp; dist(l2.s,l2.e)&gt;curdis) </code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{ </code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">curmax=curcos; </code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">index=i; </code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">curdis=dist(l2.s,l2.e); </code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">} </code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">            </code> </div><div class=\"line number103 index102 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">} </code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">use[first]=</code><code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;            </code><code class=\"cpp comments\">//清空第first个顶点标志，使最后能形成封闭的hull </code></div><div class=\"line number105 index104 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">use[index]=</code><code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">; </code></div><div class=\"line number106 index105 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">ch[top++]=PointSet[index]; </code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">l1.s=ch[top-2]; </code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">l1.e=ch[top-1]; </code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">l2.s=ch[top-1]; </code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len=top-1; </code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(32, '9、网格', '四、计算几何', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#define abs(x) ((x)&gt;0?(x):-(x))</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">point{</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x,y;};</code></div><div class=\"line number3 index2 alt2\"> </div><div class=\"line number4 index3 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">gcd(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b){</code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">b?gcd(b,a%b):a;}</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">//多边形上的网格点个数</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">grid_onedge(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,point* p){</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,ret=0;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">ret+=gcd(</code><code class=\"cpp functions bold\">abs</code><code class=\"cpp plain\">(p[i].x-p[(i+1)%n].x),</code><code class=\"cpp functions bold\">abs</code><code class=\"cpp plain\">(p[i].y-p[(i+1)%n].y));</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp comments\">//多边形内的网格点个数</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">grid_inside(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,point* p){</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,ret=0;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">ret+=p[(i+1)%n].y*(p[i].x-p[(i+2)%n].x);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">abs</code><code class=\"cpp plain\">(ret)-grid_onedge(n,p))/2+1;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(33, '1、排列组合生成', '五、组合数学', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 排列组合生成 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define MAXN 100</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">count;</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* 产生后调用的函数,传入a[]和n,a[0]..a[n-1]为一次产生的结果 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">dummy(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n){</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d: \"</code><code class=\"cpp plain\">,count++);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;n-1;i++)</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">,a[i]);</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \\n\"</code><code class=\"cpp plain\">,a[n-1]);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">_gen_perm(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">m,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">l,</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* temp,</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* tag){</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(l==m)</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">dummy(temp,m);</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!tag[i]){</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">temp[l]=a[i],tag[i]=1;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">_gen_perm(a,n,m,l+1,temp,tag);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">tag[i]=0;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number31 index30 alt2\"> </div><div class=\"line number32 index31 alt1\"><code class=\"cpp comments\">/* 产生字典序排列P(n,m) */</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">gen_perm(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">m){</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[MAXN],temp[MAXN],tag[MAXN]={0},i;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i]=i+1;</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">_gen_perm(a,n,m,0,temp,tag);</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">_gen_comb(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">s,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">e,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">m,</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">&amp; count,</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* temp){</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!m)</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">dummy(temp,count);</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=s;i&lt;=e-m+1;i++){</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">temp[count++]=a[i];</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">_gen_comb(a,i+1,e,m-1,count,temp);</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">count--;</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number51 index50 alt2\"> </div><div class=\"line number52 index51 alt1\"><code class=\"cpp comments\">/* 产生字典序组合C(n,m) */</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">gen_comb(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">m){</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[MAXN],temp[MAXN],count=0,i;</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i]=i+1;</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">_gen_comb(a,0,n-1,m,count,temp);</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number59 index58 alt2\"> </div><div class=\"line number60 index59 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">_gen_perm_swap(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">l,</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* pos,</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* dir){</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,p1,p2,t;</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(l==n)</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">dummy(a,n);</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code><code class=\"cpp plain\">{</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">_gen_perm_swap(a,n,l+1,pos,dir);</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;l;i++){</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">p2=(p1=pos[l])+dir[l];</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">t=a[p1],a[p1]=a[p2],a[p2]=t;</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">pos[a[p1]-1]=p1,pos[a[p2]-1]=p2;</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">_gen_perm_swap(a,n,l+1,pos,dir);</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">dir[l]=-dir[l];</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number75 index74 alt2\"> </div><div class=\"line number76 index75 alt1\"><code class=\"cpp comments\">/*gen_perm_swap产生相邻位对换全排列P(n,n)</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*产生元素用1..n表示</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">gen_perm_swap(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n){</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[MAXN],pos[MAXN],dir[MAXN],i;</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i]=i+1,pos[i]=i,dir[i]=-1;</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">_gen_perm_swap(a,n,0,pos,dir);</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number85 index84 alt2\"> </div><div class=\"line number86 index85 alt1\"> </div><div class=\"line number87 index86 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n = 5,m = 3;</code></div><div class=\"line number90 index89 alt1\"> </div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"p(5,3):\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">gen_perm(5,3);</code></div><div class=\"line number93 index92 alt2\"> </div><div class=\"line number94 index93 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">count = 0;</code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"c(5,3):\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">gen_comb(5,3);</code></div><div class=\"line number97 index96 alt2\"> </div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">count = 0;</code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"p(5,5):\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">gen_perm_swap(5);</code></div><div class=\"line number101 index100 alt2\"> </div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(34, '2、生成gray码', '五、组合数学', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 生成gray码 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* 每次调用gray取得下一个码</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 000...000是第一个码,100...000是最后一个码 */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">gray(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*code){</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">t=0,i;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;t+=code[i++]);</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(t&amp;1)</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(n--;!code[n];n--);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">code[n-1]=1-code[n-1];</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n=5,code[5],i=0;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(code,0,5*</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">));</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"5 bits gray code:\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">gray(n,code);</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;5;i++)</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,code[i]);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"> </div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(1)</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">gray(n,code);</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;5;i++)</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,code[i]);</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number37 index36 alt2\"> </div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(code[0]==1&amp;&amp;code[1]==0&amp;&amp;code[2]==0&amp;&amp;code[3]==0&amp;&amp;code[4]==0)</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number43 index42 alt2\"> </div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(35, '3、置换(polya)', '五、组合数学', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 求置换的循环节,polya原理 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define MAXN 1000</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">gcd(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b){</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">b?gcd(b,a%b):a;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp comments\">/* perm[0..n-1]为0..n-1的一个置换(排列)</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp comments\">* 返回置换最小周期,num返回循环节个数</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">polya(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* perm,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* num){</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j,p=0,v[MAXN]={0},ret=1;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(*num=i=0;i&lt;n;i++)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!v[i]){</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(*num++,j=0,p=i;!v[p=perm[p]];j++)</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">v[p]=1;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">ret*=j/gcd(ret,j);</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">perm[5]={1,2,3,4,5},num,ret;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret = polya(perm,5,&amp;num);</code></div><div class=\"line number30 index29 alt1\"> </div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"ret:%d num:%d\\n\"</code><code class=\"cpp plain\">,ret,num);</code></div><div class=\"line number32 index31 alt1\"> </div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(36, '4、字典序全排列', '五、组合数学', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 字典序全排列与序号的转换 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* 字典序全排列转到序号 */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">perm2num(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*p){</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j,ret=0,k=1;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=n-2;i&gt;=0;k*=n-(i--))</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=i+1;j&lt;n;j++)</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(p[j]&lt;p[i])</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">ret+=k;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp comments\">/* 序号转到字典序全排列 */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">num2perm(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*p,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">t){</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=n-1;i&gt;=0;i--)</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p[i]=t%(n-i),t/=n-i;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=n-1;i;i--)</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=i-1;j&gt;=0;j--)</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(p[j]&lt;=p[i])</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">p[i]++;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number26 index25 alt1\"> </div><div class=\"line number27 index26 alt2\"> </div><div class=\"line number28 index27 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[5] = {1,3,2,4,5};</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b[5] = {0};</code></div><div class=\"line number32 index31 alt1\"> </div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\\n\"</code><code class=\"cpp plain\">,perm2num(5,a)+1);</code></div><div class=\"line number34 index33 alt1\"> </div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">num2perm(5,b,3);</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;5;i++)</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,b[i]);</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(37, '5、字典序组合', '五、组合数学', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 字典序组合与序号的转换 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* comb为组合数C(n,m) */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">comb(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">m){</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ret=1,i;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">m=m&lt;(n-m)?m:(n-m);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=n-m+1;i&lt;=n;ret*=(i++));</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=1;i&lt;=m;ret/=(i++));</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">m&lt;0?0:ret;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp comments\">/* 字典序组合转至序号 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">comb2num(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">m,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*c){</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ret=comb(n,m),i;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;m;i++)</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">ret-=comb(n-c[i],m-i);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp comments\">/* 序号转至字典序组合 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">num2comb(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">m,</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* c,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">t){</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j=1,k;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;m;c[i++]=j++)</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(;t&gt;(k=comb(n-j,m-i-1));t-=k,j++);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[5] = {1,3,2,4,5};</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b[5] = {0};</code></div><div class=\"line number34 index33 alt1\"> </div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\\n\"</code><code class=\"cpp plain\">,comb2num(5,2,a)+1);</code></div><div class=\"line number36 index35 alt1\"> </div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">num2comb(5,2,b,3);</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;5;i++)</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,b[i]);</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(38, '1、字符串替换', '六、字符串处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp comments\">/*</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* str[]：在此源字符串进行替换操作</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* key[]：被替换的字符串，不能为空串</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* swap[]：替换的字符串，可以为空串，为空串表示在源字符中删除key[]</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 返回值：null</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">replace(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">str[],</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">key[],</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">swap[])</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">l1,l2,l3,i,j,flag;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">tmp[1000];</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">l1=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(str);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">l2=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(key);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">l3=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(swap);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;=l1-l2;i++)</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">flag=1;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=0;j&lt;l2;j++)</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(str[i+j]!=key[j])</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">flag=0;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(flag){</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(tmp,str);</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(&amp;tmp[i],swap);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(&amp;tmp[i+l3],&amp;str[i+l2]);</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(str,tmp);</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">i+=l3-1;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">l1=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(str);</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number35 index34 alt2\"> </div><div class=\"line number36 index35 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">m;</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">str[20]=</code><code class=\"cpp string\">\"abcdfadabddfa\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">key[3]=</code><code class=\"cpp string\">\"fa\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">swap[3]=</code><code class=\"cpp string\">\"zz\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"before:%s\\n\"</code><code class=\"cpp plain\">,str);</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">replace(str,key,swap);</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"after:%s\\n\"</code><code class=\"cpp plain\">,str);</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(39, '2、字符串查找', '六、字符串处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number3 index2 alt2\"> </div><div class=\"line number4 index3 alt1\"><code class=\"cpp comments\">/*</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* str[]：在此源字符串进行查找操作</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* key[]：被查找的字符串，不能为空串</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 返回值：如果查找成功，返回key在str中第一次出现的位置，否则返回-1</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">strfind(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">str[],</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">key[])</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">l1,l2,i,j,flag;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">l1=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(str);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">l2=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(key);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;=l1-l2;i++)</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">flag=1;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=0;j&lt;l2;j++)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(str[i+j]!=key[j])</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">flag=0;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(flag)</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">-1;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number28 index27 alt1\"> </div><div class=\"line number29 index28 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">pos;</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">str[20]=</code><code class=\"cpp string\">\"abcdfadabddfa\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">key[3]=</code><code class=\"cpp string\">\"fa\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">pos = strfind(str,key);</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pos:%d\\n\"</code><code class=\"cpp plain\">,pos);</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(40, '3、字符串截取', '六、字符串处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number3 index2 alt2\"> </div><div class=\"line number4 index3 alt1\"><code class=\"cpp comments\">/*</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 字符串截取</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* str[]：操作的目标字符串</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* start：从第start个字符串开始，截取长度为len的字符</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* len：从第start个字符串开始，截取长度为len的字符</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* strback[]：截取的到的字符</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 返回值：0：超出字符串长度，截取失败；1：截取成功</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">mid(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">str[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">start,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len,</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">strback[])</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">l,i,k=0;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">l=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(str);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(start+len&gt;l)</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=start;i&lt;start+len;i++)</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">strback[k++]=str[i];</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">strback[k]=</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">start=3,len=5;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">str[20]=</code><code class=\"cpp string\">\"abcdfadabddfa\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">strback[10]=</code><code class=\"cpp string\">\"\\0\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">mid(str,start,len,strback);</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"strback:%s\\n\"</code><code class=\"cpp plain\">,strback);</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(41, '4、最大公共子串长度', '六、字符串处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number3 index2 alt2\"> </div><div class=\"line number4 index3 alt1\"><code class=\"cpp comments\">/*</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 最大公共子串长度</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* a,b[]：根据a,b生成最大公共子串</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 返回值：最大公共子串的长度</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* M、N是a,b数组的最大可能长度</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp preprocessor\">#define M 20</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp preprocessor\">#define N 20</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c[M][N];</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">lcs_len(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*b)</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">m=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(a),n=</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(b),i,j;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;=m;i++)</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">c[i][0]=0;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=0;j&lt;=n;j++)</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">c[0][j]=0;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=1;i&lt;=m;i++)</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=1;j&lt;=n;j++)</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a[i-1]==b[j-1])</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">c[i][j]=c[i-1][j-1]+1;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(c[i-1][j]&gt;c[i][j-1])</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">c[i][j]=c[i-1][j];</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">c[i][j]=c[i][j-1];</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">c[m][n];</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number32 index31 alt1\"> </div><div class=\"line number33 index32 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a[20]=</code><code class=\"cpp string\">\"abcdfadabddfa\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">b[20]=</code><code class=\"cpp string\">\"abddfa\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len=lcs_len(a,b);</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"len:%d\\n\"</code><code class=\"cpp plain\">,len);</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(42, '5、数字转换为字符', '六、字符串处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 数字转换为字符 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/*</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* k：转换的数字</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* o[]：存储转换结果的字符串</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 返回值：null</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">cstr(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">k,</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">o[])</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len,i,t;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len=</code><code class=\"cpp functions bold\">log10</code><code class=\"cpp plain\">((</code><code class=\"cpp color1 bold\">float</code><code class=\"cpp plain\">)k)+1;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=len;i&gt;0;i--)</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">t=k%10;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">k-=t;k/=10;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">o[i-1]=</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">+t;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">o[len]=</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">k=9870;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">o[20]=</code><code class=\"cpp string\">\"\\0\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">cstr(k,o);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"o:%s\\n\"</code><code class=\"cpp plain\">,o);</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(43, '6、KMP算法', '六、字符串处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* KMP算法 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number3 index2 alt2\"> </div><div class=\"line number4 index3 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">next[20];</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">get_nextval(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">T[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">next[])</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j,k;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">j=0;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">next[0] = -1;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=-1;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(T[j+1]!=</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">)</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(k==-1||T[j]==T[k])</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">++j,++k;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(T[j]!=T[k])</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">next[j]=k;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">next[j]=next[k];</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">k=next[k];</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Index_KMP(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">S[],</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">T[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">pos)</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">i=pos-1;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">j=0;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(S[i]!=</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">&amp;&amp;T[j]!=</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">)</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(j==-1||S[i]==T[j])</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">i++,j++;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">j=next[j];</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(T[j]==</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">)</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(i-j);</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number43 index42 alt2\"> </div><div class=\"line number44 index43 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">m;</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">S[20]=</code><code class=\"cpp string\">\"abcdfadabddfa\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">T[20]=</code><code class=\"cpp string\">\"fa\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">get_nextval(T,next);</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">m=Index_KMP(S,T,1);</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\\n\"</code><code class=\"cpp plain\">,m);</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(44, '1、有向图强连通分量', '七、图论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div><div class=\"line number121 index120 alt2\">121</div><div class=\"line number122 index121 alt1\">122</div><div class=\"line number123 index122 alt2\">123</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 有向图强连通分量 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">MAXINT = 2000000000;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">N = 10000;</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">M = 50000;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">head[N], set[N], post[N], head2[N];</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">no[M], next[M], no2[M], next2[M];</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp comments\">/* 可多次重复利用 */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp color1 bold\">bool</code> <code class=\"cpp plain\">vst[N];</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp comments\">/* cnt 也是这样 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n, m, cnt;</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp keyword bold\">inline</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">read(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">&amp;data) {</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">ch = </code><code class=\"cpp functions bold\">getchar</code><code class=\"cpp plain\">();</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(ch &lt; </code><code class=\"cpp string\">\'0\'</code> <code class=\"cpp plain\">|| ch &gt; </code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">ch = </code><code class=\"cpp functions bold\">getchar</code><code class=\"cpp plain\">();</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">data = 0;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">do</code><code class=\"cpp plain\">{</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">data = data*10 + ch-</code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">ch = </code><code class=\"cpp functions bold\">getchar</code><code class=\"cpp plain\">();    </code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(ch &gt;= </code><code class=\"cpp string\">\'0\'</code> <code class=\"cpp plain\">&amp;&amp; ch &lt;= </code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">);</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">init() {</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i, a, b;</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d%d\"</code><code class=\"cpp plain\">, &amp;n, &amp;m);</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(head, -1, </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(head));</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(head2, -1, </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(head2));</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i = 0; i &lt; m; i++) {</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">read(a); read(b);</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a--; b--;</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">no[i] = b;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">next[i] = head[a];</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">head[a] = i;</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp comments\">/* 有向图的DFS 要分成多步进行dfs 这里没有判连通 因为不连通一定有2个以上的极大强连通子图 */</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">DFS(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x) {</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">vst[x] = 1;</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">p = head[x];</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(; p &gt;= 0; p = next[p])</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!vst[no[p]])</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">DFS(no[p]);</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 我们只需要按照完成时间排序即可 并不需要严格按照结束时间 */</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">post[cnt] = x; </code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">cnt++;</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number51 index50 alt2\"> </div><div class=\"line number52 index51 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">reverse() {</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i, t = 0, p, j = 0;</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i = 0; i&lt;n; i++) {</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(p = head[i]; p &gt;= 0; p = next[p]) { </code><code class=\"cpp comments\">//i-&gt;no[p]</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">no2[j] = i;</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">next2[j] = head2[no[p] ];</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">head2[no[p] ] = j++;</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number62 index61 alt1\"> </div><div class=\"line number63 index62 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">DFS2(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x) {</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">vst[x] = 1;</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">set[x] = cnt;</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">p;</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(p = head2[x]; p &gt;= 0; p = next2[p]) </code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!vst[no2[p] ])</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">DFS2(no2[p]);</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number71 index70 alt2\"> </div><div class=\"line number72 index71 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">work() {</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i, j;</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(vst, 0, </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(vst));</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* cnt充当了记录时间的作用 */</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">cnt = 0; </code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i = 0; i&lt;n; i++) </code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!vst[i])</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">DFS(i);</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">reverse();</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(vst, 0, </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(vst));</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">cnt = 0;</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i = n-1; i&gt;=0; i--)</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!vst[post[i]]) { </code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">DFS2(post[i]);</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 此处作为scc的id值使用 */</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">cnt++;</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number89 index88 alt2\"> </div><div class=\"line number90 index89 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 去除错误的scc */</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(vst, 0, </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(vst));</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">p;</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i = 0; i&lt;n; i++) </code></div><div class=\"line number94 index93 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!vst[set[i]]) </code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(p = head[i]; p &gt;= 0; p = next[p]) </code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(set[no[p] ] != set[i]) {</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">                        </code><code class=\"cpp plain\">vst[set[i] ] = </code><code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;</code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\">                        </code><code class=\"cpp comments\">/* 有引申出去的点 则当前scc错误！ */</code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\">                        </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">}</code></div><div class=\"line number101 index100 alt2\"> </div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">j = -1;</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp spaces\">                    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i = 0; i&lt;cnt; i++) </code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp spaces\">                        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!vst[i]) {</code></div><div class=\"line number105 index104 alt2\"><code class=\"cpp spaces\">                            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(j &gt;= 0) {</code></div><div class=\"line number106 index105 alt1\"><code class=\"cpp spaces\">                                </code><code class=\"cpp comments\">/* 2连通分量 */</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp spaces\">                                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"0\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp spaces\">                                </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;</code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp spaces\">                            </code><code class=\"cpp plain\">}</code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">                            </code><code class=\"cpp plain\">j = i;</code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">                        </code><code class=\"cpp plain\">}</code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp spaces\">                        </code><code class=\"cpp plain\">cnt = 0;</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">                        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i = 0; i&lt;n; i++) </code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp spaces\">                            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(set[i] == j)</code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp spaces\">                                </code><code class=\"cpp plain\">cnt++;</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp spaces\">                        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\\n\"</code><code class=\"cpp plain\">, cnt);</code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number118 index117 alt1\"> </div><div class=\"line number119 index118 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main() {</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">init();</code></div><div class=\"line number121 index120 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">work();</code></div><div class=\"line number122 index121 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number123 index122 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(45, '2、拓扑排序', '七、图论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 拓扑排序 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp comments\">/* 要求 有ind 即入度数组 */</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">TOPO() {</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">idx[N], stack[N], top = 0, i, cnt = 0;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(chk, 0, </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(chk));</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(1) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(top == 0) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i = 0; i &lt; nv; ++i) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!chk[i] &amp;&amp; ind[i] == 0) </code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i &gt;= nv) </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">stack[top++] = i;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">idx[cnt++] = i;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">cur = i;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">chk[i] = 1;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i = 0; i &lt; to[cur].size(); ++i) {</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">ind[to[cur][i]]--;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ind[to[cur][i]] == 0) </code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">stack[top++] = to[cur][i];</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(46, '3、最小生成树', '七、图论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 最小生成树 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp comments\">/* 无向图最小生成树,kruskal 算法,邻接表形式,复杂度O(mlogm)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 返回最小生成树的长度,传入图的大小n 和邻接表list</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 可更改边权的类型,edge[][2]返回树的构造,用边集表示</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 如果图不连通,则对各连通分支构造最小生成树,返回总长度</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp preprocessor\">#define MAXN 200</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp preprocessor\">#define inf 1000000000</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">elem_t;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">edge_t{</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">from,to;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">elem_t len;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">edge_t* next;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp plain\">};</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp preprocessor\">#define _ufind_run(x) for(;p[t=x];x=p[x],p[t]=(p[x]?p[x]:x))</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp preprocessor\">#define _run_both _ufind_run(i);_ufind_run(j)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">ufind{</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">p[MAXN],t;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">init()</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(p,0,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(p));</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">set_friend(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j)</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">_run_both;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p[i]=(i==j?0:j);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">is_friend(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j)</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">_run_both;</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">i==j&amp;&amp;i;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp plain\">};</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp preprocessor\">#define _cp(a,b) ((a).len&lt;(b).len)</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">heap_t{</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,b;</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">elem_t len;</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp plain\">};</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">minheap{</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">heap_t h[MAXN*MAXN];</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,p,c;</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">init()</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">n=0;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">ins(heap_t e){</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(p=++n;p&gt;1&amp;&amp;_cp(e,h[p&gt;&gt;1]);h[p]=h[p&gt;&gt;1],p&gt;&gt;=1);</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">h[p]=e;</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">del(heap_t&amp; e){</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!n)</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(e=h[p=1],c=2;c&lt;n&amp;&amp;_cp(h[c+=(c&lt;n-1&amp;&amp;_cp(h[c+1],h[c]))],h[n]);h[p]=h[c],p=c,c&lt;&lt;=1);</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">h[p]=h[n--];</code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp plain\">};</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(47, '4、Dijkstra算法', '七、图论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* Dijkstra算法 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp comments\">/* 单源最短路径,用于路权相等的情况,dijkstra 优化为bfs,邻接表形式,复杂度O(m)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 求出源s 到所有点的最短路经,传入图的大小n 和邻接表list,边权值len</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 返回到各点最短距离min[]和路径pre[],pre[i]记录s 到i 路径上i 的父结点,pre[s]=-1</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 可更改路权类型,但必须非负且相等!</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define MAXN 200</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp preprocessor\">#define inf 1000000000</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">elem_t;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">edge_t{</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">from,to;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">edge_t* next;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">};</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">dijkstra(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,edge_t* list[],elem_t len,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">s,elem_t* min,</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* pre){</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">edge_t* t;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,que[MAXN],f=0,r=0,p=1,l=1;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">min[i]=inf;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">min[que[0]=s]=0,pre[s]=-1;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(;r&lt;=f;l++,r=f+1,f=p-1)</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=r;i&lt;=f;i++)</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(t=list[que[i]];t;t=t-&gt;next)</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(min[t-&gt;to]==inf)</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">min[que[p++]=t-&gt;to]=len*l,pre[t-&gt;to]=que[i];</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `arithmetic` (`ID`, `name`, `sort`, `content`) VALUES
(48, '5、Folyd算法', '七、图论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* Folyd算法 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp comments\">/* 多源最短路径,floyd_warshall 算法,复杂度O(n^3)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 求出所有点对之间的最短路经,传入图的大小和邻接阵</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 返回各点间最短距离min[]和路径pre[],pre[i][j]记录i 到j 最短路径上j 的父结点</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 可更改路权类型,路权必须非负!</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define MAXN 200</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp preprocessor\">#define inf 1000000000</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">elem_t;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">floyd_warshall(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,elem_t mat[][MAXN],elem_t min[][MAXN],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">pre[][MAXN]){</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j,k;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(j=0;j&lt;n;j++)</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">min[i][j]=mat[i][j],pre[i][j]=(i==j)?-1:i;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(k=0;k&lt;n;k++)</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(j=0;j&lt;n;j++)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(min[i][k]+min[k][j]&lt;min[i][j])</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">min[i][j]=min[i][k]+min[k][j],pre[i][j]=pre[k][j];</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(49, '6、最小费用最大流', '七、图论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 最小费用最大流 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp comments\">/* 求网络最小费用最大流,邻接阵形式</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 返回最大流量,flow 返回每条边的流量,netcost 返回总费用</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 传入网络节点数n,容量mat,单位费用cost,源点source,汇点sink</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define MAXN 100</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define inf 1000000000</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">min_cost_max_flow(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">mat[][MAXN],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">cost[][MAXN],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">source,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sink,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">flow[][MAXN],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">&amp;netcost){</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">pre[MAXN],min[MAXN],d[MAXN],i,j,t,tag;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(source==sink)</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">inf;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(j=0;j&lt;n;flow[i][j++]=0);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(netcost=0;;){</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">pre[i]=0,min[i]=inf;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 通过bellman_ford 寻找最短路，即最小费用可改进路 */</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(pre[source]=source+1,min[source]=0,d[source]=inf,tag=1;tag;)</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(tag=t=0;t&lt;n;t++)</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(d[t])</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">                    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">                        </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(j=mat[t][i]-flow[t][i]&amp;&amp;min[t]+cost[t][i]&lt;min[i])</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">                            </code><code class=\"cpp plain\">tag=1,min[i]=min[t]+cost[t][i],pre[i]=t+1,d[i]=d[t]&lt;j?d[t]:j;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">                        </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(j=flow[i][t]&amp;&amp;min[t]&lt;inf&amp;&amp;min[t]-cost[i][t]&lt;min[i])</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">                            </code><code class=\"cpp plain\">tag=1,min[i]=min[t]-cost[i][t],pre[i]=-t-1,d[i]=d[t]&lt;j?d[t]:j;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!pre[sink]) </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(netcost+=min[sink]*d[i=sink];i!=source;)</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(pre[i]&gt;0)</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">flow[pre[i]-1][i]+=d[sink],i=pre[i]-1;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">flow[i][-pre[i]-1]-=d[sink],i=-pre[i]-1;</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(j=i=0;i&lt;n;j+=flow[source][i++]);</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">j;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(50, '7、网络最大流', '七、图论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 网络最大流 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp comments\">/* 求网络最大流,邻接表形式</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 返回最大流量,flow 返回每条边的流量</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 传入网络节点数n,容量mat,邻接表list,源点source,汇点sink</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* list[i](vector&lt;int&gt;)存放所有以i 相邻的点,包括反向边!!!</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define MAXN 100</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp preprocessor\">#define inf 1000000000</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">max_flow(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">mat[][MAXN],vector&lt;</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">&gt; list[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">source,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sink,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">flow[][MAXN]){</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">pre[MAXN],que[MAXN],d[MAXN],p,q,t,i,j,r;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(source==sink)</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">inf;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(j=0;j&lt;n;flow[i][j++]=0);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(;;){</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0;i&lt;n;pre[i++]=0);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">pre[t=source]=source+1,d[t]=inf;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(p=q=0;p&lt;=q&amp;&amp;!pre[sink];t=que[p++])</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(r=0;r&lt;list[t].size();++r){</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">i=list[t][r];</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!pre[i]&amp;&amp;j=mat[t][i]-flow[t][i])</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">pre[que[q++]=i]=t+1,d[i]=d[t]&lt;j?d[t]:j;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!pre[i]&amp;&amp;j=flow[i][t])</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">pre[que[q++]=i]=-t-1,d[i]=d[t]&lt;j?d[t]:j;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(!pre[sink]) </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=sink;i!=source;)</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(pre[i]&gt;0)</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">flow[pre[i]-1][i]+=d[sink],i=pre[i]-1;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">flow[i][-pre[i]-1]-=d[sink],i=-pre[i]-1;</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(j=i=0;i&lt;n;j+=flow[source][i++]);</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">j;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(51, '8、最大团', '七、图论', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 最大团 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp comments\">/* </code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 返回最大团大小和一个方案,传入图的大小n 和邻接阵mat</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* mat[i][j]为布尔量</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define MAXN 60</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">clique(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n, </code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* u, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">mat[][MAXN], </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">size, </code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">&amp; max, </code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">&amp; bb, </code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* res, </code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* rr, </code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* c) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i, j, vn, v[MAXN];</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(n) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(size + c[u[0]] &lt;= max) </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i = 0; i &lt; n + size - max &amp;&amp; i &lt; n; ++ i) {</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(j = i + 1, vn = 0; j &lt; n; ++ j)</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(mat[u[i]][u[j]])</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">v[vn ++] = u[j];</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">rr[size] = u[i];</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">clique(vn, v, mat, size + 1, max, bb, res, rr, c);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(bb) </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(size &gt; max) {</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">max = size;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i = 0; i &lt; size; ++ i)</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">res[i] = rr[i];</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">bb = 1;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">maxclique(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">mat[][MAXN], </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*ret) {</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">max = 0, bb, c[MAXN], i, j;</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">vn, v[MAXN], rr[MAXN];</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(c[i = n - 1] = 0; i &gt;= 0; -- i) {</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(vn = 0, j = i + 1; j &lt; n; ++ j)</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(mat[i][j])</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">v[vn ++] = j;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">bb = 0;</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">rr[0] = i;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">clique(vn, v, mat, 1, max, bb, ret, rr, c);</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">c[i] = max;</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">max;</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');

-- --------------------------------------------------------

--
-- 表的结构 `cfunction`
--

CREATE TABLE `cfunction` (
  `ID` int(8) NOT NULL,
  `name` char(100) NOT NULL,
  `sort` char(225) NOT NULL,
  `functionread` text NOT NULL,
  `headerfile` text NOT NULL,
  `definitio` text NOT NULL,
  `parameterization` text NOT NULL,
  `returnvalue` text NOT NULL,
  `example` text NOT NULL,
  `result` text NOT NULL,
  `state` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `cfunction`
--

INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(1, 'isalnum()函数', '字符测试函数', '<div class=\"item_content\">\n							判断字符变量c是否为字母或数字						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">isalnum</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>c为需要检测的字符。</p> </div>', '<div class=\"item_content\">\n<p>当c为数字0-9或字母a-z及A-Z时，返回非零值，否则返回零。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* isalnum example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check z */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isalnum</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'z\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"z is alphanumeric.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"z is not alphanumeric.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check 9 */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isalnum</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"9 is alphanumeric.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"9 is not alphanumeric.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check ?  */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isalnum</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'?\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"? is alphanumeric.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"? is not alphanumeric.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>    z is alphanumeric.</p><p>    9 is alphanumeric.</p><p>    ? is not alphanumeric.</p> </div>', '<div class=\"item_content alert\">\n<p>isalnum()为宏定义，非真正函数。</p> </div>'),
(2, 'isalpha()函数', '字符测试函数', '<div class=\"item_content\">\n							判断字符c是否为英文字母，相当于 isupper(c)||islower(c)						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">isalpha</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参数c为要检测的字符<br/></p> </div>', '<div class=\"item_content\">\n<p>若参数c为英文字母（a~z  A~Z），则返回非0值，否则返回0。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* isalpha example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check z */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isalpha</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'z\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"z is an alphabet.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"z is not an alphabet.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check 9 */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isalpha</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"9 is an alphabet.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"9 is not an alphabet.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check ? */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isalpha</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'?\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"? is an alphabet.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"? is not an alphabet.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>z is an alphabet．</p><p>9 is not an alphabet．</p><p>? is not an alphabet．</p> </div>', '<div class=\"item_content alert\">\n<p>isalpha()为宏定义，非真正函数。</p> </div>'),
(3, 'isblank()函数', '字符测试函数', '<div class=\"item_content\">\n							用来判断一个字符是否为TAB或者空格						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">isblank(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参数c为要检测的字符<br/></p> </div>', '<div class=\"item_content\">\n<p>若c为TAB或空格，返回非0值，否则返回0。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* isblank example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check  \' \' */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( isblank(</code><code class=\"cpp string\">\' \'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"  is a blank character.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"  is not a blank character.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check \\t */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( isblank(</code><code class=\"cpp string\">\'\\t\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\\\t is a blank character.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\\\t is not a blank character.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check 9 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( isblank(</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"9 is a blank character.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"9 is not a blank character.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>  is a blank character.</p><p>\\t is a blank character.</p><p>9 is not a blank character.</p> </div>', '<div class=\"item_content alert\">\n<p>isblank()属于C99标准，并没有在 ASNI C（C89）中定义；</p><p>此为宏定义，非真正函数。</p> </div>'),
(4, 'iscntrl()函数', '字符测试函数', '<div class=\"item_content\">\n							判断字符c是否为控制字符						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">iscntrl</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参数c为要检测的字符<br/></p> </div>', '<div class=\"item_content\">\n<p>当c在0x00-0x1F之间或等于0x7F(DEL)时，返回非零值，否则返回零。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* iscntrl example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check \\n*/</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">iscntrl</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'\\n\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\\\n is a control character.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\\\n is not a control character.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check \\t */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">iscntrl</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'\\t\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\\\t a is control character.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\\\t is not a control character.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check 9 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">iscntrl</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"a is control character.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"a is not a control character.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>\\n is a control character.</p><p>\\t a is control character.</p><p>a is not a control character.</p> </div>', '<div class=\"item_content alert\">\n<p>此为宏定义，非真正函数。</p> </div>'),
(5, 'isdigit()函数', '字符测试函数', '<div class=\"item_content\">\n							判断字符c是否为数字						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">isdigit</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参数c为要检测的字符<br/></p> </div>', '<div class=\"item_content\">\n<p>当c为数字0-9时，返回非零值，否则返回零。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* isdigit example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check 9 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isdigit</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"9 is decimal digit.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"9 is not decimal digit.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check z */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isdigit</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'z\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"z is decimal digit.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"z is not decimal digit.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check  _ */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isdigit</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'_\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"_ is decimal digit.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"_ is not decimal digit.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>9 is decimal digit.</p><p>z is not decimal digit.</p><p>_ is not decimal digit.</p> </div>', '<div class=\"item_content alert\">\n<p>此为宏定义，非真正函数。</p> </div>'),
(6, 'isgraph()函数', '字符测试函数', '<div class=\"item_content\">\n							判断字符c是否为除空格外的可打印字符						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">isgraph</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参数c为要检测的字符<br/></p> </div>', '<div class=\"item_content\">\n<p>当c为可打印字符（0x21-0x7e）时，返回非零值，否则返回零。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* isgraph example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check 3 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isgraph</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'3\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"9 can be printed.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"9 can not be printed.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check \' \' */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isgraph</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\' \'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\' \' can be printed.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\' \' can not be printed.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check  \\t */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isgraph</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'\\t\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\\\t can be printed.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\\\t can not be printed.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>9 can be printed.</p><p>\' \' can not be printed.</p><p>\\t can not be printed．</p> </div>', '<div class=\"item_content alert\">\n<p>此为宏定义，非真正函数；</p><p>isgraph不包含空白字符，isprint包含空白字符。</p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(7, 'islower()函数', '字符测试函数', '<div class=\"item_content\">\n							检查参数c是否为小写英文字母。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">islower</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参数c为要检测的字符<br/></p> </div>', '<div class=\"item_content\">\n<p>若参数c为小写英文字母，则返回TRUE，否则返回NULL(0)。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* islower example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check z */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">islower</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'z\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"z is lowercase letter.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"z is not lowercase letter.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check A */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">islower</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'A\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"A is lowercase letter.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"A is not lowercase letter.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check  ? */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">islower</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'?\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"? is lowercase letter.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"? is not lowercase letter.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>z is lowercase letter.</p><p>A is not lowercase letter.</p><p>? is not lowercase letter.</p> </div>', '<div class=\"item_content alert\">\n<p>此为宏定义，非真正函数。</p> </div>'),
(8, 'isprint()函数', '字符测试函数', '<div class=\"item_content\">\n							判断字符c是否为可打印字符（含空格）						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">isprint(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参数c为要检测的字符<br/></p> </div>', '<div class=\"item_content\">\n<p>当c为可打印字符（0x20-0x7e）时，返回非零值，否则返回零。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* isprint example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check z */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( isprint(</code><code class=\"cpp string\">\'z\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"z is printable.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"z is not printable.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check \' \' */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( isprint(</code><code class=\"cpp string\">\' \'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\' \' is printable.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\' \' is not printable.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check  \\n */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( isprint(</code><code class=\"cpp string\">\'\\n\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\\\n is printable.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\\\n is not printable.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>z is printable.</p><p>\' \' is printable.</p><p>\\n is not printable.</p> </div>', '<div class=\"item_content alert\">\n<p>此为宏定义，非真正函数。</p> </div>'),
(9, 'ispunct()函数', '字符测试函数', '<div class=\"item_content\">\n							检查参数c是否为标点符号或特殊符号						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ispunct(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参数c为要检测的字符<br/></p> </div>', '<div class=\"item_content\">\n<p>若参数c为标点符号或特殊符号，则返回TRUE，否则返回NULL(0)。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* ispunct example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c[] = {</code><code class=\"cpp string\">\' \'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'!\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'\\\"\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'#\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'$\'</code><code class=\"cpp plain\">,</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp string\">\'%\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'&amp;\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'\\\'\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'(\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\')\'</code><code class=\"cpp plain\">,</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp string\">\'*\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'+\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\',\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'-\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'.\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'/\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; 17; i++ ) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* check */</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( ispunct(c[i])) {</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c ==&gt; yes\\n\"</code><code class=\"cpp plain\">, c[i]);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c ==&gt; no\\n\"</code><code class=\"cpp plain\">, c[i]);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>  ==&gt; no</p><p>! ==&gt; yes</p><p>\" ==&gt; yes</p><p># ==&gt; yes</p><p>$ ==&gt; yes</p><p>% ==&gt; yes</p><p>&amp; ==&gt; yes</p><p>\' ==&gt; yes</p><p>( ==&gt; yes</p><p>) ==&gt; yes</p><p>* ==&gt; yes</p><p>+ ==&gt; yes</p><p>, ==&gt; yes</p><p>- ==&gt; yes</p><p>. ==&gt; yes</p><p>/ ==&gt; yes</p><p>0 ==&gt; no</p> </div>', '<div class=\"item_content alert\">\n<p>此为宏定义，非真正函数。</p> </div>'),
(10, 'isspace()函数', '字符测试函数', '<div class=\"item_content\">\n							检查参数c是否为空格字符，即判断是否为空格(\' \')、水平定位字符(\'\\t\')、归位键(\'\\r\')、换行(\'\\n\')、垂直定位字符(\'\\v\')或翻页(\'\\f\')的情况。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">isspace</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参数c为要检测的字符<br/></p> </div>', '<div class=\"item_content\">\n<p>若参数c为空格字符，则返回TRUE，否则返回NULL(0)。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* isspace example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check \' \' */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isspace</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\' \'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\' \' is a white-space.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\' \' is not a white-space.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check \\t */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isspace</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'\\t\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\\\t is a white-space.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\\\t is not a white-space.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check 9 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isspace</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"9 is a white-space.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"9 is not a white-space.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>\' \' is a white-space.</p><p>\\t is a white-space.</p><p>9 is not a white-space.</p> </div>', '<div class=\"item_content alert\">\n<p>此为宏定义，非真正函数。</p> </div>'),
(11, 'isupper()函数', '字符测试函数', '<div class=\"item_content\">\n							判断字符c是否为大写英文字母						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">isupper</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参数c为要检测的字符<br/></p> </div>', '<div class=\"item_content\">\n<p>当参数c为大写英文字母(A-Z)时，返回非零值，否则返回零。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* isupper example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check z */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isupper</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'z\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"z is uppercase letter.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"z is not uppercase letter.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check A */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isupper</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'A\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"A is uppercase letter.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"A is not uppercase letter.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check ? */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isupper</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'?\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"? is uppercase letter.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"? is not uppercase letter.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>z is not uppercase letter.</p><p>A is uppercase letter.</p><p>? is not uppercase letter.</p> </div>', '<div class=\"item_content alert\">\n<p>此为宏定义，非真正函数。</p> </div>'),
(12, 'isxdigit()函数', '字符测试函数', '<div class=\"item_content\">\n							检查参数c是否为16进制数字，若c为0123456789abcdefABCDEF其中一个情况则返回非零值，否则返回0。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">isxdigit</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参数c为要检测的字符<br/></p> </div>', '<div class=\"item_content\">\n<p>若参数c为16进制数字，则返回非零，否则返回0。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* isxdigit example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check 9 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isxdigit</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'9\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"9 is hexadecimal digit.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"9 is not hexadecimal digit.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check F */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isxdigit</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'F\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"F is hexadecimal digit.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"F is not hexadecimal digit.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* check G */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">isxdigit</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'G\'</code><code class=\"cpp plain\">) ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"G is hexadecimal digit.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"G is not hexadecimal digit.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>9 is hexadecimal digit.</p><p>F is hexadecimal digit.</p><p>G is not hexadecimal digit.</p> </div>', '<div class=\"item_content alert\">\n<p>参数类型为int，但是可以直接将char类型数据传入，例如：isxdigit(\'a\')返回为1；</p><p>此为宏定义，非真正函数。</p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(13, 'tolower()函数', '字符测试函数', '<div class=\"item_content\">\n							将大写字母转换为小写字母						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">tolower</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>返回转换后的小写字母，若不须转换则将参数c值返回。</p> </div>', '<div class=\"item_content\">\n<p>若参数c为英文字母（a~z  A~Z），则返回非0值，否则返回0。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* tolower example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ch1, ch2;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* Convert \'A\'  to lowercase */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ch1 = </code><code class=\"cpp functions bold\">tolower</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'A\'</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"A lowercase: %c\\n\"</code><code class=\"cpp plain\">, ch1);</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* Convert \'z\'  to lowercase */</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ch2 = </code><code class=\"cpp functions bold\">tolower</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'z\'</code><code class=\"cpp plain\">);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"z lowercase: %c\\n\"</code><code class=\"cpp plain\">, ch2);</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>A lowercase: a</p><p>z lowercase: z</p> </div>', ''),
(14, 'toupper()函数', '字符测试函数', '<div class=\"item_content\">\n							将字符c转换为大写英文字母						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">toupper</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参数c为要检测的字符<br/></p> </div>', '<div class=\"item_content\">\n<p>如果c为小写英文字母，则返回对应的大写字母；否则返回原来的值。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* toupper example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;ctype.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ch1, ch2;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* Convert \'a\'  to lowercase */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ch1 = </code><code class=\"cpp functions bold\">toupper</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'a\'</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"a lowercase: %c\\n\"</code><code class=\"cpp plain\">, ch1);</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* Convert \'z\'  to lowercase */</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ch2 = </code><code class=\"cpp functions bold\">toupper</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'Z\'</code><code class=\"cpp plain\">);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Z lowercase: %c\\n\"</code><code class=\"cpp plain\">, ch2);</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>a lowercase: A</p><p>Z lowercase: Z</p> </div>', ''),
(15, 'memchr()函数', '字符串函数', '<div class=\"item_content\">\n							在某一内存范围中查找一特定字符						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">memchr</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*s, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c, </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>s：为要搜索的区域；</p><p>c：为要搜索的字符；</p><p>n：为要搜索的区域的前n个字节。</p> </div>', '<div class=\"item_content\">\n<p> memchr()从头开始搜寻s所指的内存内容前n个字节，当第一次遇到字符ch时停止查找。如果成功，返回指向字符ch的指针，否则返回NULL</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* memchr example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define N 256</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s[] = {</code><code class=\"cpp string\">\'S\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'n\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'o\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'o\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'p\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'y\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'z\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*ret;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">c = </code><code class=\"cpp string\">\'y\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* search c in the first N bytes of s*/</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((ret=(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*)</code><code class=\"cpp functions bold\">memchr</code><code class=\"cpp plain\">(s,c,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code><code class=\"cpp plain\">)*N))!=NULL){</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c in s\\n\"</code><code class=\"cpp plain\">, c);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c not in s．\\n\"</code><code class=\"cpp plain\">, c);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>y in s</p> </div>', '<div class=\"item_content alert\">\n<p>memchr()与strchr()功能类似。</p> </div>'),
(16, 'memcmp()函数', '字符串函数', '<div class=\"item_content\">\n							比较内存区域str1和str2的前n个字节。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">memcmp</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*str1, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*str2, </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str1和str2：要比较的字符串；</p><p>n：要比较的前n个字节。</p> </div>', '<div class=\"item_content\">\n<p>当str1&lt;str2时，返回值&lt;0</p><p>当str1=str2时，返回值=0</p><p>当str1&gt;str2时，返回值&gt;0</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* memchr example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define N 8</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x1[] = {0, 1, 2, 3, 4, 5, 6, 7};</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x2[] = {0, 1, 2, 3, 4, 5, 6, 6};</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x3[] = {0, 1, 2, 3, 4, 5, 6, 8};</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x4[] = {0, 1, 2, 3, 4, 5, 6, 7};</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* compare x1 and x2  */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">memcmp</code><code class=\"cpp plain\">(x1, x2, </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">) * N) == 0 ) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"x1 and x2 are identical.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"x1 and x2 are not identical.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* compare x1 and x3 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">memcmp</code><code class=\"cpp plain\">(x1, x3, </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">) * N) == 0 ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"x1 and x3 are identical.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"x1 and x3 are not identical.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* compare x1 and x4 */</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">memcmp</code><code class=\"cpp plain\">(x1, x4, </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">) * N) == 0 ) {</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"x1 and x4 are identical.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"x1 and x4 are not identical.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number36 index35 alt1\"> </div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>x1 and x2 are not identical.</p><p>x1 and x3 are not identical.</p><p>x1 and x4 are identical.</p> </div>', '<div class=\"item_content alert\">\n<p>memcmp与strncmp的区别：</p><p>功能比较：</p><p>memcmp()，如果两个字符串相同而且n大于字符串长度的话，memcmp不会在\\0处停下来，会继续比较\\0后面的内存单元，直到比较结果不为零或者达到n次数。      </p><p>strncmp()，比较必定会在最短的字符串的末尾停下来，即使比较次数还未达到n次数。</p><p>具体的例子：      </p><p>  char   a1[]=\"ABCD\";   </p><p>  char   a2[]=\"ABCD\";       </p><p>对于memcmp(a1,a2,10)，memcmp在两个字符串的\\0之后继续比较；   </p><p>对于strncmp(a1,a2,10），strncmp在两个字符串的末尾停下，不再继续比较。       </p><p>所以，如果想使用memcmp比较字符串，要保证n不能超过最短字符串的长度，否则结果有可能是错误的。</p><p>效率差异：</p><p>strcmp比较的字符串，而memcmp比较的是内存块，strcmp需要时刻检查是否遇到了字符串结束的\\0字符，而memcmp则完全不用担心这个问题，所以memcmp的效率要高于strcmp。</p> </div>'),
(17, 'memcpy()函数', '字符串函数', '<div class=\"item_content\">\n							由str2所指内存区域复制n个字节到str1所指内存区域。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">memcpy</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*str1, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*str2, </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str1：为指向目标区域的指针；</p><p>str2：为指向源区域的指针，str1和str2所指内存区域不能重叠；</p><p>n：为要复制的字节数。</p> </div>', '<div class=\"item_content\">\n<p>返回指向str1的指针。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* memcpy example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main (</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">src[50] = </code><code class=\"cpp string\">\"http://www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">dest[50] = </code><code class=\"cpp string\">\"\\0\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Before memcpy dest = %s\\n\"</code><code class=\"cpp plain\">, dest);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">memcpy</code><code class=\"cpp plain\">(dest, src, </code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(src)+1);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"After memcpy dest = %s\\n\"</code><code class=\"cpp plain\">, dest);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">   </code> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">getchar</code><code class=\"cpp plain\">();</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">   </code> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Before memcpy dest =</p><p>After memcpy dest = http://www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>strcpy和memcpy的区别。</p><p>1、复制的内容不同。strcpy只能复制字符串，而memcpy可以复制任意内容，例如字符数组、整型、结构体、类等。</p><p>2、复制的方法不同。strcpy不需要指定长度，它遇到被复制字符的串结束符\"\\0\"才结束，所以容易溢出。memcpy则是根据其第3个参数决定复制的长度。</p><p>3、用途不同。通常在复制字符串时用strcpy，而需要复制其他类型数据时则一般用memcpy</p> </div>'),
(18, 'memmove()函数', '字符串函数', '<div class=\"item_content\">\n							由src所指内存区域复制n个字节到dest所指内存区域。src和dest所指内存区域可以重叠，但复制后src内容会被更改。函数返回指向dest的指针。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">memmove</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*dest, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*src, </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>dest：表示要移动的目标区域；</p><p>src：为要移动的源区域；</p><p>n：为要移动的字节数。</p> </div>', '<div class=\"item_content\">\n<p>返回指向dest的指针</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* memmove example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s1_1[10] = {</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s1_2[] = </code><code class=\"cpp string\">\"123456789\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s1_3[] = </code><code class=\"cpp string\">\"123456789\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s2[] = </code><code class=\"cpp string\">\"copy!\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* copy1 */</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memmove</code><code class=\"cpp plain\">(s1_1, s2, 5);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"copy1: %s\\n\"</code><code class=\"cpp plain\">, s1_1);</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* copy2 */</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memmove</code><code class=\"cpp plain\">(s1_2, s2, 5);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"copy2: %s\\n\"</code><code class=\"cpp plain\">, s1_2);</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* copy3 (overlap domain) */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memmove</code><code class=\"cpp plain\">(s1_3, s1_3 + 3, 3);</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"copy3: %s\\n\"</code><code class=\"cpp plain\">, s1_3);</code></div><div class=\"line number24 index23 alt1\"> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>copy1: copy!</p><p>copy2: copy!6789</p><p>copy3: 456456789</p> </div>', '<div class=\"item_content alert\">\n<p>memcpy memmove区别和实现：</p><p>memcpy与memmove的目的都是将N个字节的源内存地址的内容拷贝到目标内存地址中。</p><p>但当源内存和目标内存存在重叠时，memcpy会出现错误，而memmove能正确地实施拷贝，但这也增加了一点点开销。</p><p>memmove的处理措施：</p><p>（1）当源内存的首地址等于目标内存的首地址时，不进行任何拷贝</p><p>（2）当源内存的首地址大于目标内存的首地址时，实行正向拷贝</p><p>（3）当源内存的首地址小于目标内存的首地址时，实行反向拷贝</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp functions bold\">memcpy</code><code class=\"cpp plain\">实现：</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">* </code><code class=\"cpp functions bold\">memcpy</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">* dest, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">* src, </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n) </code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code><code class=\"cpp plain\">* d = (</code><code class=\"cpp color1 bold\">char</code><code class=\"cpp plain\">*) dest;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code><code class=\"cpp plain\">*  s = (</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code><code class=\"cpp plain\">*) src;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(n-–) </code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">       </code><code class=\"cpp plain\">*d++ = *s++;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dest;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>memmove实现：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">* </code><code class=\"cpp functions bold\">memmove</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">* dest, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">* src, </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code><code class=\"cpp plain\">* d  = (</code><code class=\"cpp color1 bold\">char</code><code class=\"cpp plain\">*) dest;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code><code class=\"cpp plain\">*  s = (</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code><code class=\"cpp plain\">*) src;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">  </code> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(s&gt;d) </code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">//start at beginning of s</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(n--)</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">           </code><code class=\"cpp plain\">*d++ = *s++;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(s&lt;d)</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">// start at end of s</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">d = d+n-1;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">s = s+n-1;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">  </code> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(n--)</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">           </code><code class=\"cpp plain\">*d-- = *s--;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">dest;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p><br/></p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(19, 'memset()函数', '字符串函数', '<div class=\"item_content\">\n							把str所指内存区域的前n个字节设置成字符c。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*str, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c, </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str：为要设置的区域；</p><p>c：为要设置成的字符；</p><p>n：为要设置的前n个字节。</p> </div>', '<div class=\"item_content\">\n<p>返回指向str的指针。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* memset example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define N 16</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s[N];</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">memset</code><code class=\"cpp plain\">(s, </code><code class=\"cpp string\">\'z\'</code><code class=\"cpp plain\">, N);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s[N - 1] = </code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"s: %s\\n\"</code><code class=\"cpp plain\">, s);</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>s: zzzzzzzzzzzzzzz</p> </div>', '<div class=\"item_content alert\">\n<p>memset()用来对一段内存空间全部设置为某个字符，一般用在对定义的字符串进行初始化为\' \'或\'\\0\'；例:char a[100]; memset(a,\'\\0\',sizeof(a));</p> </div>'),
(20, 'strcat()函数', '字符串函数', '<div class=\"item_content\">\n							把src所指字符串添加到dest结尾处(覆盖dest结尾处的\'\\0\')并添加\'\\0\'。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">strcat</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*dest, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*src);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>dest：为追加的目标字符串；</p><p>src：为追加的字符串。</p> </div>', '<div class=\"item_content\">\n<p>返回指向dest的指针。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strcat example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s1[] = </code><code class=\"cpp string\">\"www.\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s2[] = </code><code class=\"cpp string\">\"cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* appends s2 to s1 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">strcat</code><code class=\"cpp plain\">(s1, s2);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"s1+s2 : %s\\n\"</code><code class=\"cpp plain\">, s1);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>s1+s2 : www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>src和dest所指内存区域不可以重叠且dest必须有足够的空间来容纳src的字符串。</p><p>strcpy和strcat区别：</p><p>strcpy，复制用</p><p>strcpy(a,b) 把b的内容复制给a</p><p>例：a=\"123\",b=\"456\"，那么strcpy(a,b)后，a=456,b=456</p><p><br/></p><p>strcat，追加用</p><p>strcpy(a,b) 把b的内容追加到a尾部</p><p>例：a=\"123\",b=\"456\"，那么strcat(a,b)后，a=123456,b=456</p> </div>'),
(21, 'strncat函数', '字符串函数', '<div class=\"item_content\">\n							从字符串src的开头拷贝n个字符到dest字符串尾部，dest要有足够的空间来容纳要拷贝的字符串。如果n大于字符串src的长度，那么仅将src全部追加到dest的尾部。\nstrncat()会将dest字符串最后的\'\\0\'覆盖掉，字符追加完成后，再追加\'\\0\'。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">strncat</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*dest, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*src, </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>dest：目标字符串；</p><p>src：源字符串；</p><p>n：要追加的字符的数目。</p> </div>', '<div class=\"item_content\">\n<p>返回指向dest的指针。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strncat example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s1[] = </code><code class=\"cpp string\">\"www.\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s2[] = </code><code class=\"cpp string\">\"cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* appends 9 chars of s2 to s1 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">strncat</code><code class=\"cpp plain\">(s1, s2, 9);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"s1+s2 : %s\\n\"</code><code class=\"cpp plain\">, s1);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>s1+s2 : www.cyuyan100</p> </div>', ''),
(22, 'strchr()函数', '字符串函数', '<div class=\"item_content\">\n							查找字符串str中首次出现字符c的位置						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">strchr</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str：为要查找的目标字符串；</p><p>c：为要查找的字符。</p> </div>', '<div class=\"item_content\">\n<p>如果找到指定的字符则返回该字符所在地址，否则返回NULL。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strchr example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main ()</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">str[] = </code><code class=\"cpp string\">\"http://www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">ch = </code><code class=\"cpp string\">\'c\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*ret;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">ret = </code><code class=\"cpp functions bold\">strchr</code><code class=\"cpp plain\">(str, ch);</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"string after %c is : %s\\n\"</code><code class=\"cpp plain\">, ch, ret);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">getchar</code><code class=\"cpp plain\">();</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>string after c is : cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>strchr与strstr区别：</p><p>strchr求一个字符在字符串中得位置；strstr是求一个字符串在另一个字符串中的位置。</p> </div>'),
(23, 'strcmp()函数', '字符串函数', '<div class=\"item_content\">\n							比较字符串str1和str2						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">strcmp</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str1, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str2);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str1和str2为要比较的字符串。</p> </div>', '<div class=\"item_content\">\n<p>若str1和str2字符串相同则返回0；</p><p>若str1若大于str2则返回大于0的值；</p><p>若str1若小于str2则返回小于0的值。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strcmp example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">str1[]=</code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">str2[]=</code><code class=\"cpp string\">\"WWW.CYUYAN100.COM\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret = </code><code class=\"cpp functions bold\">strcmp</code><code class=\"cpp plain\">(str1, str2);</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ret &lt; 0) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">       </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"str1 is less than str2\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ret &gt; 0) {</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">       </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"str2 is less than str1\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">       </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"str1 is equal to str2\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>str2 is less than str1</p> </div>', '<div class=\"item_content alert\">\n<p>字符串大小的比较是以ASCII码表上的顺序来决定，此顺序亦为字符的值。strcmp()首先将s1第一个字符值减去s2第一个字符值，若差值为0则再继续比较下个字符，若差值不为0则将差值返回。例如字符串\"Ac\"和\"ba\"比较则会返回字符\"A\"(65)和\'b\'(98)的差值(-33)。</p> </div>'),
(24, 'strcoll()函数', '字符串函数', '<div class=\"item_content\">\n							依环境变量LC_COLLATE 所指定的文字排列次序来比较s1 和s2 字符串						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">strcoll</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str1, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str2);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str1和str2为要比较的字符串。</p> </div>', '<div class=\"item_content\">\n<p>若str1和str2字符串相同则返回0；</p><p>若str1若大于str2则返回大于0的值；</p><p>若str1若小于str2则返回小于0的值。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strcoll example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">str1[]=</code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">str2[]=</code><code class=\"cpp string\">\"WWW.CYUYAN100.COM\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret = </code><code class=\"cpp functions bold\">strcoll</code><code class=\"cpp plain\">(str1, str2);</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ret &lt; 0) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">       </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"str1 is less than str2\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ret &gt; 0) {</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">       </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"str2 is less than str1\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">       </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"str1 is equal to str2\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>str2 is less than str1</p> </div>', '<div class=\"item_content alert\">\n<p>strcoll和strcmp的区别：</p><p>strcoll()会依环境变量LC_COLLATE所指定的文字排列次序来比较字符串；</p><p>strcmp是根据ASCII来比较2个串的；</p><p>说明若LC_COLLATE为\"POSIX\"或\"C\"，则strcoll()与strcmp()作用完全相同。</p> </div>'),
(25, 'strcpy()函数', '字符串函数', '<div class=\"item_content\">\n							把src所指由NULL结束的字符串复制到dest所指的数组中。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*dest, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*src);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>dest：要复制的目标字符数组；</p><p>src：复制的源字符串。</p> </div>', '<div class=\"item_content\">\n<p>返回指向dest的指针</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strcpy example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define N 256</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s1[N] = {</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s2[] = </code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(s1, s2);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"s1: %s\\n\"</code><code class=\"cpp plain\">, s1);</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>s1: www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>src和dest所指内存区域不可以重叠且dest必须有足够的空间来容纳src的字符串，如果参数dest所指的内存空间不够大，可能会造成缓冲溢出(buffer Overflow)的错误情况，在编写程序时请特别留意，或者用strncpy()来取代。</p> </div>'),
(26, 'strcspn()函数', '字符串函数', '<div class=\"item_content\">\n							顺序在字符串s1中搜寻与s2中字符的第一个相同字符，包括结束符NULL，返回这个字符在S1中第一次出现的位置。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp functions bold\">strcspn</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str1, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str2);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str1：为要查找的字符串；</p><p>str2：为查找结果的字符串。</p> </div>', '<div class=\"item_content\">\n<p>返回字符串str1开头连续不含字符串str2内的字符数目。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strcspn example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s1[] = </code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s2[] = </code><code class=\"cpp string\">\"100\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s3[] = </code><code class=\"cpp string\">\"com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n;</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n = </code><code class=\"cpp functions bold\">strcspn</code><code class=\"cpp plain\">(s1, s2);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"First matched character is at: %d\\n\"</code><code class=\"cpp plain\">, n);</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n = </code><code class=\"cpp functions bold\">strcspn</code><code class=\"cpp plain\">(s1, s3);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"First matched character is at: %d\\n\"</code><code class=\"cpp plain\">, n);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>First matched character is at: 10</p><p>First matched character is at: 4</p> </div>', '<div class=\"item_content alert\">\n<p>strcspn()会检查字符串结束标志\'\\0\'；如果s1中的字符都没有在s2中出现，那么将返回s1的长度；检索的字符是区分大小写的。</p> </div>'),
(27, 'strerror()函数', '字符串函数', '<div class=\"item_content\">\n							返回错误原因的描述字符串						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">strerror</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">errnum);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>errnum：错误标号，通常用errno(标准错误号，定义在errno.h中)</p> </div>', '<div class=\"item_content\">\n<p>返回指向错误信息字符串的指针</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strerror example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; 10; i++ ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">, </code><code class=\"cpp functions bold\">strerror</code><code class=\"cpp plain\">(i));</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>No error</p><p>Operation not permitted</p><p>No such file or directory</p><p>No such process</p><p>Interrupted function call</p><p>Input/output error</p><p>No such device or address</p><p>Arg list too long</p><p>Exec format error</p><p>Bad file descriptor</p> </div>', '');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(28, 'strlen()函数', '字符串函数', '<div class=\"item_content\">\n							计算指定的字符串s 的长度，不包括结束字符\"\\0\"						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str：要计算的字符串</p> </div>', '<div class=\"item_content\">\n<p>返回字符串s的字符数</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strlen example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s[] = </code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">length;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">length = (</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">)</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(s);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Length of s is: %d\\n\"</code><code class=\"cpp plain\">, length);</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Length of s is: 17</p> </div>', '<div class=\"item_content alert\">\n<p>与sizeof()的区别：</p><p>strlen(char*)函数求的是字符串的实际长度，它求得方法是从开始到遇到第一个\'\\0\',如果你只定义没有给它赋初值，这个结果是不定的，它会从首地址一直找下去，直到遇到\'\\0\'停止。</p><p>如：</p><p>char ss[10];printf(\"%d\\n\", strlen(ss)); //结果是不定的</p><p>char ss[10]={\'\\0\'}; printf(\"%d\\n\", strlen(ss)); //结果为0</p><p>char ss[10]=\"jun\"; printf(\"%d\\n\", strlen(ss)); //结果为3</p><p><br/></p><p>sizeof()返回的是变量声明后所占的内存数，不是实际长度，此外sizeof不是函数，仅仅是一个操作符，strlen是函数。</p><p>如：</p><p>char ss[10];printf(\"%d\\n\", sizeof(ss)); //结果是10</p><p>char ss[10]={\'\\0\'}; printf(\"%d\\n\", sizeof(ss)); //结果为10</p><p>char ss[10]=\"jun\"; printf(\"%d\\n\", sizeof(ss)); //结果为10</p><p><br/></p><p>上面是对静态数组处理的结果，如果是对指针，结果就不一样了，如：</p><p>char* ss = \"0123456\"; printf(\"%d\\n\", strlen(ss)); //结果为7</p><p>char* ss = \"0123456\"; printf(\"%d\\n\", sizeof(ss)); //结果为4</p><p>char* ss = \"0123456\"; printf(\"%d\\n\", sizeof(*ss)); //结果为1 </p><p>strlen获得这个字符串的长度，所以strlen(ss)为7；ss是指向字符串常量的字符指针，sizeof 获得的是一个指针的之所占的空间,应该是长整型的，所以sizeof(ss)结果为4；*ss是第一个字符其实就是获得了字符串的第一位\'0\'所占的内存空间，是char类型的，占了1位。</p> </div>'),
(29, 'strncmp()函数', '字符串函数', '<div class=\"item_content\">\n							比较字符串str1和str2的前n个字符						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">strncmp</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str1, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str2, </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str1、str2：要比较的字符串；</p><p>n：要比较的字符串个数。</p> </div>', '<div class=\"item_content\">\n<p>若str1与str2的前n个字符相同，则返回0；</p><p>若s1大于s2，则返回大于0的值；</p><p>若s1 若小于s2，则返回小于0的值。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strncmp example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s1[] = </code><code class=\"cpp string\">\"cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s2[] = </code><code class=\"cpp string\">\"cyuyan100.COM\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">strncmp</code><code class=\"cpp plain\">(s1, s2, 17) == 0 ) {</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"s1 is equal to s2\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"s1 is differ from s2\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>s1 is differ from s2</p> </div>', '<div class=\"item_content alert\">\n<p>要比较的字符包括字符串结束标志\'\\0\'，而且一旦遇到\'\\0\'就结束比较，无论n是多少，不再继续比较后边的字符。</p><p>如果两个字符不同，GCC返回该字符对应的ASCII码的差值，VC返回-1或1。但是让人为难的是，strnicmp()、strcmp()、stricmp()在GCC和VC下都返回-1或1，而不是ASCII的差值。</p> </div>'),
(30, 'strncpy()函数', '字符串函数', '<div class=\"item_content\">\n							用来复制字符串的前n个字符						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">strncpy</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*dest, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*src, </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>dest：目标字符串指针；</p><p>src：为源字符串指针；</p><p>n：要复制的字符数。</p> </div>', '<div class=\"item_content\">\n<p>返回字符串dest</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strncpy example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define N 256</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s1[N] = {</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s2[] = </code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"before copy:\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"s1: %s\\n\"</code><code class=\"cpp plain\">, s1);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"s2: %s\\n\"</code><code class=\"cpp plain\">, s2);</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">strncpy</code><code class=\"cpp plain\">(s1, s2, N);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( N &gt; 0 ) {</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">s1[N - 1] = </code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\nafter copy:\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"s1: %s\\n\"</code><code class=\"cpp plain\">, s1);</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"s2: %s\\n\"</code><code class=\"cpp plain\">, s2);</code></div><div class=\"line number26 index25 alt1\"> </div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>before copy:</p><p>s1:</p><p>s2: www.cyuyan100.com</p><p><br/></p><p>after copy:</p><p>s1: www.cyuyan100.com</p><p>s2: www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>1）src串长度&lt;=dest串长度,(这里的串长度包含串尾\'\\0\'字符)</p><p>如果n &gt; src，由于长度达到src的\'\\0\'，正常复制，特别注意，如果src中有\'\\0\'，strncpy复制到\'\\0\'即使没到n也提前停止。</p><p>如果n = src串长度，与strcpy一致。注意n的选择当n &gt; dest串长度，dest栈空间溢出产生崩溃异常。</p><p>2）src串长度&gt;dest串长度</p><p>如果n = dest串长度，则dest串没有\'\\0\'字符，会导致输出会有乱码。如果不考虑src串复制完整性，可以将dest最后一字符置为\'\\0\'。</p><p>所以，一般情况下，使用strncpy时，建议将n置为dest串长度（除非你将多个src串都复制到dest数组，并且从dest尾部反向操作)，复制完毕后，为保险起见，将dest串最后一字符置NULL，避免发生在第2)种情况下的输出乱码问题。当然，无论是strcpy还是strncpy，保证dest串容量(能容纳下src串）才是最重要的。</p> </div>'),
(31, 'strpbrk()函数', '字符串函数', '<div class=\"item_content\">\n							检索两个字符串中首个相同字符的位置						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">strpbrk</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str1, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str2);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str1：要进行查找的目标字符串；</p><p>str2：要查找的字符串。</p> </div>', '<div class=\"item_content\">\n<p>strpbrk()从str1的第一个字符向后检索，直到\'\\0\'，如果当前字符存在于str2中，那么返回当前字符的地址，并停止检索。如果没有相同的字符返回NULL。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strpbrk example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s1[] = </code><code class=\"cpp string\">\"http://www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s2[] = </code><code class=\"cpp string\">\"cyuyan\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*c;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((c = </code><code class=\"cpp functions bold\">strpbrk</code><code class=\"cpp plain\">(s1, s2)) != NULL ) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"first matching character: %c\\n\"</code><code class=\"cpp plain\">, *c);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"character not found\\n\"</code><code class=\"cpp plain\">, *c);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>first matching character: c</p> </div>', '<div class=\"item_content alert\">\n<p>与strcspn函数区别：</p><p>strpbrk函数返回的是一个指针，而strcspn函数返回的是一个数组下标值，或者可以前者为绝对值，而后者为偏移量，为一相对值，如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s1[] = </code><code class=\"cpp string\">\"http://www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s2[] = </code><code class=\"cpp string\">\"cyuyan\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*c = </code><code class=\"cpp functions bold\">strpbrk</code><code class=\"cpp plain\">(s1, s2);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n = </code><code class=\"cpp functions bold\">strcspn</code><code class=\"cpp plain\">(s1, s2);</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(c != NULL ) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">, c);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}   </code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">, s1+n);</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>两者的结果是一样的。</p><p>此外，如果strpbrk没有遇到匹配的，则返回NULL，而strcspn则返回第一个字符的尾部，亦即第一个字符串的长度值。</p><p><br/></p> </div>'),
(32, 'strrchr()函数', '字符串函数', '<div class=\"item_content\">\n							在字符串中查找指定字符的最后一个出现的位置						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">strrchr</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str：被搜索的字符串</p><p>c：要查找的字符。如果该参数是数字，则搜索匹配数字ASCII值的字符。</p> </div>', '<div class=\"item_content\">\n<p>如果找到指定字符返回从字符串中的这个位置起，一直到字符串结束的所有字符。如果未能找到指定字符，那么函数将返回NULL。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strrchr example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s[] = </code><code class=\"cpp string\">\"http://www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*ret;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c = </code><code class=\"cpp string\">\'c\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((ret = </code><code class=\"cpp functions bold\">strrchr</code><code class=\"cpp plain\">(s, c)) != NULL ) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"string after \'%c\' is: %s.\\n\"</code><code class=\"cpp plain\">, c, ret);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\'%c\' not fount．\\n\"</code><code class=\"cpp plain\">, c);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>string after \'c\' is: com.</p> </div>', '<div class=\"item_content alert\">\n<p>与strchr区别：</p><p>strchr，查找字符串s中首次出现字符c的位置；</p><p>strrchr，查找字符串s中最后一个出现字符c的位置。</p> </div>'),
(33, 'strspn()函数', '字符串函数', '<div class=\"item_content\">\n							计算字符串str开头连续包含指定字符串accept的字符数目，strspn()从参数str字符串的开头计算连续的字符，而这些字符都完全是accept所指字符串中的字符。若strspn()返回的数值为n，则代表字符串str开头连续有n个字符都是属于字符串accept内的字符。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp functions bold\">strspn</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*accept);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str：被搜索的字符串；</p><p>accept：指定与str1匹配的字符串。</p> </div>', '<div class=\"item_content\">\n<p>返回字符串str开头连续包含字符串accept内的字符数目。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strspn example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s1[] = </code><code class=\"cpp string\">\"cyuyan\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s2[] = </code><code class=\"cpp string\">\"http://www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n = </code><code class=\"cpp functions bold\">strspn</code><code class=\"cpp plain\">(s1, s2);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"length of initial segment matching %d\\n\"</code><code class=\"cpp plain\">, n);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>length of initial segment matching 6</p> </div>', '<div class=\"item_content alert\">\n<p>与strcspn的区别：</p><p>strspn：返回字符串中连续包含指定字符串内容的字符数；</p><p>strcspn：返回字符串中连续不含指定字符串内容的字符数。</p><p><br/></p> </div>'),
(34, 'strstr()函数', '字符串函数', '<div class=\"item_content\">\n							检索子串在字符串中首次出现的位置						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">strstr</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*haystack, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*needle);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>haystack：要查找的目标字符串；</p><p>needle：要查找的字符串。</p> </div>', '<div class=\"item_content\">\n<p>返回指向第一次出现needle位置的指针，如果没有找到，则返回NULL。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strstr example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s1[] = </code><code class=\"cpp string\">\"http://www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s2[] = </code><code class=\"cpp string\">\"www\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*ret;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((ret = </code><code class=\"cpp functions bold\">strstr</code><code class=\"cpp plain\">(s1, s2)) != NULL ) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"The substring is %s\\n\"</code><code class=\"cpp plain\">, ret);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>The substring is www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>与strchr区别：</p><p>char *strchr(char *str, char c); 在一个串中查找给定字符的第一个匹配之处；</p><p>char *strstr(char *str1, char *str2); 在串中查找指定字符串的第一次出现 。</p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(35, 'strtok()函数', '字符串函数', '<div class=\"item_content\">\n							分解字符串为一组字符串						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">strtok</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*delim);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str：要分解的字符串；</p><p>delim：分隔符字符串。</p> </div>', '<div class=\"item_content\">\n<p>返回下一个分割后的字符串指针，如果已无从分割则返回NULL。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strtok example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s[] = </code><code class=\"cpp string\">\"http://www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*delim = </code><code class=\"cpp string\">\".\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*p;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">, </code><code class=\"cpp functions bold\">strtok</code><code class=\"cpp plain\">(s, delim));</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">((p = </code><code class=\"cpp functions bold\">strtok</code><code class=\"cpp plain\">(NULL, delim)))</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">, p);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}    </code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>http://www</p><p>cyuyan100</p><p>com</p> </div>', '<div class=\"item_content alert\">\n<p>在第一次调用时，strtok()必需给予参数str字符串，往后的调用则将参数str设置成NULL。每次调用成功则把原串中的delmi替换为\\0结束符，然后返回下一个分割后的字符串指针。</p> </div>'),
(36, 'strxfrm()函数', '字符串函数', '<div class=\"item_content\">\n							使用当前的区域设置来转换字符串						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp functions bold\">strxfrm</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*dest, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*src, </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>dest：字符串复制的目的字符串指针，如果拷贝字节为0，则该指针可以为NULL；</p><p>src：待复制字符串；</p><p>n：最大拷贝字节数。</p> </div>', '<div class=\"item_content\">\n<p>返回除去结尾的\'\\0\'字符, 用来存储转换后的字符串所需要的字节数。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strxfrm example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">src[] = </code><code class=\"cpp string\">\"http://www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">dest[32] = </code><code class=\"cpp string\">\"\\0\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len = </code><code class=\"cpp functions bold\">strxfrm</code><code class=\"cpp plain\">(dest,src,28);</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"length of string %s is %d\\n\"</code><code class=\"cpp plain\">, dest,len); </code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">   </code> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>length of string http://www.cyuyan100.com is 24</p> </div>', '<div class=\"item_content alert\">\n<p>如果返回值大于或等于n, dest中的内容就是不确定的；</p><p>如果区域选项是\"POSIX\"或者\"C\", 那么strxfrm()同用strncpy()来拷贝字符串是等价的。</p> </div>'),
(37, 'assert()函数', '断言函数', '<div class=\"item_content\">\n							测试一个条件并可能使程序终止						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;assert.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp functions bold\">assert</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">expression);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>expression：待检测表达式</p> </div>', '<div class=\"item_content\">\n<p>无返回值</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* assert example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;assert.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 10;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">assert</code><code class=\"cpp plain\">( i == 10 );</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">assert</code><code class=\"cpp plain\">( i == 9 ); </code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Assertion failed: i == 9,file D:/Cyunyan/Examples/assert.c,line10</p> </div>', '<div class=\"item_content alert\">\n<p>assert是宏，而不是函数;</p><p>assert的作用是先计算表达式expression，如果其值为假（即为0），那么它会打印出来assert的内容和__FILE__, __LINE__, __ASSERT_FUNCTION，然后执行abort()函数使kernel杀掉自己并coredump（是否生成coredump文件，取决于系统配置）；否则，assert()无任何作用。宏assert（）一般用于确认程序的正常操作，其中表达式构造无错时才为真值;</p><p>完成调试后，不必从源代码中删除assert()语句，因为宏NDEBUG有定义时，宏assert()的定义为空。</p> </div>'),
(38, 'localeconv()函数', '本土化函数', '<div class=\"item_content\">\n							返回当前地域设置的信息						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;locale.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">lconv</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">localeconv</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>该函数无参数</p> </div>', '<div class=\"item_content\">\n<p>返回一个指向当前的位置信息设置struct lconv类型结构体的指针，这个结构体在locale.h头文件下定义：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">lconv</code> <code class=\"cpp plain\">{</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 小数点符号 */</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*decimal_point;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 千位分隔符 */</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*thousands_sep;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 一个表明在非货币数量中每组大小的字符串。</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">       </code><code class=\"cpp comments\">每个字符代表一个整数值中相应数字组的大小。</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">       </code><code class=\"cpp comments\">0值表示最前面的值也代表后面每个组的值 */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*grouping;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 国际货币符号 */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*int_curr_symbol;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 本地货币符号 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*currency_symbol;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 货币小数点符号 */</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*mon_decimal_point;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 货币千位分隔符 */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*mon_thousands_sep;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 与grouping类似，但是是用于货币值的 */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*mon_grouping;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 正货币值符号 */</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*positive_sign;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 负货币值符号 */</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*negative_sign;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 国际货币值中，小数点后面的数字个数 */</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">int_frac_digits;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 货币值中，小数点后面的数字个数 */</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">frac_digits;</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 其中的cs表示currency symbol。</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">      </code><code class=\"cpp comments\">如果该值取1的时候，currency_symbol出现在一个正货币值前面。</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">      </code><code class=\"cpp comments\">如果该值取0的时候，currency_symbol出现在一个负货币值后面 */</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">p_cs_precedes;</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 其中的sep表示separate。</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">      </code><code class=\"cpp comments\">如果该值取1的时候，则用空格将currency_symbol和正货币值分隔开。</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">      </code><code class=\"cpp comments\">如果该值取0，则不用空格将currency_symbol和正货币值分隔开 */</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">p_sep_by_space;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 与p_cs_precedes类似，不过是针对负货币值的 */</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">n_cs_precedes;</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 与p_sep_precedes类似，不过是针对负货币值的  */</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">n_sep_by_space;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 在正货币值中positive_sign的位置 */</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">p_sign_posn;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 在负货币值中negative_sign的位置 */</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">n_sign_posn;</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp plain\">};</code></div></div></td></tr></tbody></table><p>下面这些值用于p_sign_posn和n_sign_posn:<br/></p><p>0：圆括号来包裹数值和货币符号；</p><p>1：符号放在数值和货币符号前；</p><p>2：符号放在数值和货币符号后；</p><p>3：符号直接放在货币符号前；</p><p>4：符号直接放在货币符号后。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* localeconv example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;locale.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">lconv</code> <code class=\"cpp plain\">*locale_ptr;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">setlocale</code><code class=\"cpp plain\">(LC_ALL, </code><code class=\"cpp string\">\"Chinese\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">locale_ptr=</code><code class=\"cpp functions bold\">localeconv</code><code class=\"cpp plain\">();</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Decimal point:                 %s\\n\"</code><code class=\"cpp plain\">,locale_ptr-&gt;decimal_point);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Thousands Separator:           %s\\n\"</code><code class=\"cpp plain\">,locale_ptr-&gt;thousands_sep);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"International Currency Symbol: %s\\n\"</code><code class=\"cpp plain\">,locale_ptr-&gt;int_curr_symbol);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Currency Symbol:               %s\\n\"</code><code class=\"cpp plain\">,locale_ptr-&gt;currency_symbol);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Monetary Decimal Point:        %s\\n\"</code><code class=\"cpp plain\">,locale_ptr-&gt;mon_decimal_point);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Monetary Thousands Separator:  %s\\n\"</code><code class=\"cpp plain\">,locale_ptr-&gt;mon_thousands_sep);</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Decimal point:                 .</p><p>Thousands Separator:           ,</p><p>International Currency Symbol: CNY</p><p>Currency Symbol:               ￥</p><p>Monetary Decimal Point:        .</p><p>Monetary Thousands Separator:  , </p> </div>', '<div class=\"item_content alert\">\n<p>如需定义本地设置，请使用setlocale()函数</p> </div>'),
(39, 'setlocale()函数', '本土化函数', '<div class=\"item_content\">\n							配置地域化信息函数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;locale.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">setlocale</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">category, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*locale);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参数category：有下列的选择：</p><p>    LC_ALL 包括下面的全部选项都要;</p><p>    LC_COLLATE 配置字符串比较;</p><p>    LC_CTYPE 配置字符类别及转换。例如全变大写 strtoupper(); </p><p>    LC_MONETARY 配置金融货币;</p><p>    LC_NUMERIC 配置小数点后的位数;</p><p>    LC_TIME 配置时间日期格式，与 strftime() 合用。 </p><p>参数locale：若是空字符串 \"\"，则会使用系统环境变量的locale。</p> </div>', '<div class=\"item_content\">\n<p>成功：返回相应设置的地域化信息。字符串可能分配在静态存储区，失败：返回NULL</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* localeconv example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;locale.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">lconv</code> <code class=\"cpp plain\">*locale_ptr;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">setlocale</code><code class=\"cpp plain\">(LC_ALL, </code><code class=\"cpp string\">\"Chinese\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">locale_ptr=</code><code class=\"cpp functions bold\">localeconv</code><code class=\"cpp plain\">();</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Decimal point:                 %s\\n\"</code><code class=\"cpp plain\">,locale_ptr-&gt;decimal_point);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Thousands Separator:           %s\\n\"</code><code class=\"cpp plain\">,locale_ptr-&gt;thousands_sep);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"International Currency Symbol: %s\\n\"</code><code class=\"cpp plain\">,locale_ptr-&gt;int_curr_symbol);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Currency Symbol:               %s\\n\"</code><code class=\"cpp plain\">,locale_ptr-&gt;currency_symbol);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Monetary Decimal Point:        %s\\n\"</code><code class=\"cpp plain\">,locale_ptr-&gt;mon_decimal_point);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Monetary Thousands Separator:  %s\\n\"</code><code class=\"cpp plain\">,locale_ptr-&gt;mon_thousands_sep);</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Decimal point:                 .</p><p>Thousands Separator:           ,</p><p>International Currency Symbol: CNY</p><p>Currency Symbol:               ￥</p><p>Monetary Decimal Point:        .</p><p>Monetary Thousands Separator:  , </p> </div>', '<div class=\"item_content alert\">\n<p>C程序开始的时候的设置和 setlocale(LC_ALL,\"C\")相同；</p><p>对于简体中文可以使用如下设置：setlocale(LC_ALL, \"chs\" )；</p><p>使用系统默认的设置调用setlocale(LC_ALL,\"\")；</p><p>本地化设置需要具备三个条件：</p><p>a. 语言代码 (Language Code)</p><p>b. 国家代码 (Country Code)</p><p>c. 编码(Encoding)</p><p>本地名字可以用下面这些部分来构造：</p><p>语言代码_国家代码.编码 比如（zh_CN.UTF-8, en_US等）。</p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(40, 'acos()函数', '数学函数', '<div class=\"item_content\">\n							计算给定值的反余弦值						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">acos</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">acosf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">acosl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要取反余弦值的数字，范围为[-1, +1]之间，超出此范围将会导致错误，并设置errno的值为EDOM。</p> </div>', '<div class=\"item_content\">\n<p>返回[0, PI]之间的计算结果，单位为弧度</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* acos example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">to_deg(</code><code class=\"cpp color1 bold\">double</code><code class=\"cpp plain\">);</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">pi();</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">d = </code><code class=\"cpp functions bold\">cos</code><code class=\"cpp plain\">(pi() / 3.0), d_rad, d_deg;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">f = </code><code class=\"cpp functions bold\">cos</code><code class=\"cpp plain\">(pi() / 4.0), f_rad, f_deg;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ld = </code><code class=\"cpp functions bold\">cos</code><code class=\"cpp plain\">(pi() / 6.0L), ld_rad, ld_deg;</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d_rad = </code><code class=\"cpp functions bold\">acos</code><code class=\"cpp plain\">(d);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">f_rad = acosf(f);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ld_rad = acosl(ld);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d_deg = to_deg(d_rad);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">f_deg = to_deg(f_rad);</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ld_deg = to_deg(ld_rad);</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"acos(%.8f): %.2f degrees\\n\"</code><code class=\"cpp plain\">, d, d_deg);</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"acosf(%.8f): %.2f degrees\\n\"</code><code class=\"cpp plain\">, f,f_deg);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"acosl(%.8Lf): %.2Lf degrees\\n\"</code><code class=\"cpp plain\">, ld, ld_deg);</code></div><div class=\"line number27 index26 alt2\"> </div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number30 index29 alt1\"> </div><div class=\"line number31 index30 alt2\"><code class=\"cpp comments\">/**</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 弧度转角度 </code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* @param r 弧度[rad]</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* @return  角度[deg]</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">to_deg(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">r) {</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">r * 180.0 / (</code><code class=\"cpp functions bold\">atan</code><code class=\"cpp plain\">(1.0) * 4.0);</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp comments\">/**</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 求圆周率 </code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* @return 圆周率</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">pi(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">atan</code><code class=\"cpp plain\">(1.0) * 4.0;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>acos(0.50000000): 60.00 degrees</p><p>acosf(0.70710677): 45.00 degrees</p><p>acosl(0.86602540): 30.00 degrees</p> </div>', '<div class=\"item_content alert\">\n<p>弧度与角度的关系为：</p><p>弧度 = 180 / π 角度</p><p>角度 = π / 180 弧度</p> </div>'),
(41, 'asin()函数', '数学函数', '<div class=\"item_content\">\n							计算给定值的反正弦值						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">asin</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">asinf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">asinl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要取反正弦值的数字，范围为[-1, +1]之间，超出此范围将会导致错误，并设置errno的值为EDOM。</p> </div>', '<div class=\"item_content\">\n<p>返回[-PI/2, +PI/2]之间的计算结果</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* asin example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">to_deg(</code><code class=\"cpp color1 bold\">double</code><code class=\"cpp plain\">);</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">pi();</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">d = </code><code class=\"cpp functions bold\">sin</code><code class=\"cpp plain\">(pi() / 3.0), d_rad, d_deg;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">f = </code><code class=\"cpp functions bold\">sin</code><code class=\"cpp plain\">(pi() / 4.0), f_rad, f_deg;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ld = </code><code class=\"cpp functions bold\">sin</code><code class=\"cpp plain\">(pi() / 6.0L), ld_rad, ld_deg;</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d_rad = </code><code class=\"cpp functions bold\">asin</code><code class=\"cpp plain\">(d);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">f_rad = asinf(f);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ld_rad = asinl(ld);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d_deg = to_deg(d_rad);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">f_deg = to_deg(f_rad);</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ld_deg = to_deg(ld_rad);</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"asin(%.8f): %.2f degrees\\n\"</code><code class=\"cpp plain\">, d, d_deg);</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"asinf(%.8f): %.2f degrees\\n\"</code><code class=\"cpp plain\">, f,f_deg);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"asinl(%.8Lf): %.2Lf degrees\\n\"</code><code class=\"cpp plain\">, ld, ld_deg);</code></div><div class=\"line number27 index26 alt2\"> </div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number30 index29 alt1\"> </div><div class=\"line number31 index30 alt2\"><code class=\"cpp comments\">/**</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 弧度转角度 </code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* @param r 弧度[rad]</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* @return  角度[deg]</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">to_deg(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">r) {</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">r * 180.0 / (</code><code class=\"cpp functions bold\">atan</code><code class=\"cpp plain\">(1.0) * 4.0);</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp comments\">/**</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 求圆周率 </code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* @return 圆周率</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">pi(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">atan</code><code class=\"cpp plain\">(1.0) * 4.0;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>asin(0.86602540): 60.00 degrees</p><p>asinf(0.70710677): 45.00 degrees</p><p>asinl(0.50000000): 30.00 degrees</p> </div>', ''),
(42, 'atan()函数', '数学函数', '<div class=\"item_content\">\n							计算给定值的反正切值						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">atan</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">atanf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">atanl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要取反正切值的数字</p> </div>', '<div class=\"item_content\">\n<p>返回参数x的反正切值</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* atan example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">to_deg(</code><code class=\"cpp color1 bold\">double</code><code class=\"cpp plain\">);</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">pi();</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">d = </code><code class=\"cpp functions bold\">tan</code><code class=\"cpp plain\">(pi() / 3.0), d_rad, d_deg;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">f = </code><code class=\"cpp functions bold\">tan</code><code class=\"cpp plain\">(pi() / 4.0), f_rad, f_deg;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ld = </code><code class=\"cpp functions bold\">tan</code><code class=\"cpp plain\">(pi() / 6.0L), ld_rad, ld_deg;</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d_rad = </code><code class=\"cpp functions bold\">atan</code><code class=\"cpp plain\">(d);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">f_rad = atanf(f);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ld_rad = atanl(ld);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d_deg = to_deg(d_rad);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">f_deg = to_deg(f_rad);</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ld_deg = to_deg(ld_rad);</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"atan(%.8f): %.2f degrees\\n\"</code><code class=\"cpp plain\">, d, d_deg);</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"atanf(%.8f): %.2f degrees\\n\"</code><code class=\"cpp plain\">, f,f_deg);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"atanl(%.8Lf): %.2Lf degrees\\n\"</code><code class=\"cpp plain\">, ld, ld_deg);</code></div><div class=\"line number27 index26 alt2\"> </div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number30 index29 alt1\"> </div><div class=\"line number31 index30 alt2\"><code class=\"cpp comments\">/**</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 弧度转角度 </code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* @param r 弧度[rad]</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* @return  角度[deg]</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">to_deg(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">r) {</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">r * 180.0 / (</code><code class=\"cpp functions bold\">atan</code><code class=\"cpp plain\">(1.0) * 4.0);</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp comments\">/**</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 求圆周率 </code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* @return 圆周率</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">*/</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">pi(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp functions bold\">atan</code><code class=\"cpp plain\">(1.0) * 4.0;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>atan(1.73205081): 60.00 degrees</p><p>atanf(1.00000000): 45.00 degrees</p><p>atanl(0.57735027): 30.00 degrees</p> </div>', ''),
(43, 'atan2()函数', '数学函数', '<div class=\"item_content\">\n							计算Y/X的反正切值						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">atan2</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">atan2f(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">y,</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">atan2l(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>y、x：参与计算反正切值参数，y和x都不能为0。</p> </div>', '<div class=\"item_content\">\n<p>返回Y和X的商的反正切值，值域为[-PI/2, +PI/2]。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* atan2 example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">to_deg(</code><code class=\"cpp color1 bold\">double</code><code class=\"cpp plain\">);</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">rad1, rad2, rad3;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">deg1, deg2, deg3;</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">rad1 = </code><code class=\"cpp functions bold\">atan2</code><code class=\"cpp plain\">(1.0, 0.0);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">rad2 = </code><code class=\"cpp functions bold\">atan2</code><code class=\"cpp plain\">(1.0, </code><code class=\"cpp functions bold\">sqrt</code><code class=\"cpp plain\">(3.0));</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">rad3 = </code><code class=\"cpp functions bold\">atan2</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">sqrt</code><code class=\"cpp plain\">(3.0), 1.0);</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">deg1 = to_deg(rad1);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">deg2 = to_deg(rad2);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">deg3 = to_deg(rad3);</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Tangent1: %.5f[rad]，%.1f[deg]\\n\"</code><code class=\"cpp plain\">, rad1, deg1);</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Tangent2: %.5f[rad]，%.1f[deg]\\n\"</code><code class=\"cpp plain\">, rad2, deg2);</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Tangent3: %.5f[rad]，%.1f[deg]\\n\"</code><code class=\"cpp plain\">, rad3, deg3);</code></div><div class=\"line number24 index23 alt1\"> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number27 index26 alt2\"> </div><div class=\"line number28 index27 alt1\"><code class=\"cpp comments\">/**</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp comments\">* 弧度转角度 </code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp comments\">* @param r 弧度[rad]</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp comments\">* @return  角度[deg]</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">to_deg(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">r) {</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">r * 180.0 / (</code><code class=\"cpp functions bold\">atan</code><code class=\"cpp plain\">(1.0) * 4.0);</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Tangent1: 1.57080[rad]，90.0[deg]</p><p>Tangent2: 0.52360[rad]，30.0[deg]</p><p>Tangent3: 1.04720[rad]，60.0[deg]</p> </div>', '<div class=\"item_content alert\">\n<p>对应的数学公式：</p><p>tan^(-1)(y/x)</p> </div>'),
(44, 'ceil()函数', '数学函数', '<div class=\"item_content\">\n							计算不小于某数的最小整数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">ceil</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">ceilf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ceill(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要取整的数</p> </div>', '<div class=\"item_content\">\n<p>返回一个大于等于x的最小整数</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">//* ceil example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x1 = 5.0001, x2 = -5.0001, x3 = 0.0;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y1, y2, y3;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">y1 = </code><code class=\"cpp functions bold\">ceil</code><code class=\"cpp plain\">(x1);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">y2 = </code><code class=\"cpp functions bold\">ceil</code><code class=\"cpp plain\">(x2);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">y3 = </code><code class=\"cpp functions bold\">ceil</code><code class=\"cpp plain\">(x3);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"ceil(%.4f) = %.4f\\n\"</code><code class=\"cpp plain\">, x1, y1);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"ceil(%.4f) = %.4f\\n\"</code><code class=\"cpp plain\">, x2, y2);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"ceil(%.4f) = %.4f\\n\"</code><code class=\"cpp plain\">, x3, y3);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>ceil(5.0001) = 6.0000</p><p>ceil(-5.0001) = -5.0000</p><p>ceil(0.0000) = 0.0000</p> </div>', '');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(45, 'cos()函数', '数学函数', '<div class=\"item_content\">\n							计算给定值的余弦值						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">cos</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">cosf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">cosl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要计算余弦值的数</p> </div>', '<div class=\"item_content\">\n<p>返回x的余弦值，值域为[-1,+1]。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* cos example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define PI 3.14159265</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">d_angle = PI / 6.0, d_result;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">f_angle = PI / 4.0, f_result;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ld_angle = PI / 3.0L, ld_result;</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d_result = </code><code class=\"cpp functions bold\">cos</code><code class=\"cpp plain\">(d_angle);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">f_result = cosf(f_angle);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ld_result = cosl(ld_angle);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"cos(pi/6): %.8f\\n\"</code><code class=\"cpp plain\">, d_result);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"cosf(pi/4): %.8f\\n\"</code><code class=\"cpp plain\">, f_result);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"cosl(pi/3): %.8Lf\\n\"</code><code class=\"cpp plain\">, ld_result);</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>cos(pi/6): 0.86602540</p><p>cosf(pi/4): 0.70710677</p><p>cosl(pi/3): 0.50000000</p> </div>', ''),
(46, 'cosh()函数', '数学函数', '<div class=\"item_content\">\n							计算给定值的双曲余弦值						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">cosh</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">coshf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">coshl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要计算双曲余弦值的数</p> </div>', '<div class=\"item_content\">\n<p>返回x的双曲余弦值</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* cosh example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x = 2.0;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">cosh_x01, cosh_x02;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 求双曲余弦值 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">cosh_x01 = </code><code class=\"cpp functions bold\">cosh</code><code class=\"cpp plain\">(x);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">cosh_x02 = ((</code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">(x) + </code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">(-x)) / 2.0);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 表示 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"使用函数求值: %.10f\\n\"</code><code class=\"cpp plain\">, cosh_x01);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"使用数学公式: %.10f\\n\"</code><code class=\"cpp plain\">, cosh_x02);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>使用函数求值: 3.7621956911</p><p>使用数学公式: 3.7621956911</p> </div>', '<div class=\"item_content alert\">\n<p>双曲余弦的数学公式为：</p><p>cosh(x) = (e^x + e^(-x))/2</p> </div>'),
(47, 'exp()函数', '数学函数', '<div class=\"item_content\">\n							计算e的给定次幂值，即e^x值						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">expf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">expl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要取e的指定次幂</p> </div>', '<div class=\"item_content\">\n<p>返回e的指定次幂</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* exp example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">d = 1.0, d_result;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">f = 2.0, f_result;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ld = 3.0L, ld_result;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d_result = </code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">(d);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">f_result = expf(f);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ld_result = expl(ld);</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"exp(%.1f) = %.8f\\n\"</code><code class=\"cpp plain\">, d, d_result);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"expf(%.1f) = %.8f\\n\"</code><code class=\"cpp plain\">, f, f_result);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"expl(%.1Lf) = %.8Lf\\n\"</code><code class=\"cpp plain\">, ld, ld_result);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>exp(1.0) = 2.71828183</p><p>expf(2.0) = 7.38905621</p><p>expl(3.0) = 20.08553692</p> </div>', ''),
(48, 'floor()函数', '数学函数', '<div class=\"item_content\">\n							计算不大于某数的最大整数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">floor</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">floorf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">floorl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要取整的数</p> </div>', '<div class=\"item_content\">\n<p>返回小于等于x的最大整数</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* floor example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x1 = 5.9999, x2 = -5.9999, x3 = 0.0;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y1, y2, y3;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">y1 = </code><code class=\"cpp functions bold\">floor</code><code class=\"cpp plain\">(x1);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">y2 = </code><code class=\"cpp functions bold\">floor</code><code class=\"cpp plain\">(x2);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">y3 = </code><code class=\"cpp functions bold\">floor</code><code class=\"cpp plain\">(x3);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"floor(%.4f) = %.4f\\n\"</code><code class=\"cpp plain\">, x1, y1);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"floor(%.4f) = %.4f\\n\"</code><code class=\"cpp plain\">, x2, y2);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"floor(%.4f) = %.4f\\n\"</code><code class=\"cpp plain\">, x3, y3);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>floor(5.9999) = 5.0000</p><p>floor(-5.9999) = -6.0000</p><p>floor(0.0000) = 0.0000</p> </div>', ''),
(49, 'fmod()函数', '数学函数', '<div class=\"item_content\">\n							计算给定值的余数（模）						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">fmod</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">fmodf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">y);    (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">fmodl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y);   (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x、y：参与计算的数</p> </div>', '<div class=\"item_content\">\n<p>返回参数x除以参数y后的余数值</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* fmod example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x = 11.234, y = 5.03;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">rem;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 求余数 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">rem = </code><code class=\"cpp functions bold\">fmod</code><code class=\"cpp plain\">(x, y);</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%.2f %% %.2f = %.2f\\n\"</code><code class=\"cpp plain\">, x, y, rem);</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>11.23 % 5.03 = 1.17</p> </div>', ''),
(50, 'frexp()函数', '数学函数', '<div class=\"item_content\">\n							把一个双精度数分解为尾数的指数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">frexp</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">value,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">frexpf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">value,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">* </code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">frexpl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">value,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">* </code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>value：要进行分解的浮点数；</p><p>*exp：存储指数的指针。</p> </div>', '<div class=\"item_content\">\n<p>返回尾数，值域为[0.5, 1)，exp被设置为指数值。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* frexp example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x, y;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">x = 8.0;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">y = </code><code class=\"cpp functions bold\">frexp</code><code class=\"cpp plain\">(x, &amp;</code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">);</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"尾数: %.4f\\n\"</code><code class=\"cpp plain\">, y);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"指数: %d\\n\"</code><code class=\"cpp plain\">, </code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">);</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>尾数: 0.5000</p><p>指数: 4</p> </div>', '<div class=\"item_content alert\">\n<p>函数将给定的双精度数分解为数字部分和以2为底的指数n，即x=尾数*2^指数，exponent指针所指向的值为指数。</p> </div>'),
(51, 'ldexp()函数', '数学函数', '<div class=\"item_content\">\n							计算指定的幂次数，即计算x*2^exponent。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">ldexp</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">ldexpf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">);   (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ldexpl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要计算的指定次幂的浮点数；</p><p>exponent：指定的幂次数</p> </div>', '<div class=\"item_content\">\n<p>返回指定的幂次值，即返回x*2^exponent</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* ldexp example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x = 2.0, y;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">exp</code> <code class=\"cpp plain\">= 4;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">y = </code><code class=\"cpp functions bold\">ldexp</code><code class=\"cpp plain\">(x, </code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"ldexp(%.2f, %d) = %.2f\\n\"</code><code class=\"cpp plain\">, x, </code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">, y);</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>ldexp(2.00, 4) = 32.00</p> </div>', ''),
(52, 'log()函数', '数学函数', '<div class=\"item_content\">\n							计算给定值的自然对数值，即以自然常数\"e\"为底数的x的对数值。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">log</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">logf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">logl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要计算自然对数的双精度浮点数</p> </div>', '<div class=\"item_content\">\n<p>返回x的自然对数值</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* log example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">d = 2.0, d_result;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">f = 3.0, f_result;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ld = 4.0L, ld_result;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d_result = </code><code class=\"cpp functions bold\">log</code><code class=\"cpp plain\">(d);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">f_result = logf(f);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ld_result = logl(ld);</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"log(%.1f) = %.8f\\n\"</code><code class=\"cpp plain\">, d, d_result);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"logf(%.1f) = %.8f\\n\"</code><code class=\"cpp plain\">, f, f_result);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"logl(%.1Lf) = %.8Lf\\n\"</code><code class=\"cpp plain\">, ld, ld_result);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>log(2.0) = 0.69314718</p><p>logf(3.0) = 1.09861231</p><p>logl(4.0) = 1.38629436</p> </div>', '<div class=\"item_content alert\">\n<p>若x为负数或0，则会发生错误并设置errno，错误代码：</p><p>EDOM：参数x为负数；</p><p>ERANGE：参数x为零值，零的对数值无定义。</p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(53, 'log10()函数', '数学函数', '<div class=\"item_content\">\n							计算以10为底数的给定值对数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">log10</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">log10f(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">log10l(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要计算对数的双精度浮点数</p> </div>', '<div class=\"item_content\">\n<p>返回x的以10为底数的对数值。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* log10 example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">d = 10000.0, d_result;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">f = 100.0, f_result;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ld = 1000000.0L, ld_result;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d_result = </code><code class=\"cpp functions bold\">log10</code><code class=\"cpp plain\">(d);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">f_result = log10f(f);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ld_result = log10l(ld);</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"log10(%.1f) = %.2f\\n\"</code><code class=\"cpp plain\">, d, d_result);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"log10f(%.1f) = %.2f\\n\"</code><code class=\"cpp plain\">, f, f_result);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"log10l(%.1Lf) = %.2Lf\\n\"</code><code class=\"cpp plain\">, ld, ld_result);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>log10(10000.0) = 4.00</p><p>log10f(100.0) = 2.00</p><p>log10l(1000000.0) = 6.00</p> </div>', '<div class=\"item_content alert\">\n<p>若x为负数或0，则会发生错误并设置errno，错误代码：</p><p>EDOM：参数x为负数；</p><p>ERANGE：参数x为零值，零的对数值无定义。</p> </div>'),
(54, 'modf()函数', '数学函数', '<div class=\"item_content\">\n							计算给定浮点数的小数部分						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">modf</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">value,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">*iptr);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">modff(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">value,</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">*iptr); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">modfl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">value,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">*iptr); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>value：要计算小数部分的浮点数；</p><p>iptr：取小数后的整数值。</p> </div>', '<div class=\"item_content\">\n<p>返回x的小数部分并将整数部分赋给integer</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* modf example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x, y, iptr;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">x = 3.1415;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">y = </code><code class=\"cpp functions bold\">modf</code><code class=\"cpp plain\">(x, &amp;iptr);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"整数:%.1f  小数:%.4f\\n\"</code><code class=\"cpp plain\">, iptr, y);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>整数:3.0  小数:0.1415</p> </div>', ''),
(55, 'pow()函数', '数学函数', '<div class=\"item_content\">\n							计算\"x\"的\"y\"次幂						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">pow</code> <code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">powf (</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">y); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">powl (</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">y); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要计算幂的值；</p><p>y：要计算的幂次。</p> </div>', '<div class=\"item_content\">\n<p>返回x的y次幂</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* pow example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">d = 5.0, d_result;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">f = 5.0, f_result;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ld = 5.0L, ld_result;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d_result = </code><code class=\"cpp functions bold\">pow</code><code class=\"cpp plain\">(d, 3.0);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">f_result = powf(f, 3.0);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ld_result = powl(ld, 3.0L);</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pow: %.1f\\n\"</code><code class=\"cpp plain\">, d_result);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"powf: %.1f\\n\"</code><code class=\"cpp plain\">, f_result);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"powl: %.1Lf\\n\"</code><code class=\"cpp plain\">, ld_result);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>pow: 125.0</p><p>powf: 125.0</p><p>powl: 125.0</p> </div>', '<div class=\"item_content alert\">\n<p>可能导致错误的情况：</p><p>如果底数x为负数并且指数y不是整数，将会导致domain error错误。</p><p>如果底数x和指数y都是0，可能会导致domain error错误，也可能没有；这跟库的实现有关。</p><p>如果底数x是0，指数y是负数，可能会导致domain error或pole error错误，也可能没有；这跟库的实现有关。</p><p>如果返回值ret太大或者太小，将会导致range error错误。</p><p><br/></p><p>错误代码：</p><p>如果发生domain error错误，那么全局变量errno将被设置为EDOM；</p><p>如果发生pole error或range error错误，那么全局变量 errno将被设置为ERANGE。</p> </div>'),
(56, 'sin()函数', '数学函数', '<div class=\"item_content\">\n							计算给定值的反余弦值						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">sin</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">sinf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">sinl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要计算正弦值的数</p> </div>', '<div class=\"item_content\">\n<p>返回x的正弦值，值域为[-1, +1]。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* sin example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define PI 3.14159265</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">d_angle = PI / 6.0, d_result;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">f_angle = PI / 3.0, f_result;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ld_angle = PI / 2.0L, ld_result;</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d_result = </code><code class=\"cpp functions bold\">sin</code><code class=\"cpp plain\">(d_angle);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">f_result = sinf(f_angle);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ld_result = sinl(ld_angle);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"sin(pi/6): %.8f\\n\"</code><code class=\"cpp plain\">, d_result);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"sinf(pi/3): %.8f\\n\"</code><code class=\"cpp plain\">, f_result);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"sinl(pi/2): %.8Lf\\n\"</code><code class=\"cpp plain\">, ld_result);</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>sin(pi/6): 0.50000000</p><p>sinf(pi/3): 0.86602545</p><p>sinl(pi/2): 1.00000000</p> </div>', ''),
(57, 'sinh()函数', '数学函数', '<div class=\"item_content\">\n							计算给定值的反余弦值						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">sinh</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">sinhf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">sinhl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要计算双曲正弦值的数</p> </div>', '<div class=\"item_content\">\n<p>返回x的双曲正弦值</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* sinh example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x = 2.0;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">sinh_x01, sinh_x02;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 求双曲正弦值 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">sinh_x01 = </code><code class=\"cpp functions bold\">sinh</code><code class=\"cpp plain\">(x);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">sinh_x02 = ((</code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">(x) - </code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">(-x)) / 2.0);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 表示 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"使用sinh函数求值: %.10f\\n\"</code><code class=\"cpp plain\">, sinh_x01);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"使用数学公式求职: %.10f\\n\"</code><code class=\"cpp plain\">, sinh_x02);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>使用sinh函数求值: 3.6268604078</p><p>使用数学公式求职: 3.6268604078</p> </div>', '<div class=\"item_content alert\">\n<p>双曲正弦公式为：</p><p>sinh(x) = (e^x - e^(-x))/2</p><p><br/></p><p>如果返回值过大，将返回HUGE_VAL、或HUGE_VALF、或HUGE_VALL，正负号与x相同，并导致一个范围溢出错误，将全局变量errno设置为ERANGE。</p> </div>'),
(58, 'sqrt()函数', '数学函数', '<div class=\"item_content\">\n							计算给定值的算数平方根						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">sqrt</code> <code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">sqrtf (</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">sqrtl (</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要计算算数平方根的数</p> </div>', '<div class=\"item_content\">\n<p>返回x的算数平方根</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* sqrt example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">d2 = 2.0 * 2.0, d_result;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">f3 = 3.0 * 3.0, f_result;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ld4 = 4.0L * 4.0L, ld_result;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d_result = </code><code class=\"cpp functions bold\">sqrt</code><code class=\"cpp plain\">(d2);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">f_result = sqrtf(f3);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ld_result = sqrtl(ld4);</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"sqrt(%.1f) = %.2f\\n\"</code><code class=\"cpp plain\">, d2, d_result);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"sqrtf(%.1f) = %.2f\\n\"</code><code class=\"cpp plain\">, f3, f_result);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"sqrtl(%.1Lf) = %.2Lf\\n\"</code><code class=\"cpp plain\">, ld4, ld_result);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>sqrt(4.0) = 2.00</p><p>sqrtf(9.0) = 3.00</p><p>sqrtl(16.0) = 4.00</p> </div>', '<div class=\"item_content alert\">\n<p>参数为非负值，返回值总为正数。</p> </div>'),
(59, 'tan()函数', '数学函数', '<div class=\"item_content\">\n							计算给定值的正切值						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">tan</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">tanf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">tanl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要计算正切值的数</p> </div>', '<div class=\"item_content\">\n<p>返回x的正切值</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* tan example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define PI 3.14159265</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">d_angle = PI / 6.0, d_result;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">f_angle = PI / 4.0, f_result;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ld_angle = PI / 3.0L, ld_result;</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d_result = </code><code class=\"cpp functions bold\">tan</code><code class=\"cpp plain\">(d_angle);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">f_result = tanf(f_angle);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ld_result = tanl(ld_angle);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"tan(pi/6): %.8f\\n\"</code><code class=\"cpp plain\">, d_result);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"tanf(pi/4): %.8f\\n\"</code><code class=\"cpp plain\">, f_result);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"tanl(pi/3): %.8Lf\\n\"</code><code class=\"cpp plain\">, ld_result);</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>tan(pi/6): 0.57735027</p><p>tanf(pi/4): 1.00000000</p><p>tanl(pi/3): 1.73205080</p> </div>', '');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(60, 'tanh()函数', '数学函数', '<div class=\"item_content\">\n							计算给定值的双曲正切值						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">tanh</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">tanhf(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">x); (C99)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">tanhl(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x); (C99)</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：要计算双曲正切值的数</p> </div>', '<div class=\"item_content\">\n<p>返回x的双曲正切值，值域为[-1, +1]。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* tanh example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;math.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x = 2.0;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">tanh_x01, tanh_x02;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 求双曲正切值 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">tanh_x01 = </code><code class=\"cpp functions bold\">tanh</code><code class=\"cpp plain\">(x);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">tanh_x02 = ((</code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">(x) - </code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">(-x)) / (</code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">(x) + </code><code class=\"cpp functions bold\">exp</code><code class=\"cpp plain\">(-x)));</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 表示 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"使用tanh函数求值: %.10f\\n\"</code><code class=\"cpp plain\">, tanh_x01);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"使用数学公式求职: %.10f\\n\"</code><code class=\"cpp plain\">, tanh_x02);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>使用tanh函数求值: 0.9640275801</p><p>使用数学公式求职: 0.9640275801</p> </div>', '<div class=\"item_content alert\">\n<p>双曲正切公式：</p><p>tanh(x) = (e^x - e^(-x))/(e^x + e^(-x))</p> </div>'),
(61, 'setjmp()函数', '跳转函数', '<div class=\"item_content\">\n							存储当前运行环境environment变量中\n						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;setjmp.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">setjmp</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">jmp_buf</code> <code class=\"cpp plain\">environment);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>environment：参数为jmp_buf数据类型，它是某种形式的数组，其中存放在调用longjmp时能用来恢复栈状态的所有信息。因为需要在另一个函数中引用env变量，所以规范的处理方式是将env变量定义为全局变量。</p> </div>', '<div class=\"item_content\">\n<p>若直接调用则返回0，若从longjmp调用返回则返回非0值</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* setjmp example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;setjmp.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">jmp_buf</code> <code class=\"cpp plain\">env;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">retVal = 0;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* jmp_buf保存当前环境 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( (retVal = </code><code class=\"cpp functions bold\">setjmp</code><code class=\"cpp plain\">(env)) == 0 ) { </code><code class=\"cpp comments\">/* :-) */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\\n\"</code><code class=\"cpp plain\">, retVal);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* :-) 跳转. 跳转后setjmp返回1 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">longjmp</code><code class=\"cpp plain\">(env, 1);</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\\n\"</code><code class=\"cpp plain\">, retVal);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>0</p><p>1</p> </div>', '<div class=\"item_content alert\">\n<p>setjmp/longjmp的最大的用途是错误处理，只要还没有从函数中返回，一旦发现一个不可恢复的错误，可以把控制转移到主输入循环，并从那里重新开始执行。</p><p><br/></p><p>使用setjmp和longjmp要注意以下几点：</p><p>1、setjmp与longjmp结合使用时，它们必须有严格的先后执行顺序，也即先调用setjmp函数，之后再调用longjmp函数，以恢复到先前被保存的“程序执行点”。否则，如果在setjmp调用之前，执行longjmp函数，将导致程序的执行流变的不可预测，很容易导致程序崩溃而退出</p><p>2、不要假设寄存器类型的变量将总会保持不变。在调用longjmp之后，通过setjmp所返回的控制流中，程序中寄存器类型的变量将不会被恢复。寄存器类型的变量，是指为了提高程序的运行效率，变量不被保存在内存中，而是直接被保存在寄存器中。寄存器类型的变量一般都是临时变量，在C语言中，通过register定义，或直接嵌入汇编代码的程序。这种类型的变量。</p><p><br/></p><p>与goto语句区别：</p><p>goto与setjmp()和longjmp()都是在C中使用的跳转函数。</p><p>goto是局部跳转，只能在一个函数内实施的跳转；</p><p>setjmp()和longjmp()是非局部跳转，结合一个jmp_buf类型的变量，可以在栈上跳过若干调用帧，返回到当前函数调用路径上的某一个函数中。</p> </div>'),
(62, 'longjmp()函数', '跳转函数', '<div class=\"item_content\">\n							跳转到保存envbuf参数的setjmp函数调用，并由setjmp函数调用返回，此时setjmp函数的返回值就是val。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;setjmp.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp functions bold\">longjmp</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">jmp_buf</code> <code class=\"cpp plain\">environment, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">value);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>environment：由setjmp函数所保存的堆栈环境；</p><p>val：设置setjmp函数的返回值。</p> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* longjmp example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;setjmp.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">jmp_buf</code> <code class=\"cpp plain\">env;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">retVal = 0;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* jmp_buf保存当前环境 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( (retVal = </code><code class=\"cpp functions bold\">setjmp</code><code class=\"cpp plain\">(env)) == 0 ) { </code><code class=\"cpp comments\">/* :-) */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\\n\"</code><code class=\"cpp plain\">, retVal);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* :-) 跳转. 跳转后setjmp返回1 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">longjmp</code><code class=\"cpp plain\">(env, 1);</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\\n\"</code><code class=\"cpp plain\">, retVal);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>0</p><p>1</p> </div>', '<div class=\"item_content alert\">\n<p>调用longjmp函数时不能使setjmp函数返回０，如果val为0，则setjmp函数返回１。longjmp函数从来不返回，因为它调用后就跳转到setjmp函数保存的堆栈处，恢复堆栈开始执行，所以longjmp函数不会返回。</p> </div>'),
(63, 'signal()函数', '信号函数', '<div class=\"item_content\">\n							设置信号处理方式						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;signal.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">(*</code><code class=\"cpp functions bold\">signal</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sig, </code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">(*func)(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">)))(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>sig：表示一个信号代码，信号代码有如下情况：</p><p>SIGABRT 异常终止（abort函数产生）。</p><p>SIGFPE<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span>浮点错误（0作为除数产生的错误，非法的操作）。</p><p>SIGILL<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span>非法操作（指令）。</p><p>SIGINT<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span>交互式操作产生的信号（如CTRL - C）。</p><p>SIGSEGV<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span>无效访问存储（片段的非法访问，内存非法访问）。</p><p>SIGTERM<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span>终止请求。</p><p><br/></p><p>func：处理信号的函数。</p><p>如果func等于SIG_DFL，则表示调用默认的处理函数；</p><p>如果等于SIG_IGN，则表示这个信号被忽略（不做处理）；</p><p>如果func是用户自定义的函数，则会先调用默认的处理函数，再调用用户自己定义的函数。 </p><p>自定义函数，有一个参数，参数类型为int，用来表示信号代码（暗号类别）。同时，函数必须以return、abort、exit 或 longjump等语句结束。当自定义函数运行结束，程序会继续从被终止的地方继续运行。（除非信号是SIGFPE导致结果未定义，则可能无法继续运行）</p> </div>', '<div class=\"item_content\">\n<p>如果调用signal函数成功，则会返回一个指针，该指针指向为所指定的信号类别的所预先定义的信号处理器。 </p><p>如果调用失败，则会返回一个SIG_ERR，同时errno的值也会被相应的改变。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* signal example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;signal.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">sig_catch(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sig);</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 设置SIGABRT信号处理函数 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(SIG_ERR == </code><code class=\"cpp functions bold\">signal</code><code class=\"cpp plain\">(SIGABRT, sig_catch)) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"error.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 发送SIGABRT信号 */</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">raise</code><code class=\"cpp plain\">(SIGABRT);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp comments\">/** SIGABRT信号处理 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">sig_catch(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sig) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"signal: %d\\n\"</code><code class=\"cpp plain\">, sig);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>signal: 22</p> </div>', ''),
(64, 'raise()函数', '信号函数', '<div class=\"item_content\">\n							向正在执行的程序发送信号sig						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;signal.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">raise</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sig);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>sig：表示一个信号代码，信号代码有如下情况：</p><p>SIGABRT 异常终止（abort函数产生）。</p><p>SIGFPE<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span>浮点错误（0作为除数产生的错误，非法的操作）。</p><p>SIGILL<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span>非法操作（指令）。</p><p>SIGINT<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span>交互式操作产生的信号（如CTRL - C）。</p><p>SIGSEGV<span class=\"Apple-tab-span\" style=\"white-space:pre\"></span>无效访问存储（片段的非法访问，内存非法访问）。</p><p>SIGTERM<span class=\"Apple-tab-span\" style=\"white-space: pre;\"></span>终止请求。</p> </div>', '<div class=\"item_content\">\n<p>如果发送成功返回0，否则就返回一个非0值。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* signal example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;signal.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">sig_catch(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sig);</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 设置SIGABRT信号处理函数 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(SIG_ERR == </code><code class=\"cpp functions bold\">signal</code><code class=\"cpp plain\">(SIGABRT, sig_catch)) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"error.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 发送SIGABRT信号 */</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">raise</code><code class=\"cpp plain\">(SIGABRT);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp comments\">/** SIGABRT信号处理 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">sig_catch(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sig) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"signal: %d\\n\"</code><code class=\"cpp plain\">, sig);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>signal: 22</p> </div>', ''),
(65, 'va_start()函数', '可变参数函数', '<div class=\"item_content\">\n							获取参数列表中的参数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdarg.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp functions bold\">va_start</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">va_list</code> <code class=\"cpp plain\">ap, last_arg);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>ap：va_list是一个字符指针，可以理解为指向当前参数的一个指针，取参必须通过这个指针进行；</p><p>last_arg：在变参表前面紧挨着的一个变量,即\"...\"之前的那个参数。</p> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* va_start example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdarg.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Summation(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">, ...);</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">result;</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">result = Summation(3, 1, 2, 3);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Sum of 1, 2 and 3 = %d.\\n\"</code><code class=\"cpp plain\">, result);</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">result = Summation(5, 2, 3, 4, 5, 6);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Sum of 2, 3, 4, 5 and 6 = %d.\\n\"</code><code class=\"cpp plain\">, result);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp comments\">/**</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp comments\">* @brief 求和</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp comments\">* @param[in] count 参数个数</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp comments\">* @param[in] ... 变长参数</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp comments\">* @return 和</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp comments\">*/</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Summation(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">count, ...) {</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">va_list</code> <code class=\"cpp plain\">ap;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sum = 0;</code></div><div class=\"line number32 index31 alt1\"> </div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">va_start</code><code class=\"cpp plain\">(ap, count);</code></div><div class=\"line number34 index33 alt1\"> </div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; count; i++ ) {</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">sum += </code><code class=\"cpp functions bold\">va_arg</code><code class=\"cpp plain\">(ap, </code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">);</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number38 index37 alt1\"> </div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">va_end</code><code class=\"cpp plain\">(ap);</code></div><div class=\"line number40 index39 alt1\"> </div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">sum;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Sum of 1, 2 and 3 = 6.</p><p>Sum of 2, 3, 4, 5 and 6 = 20.</p> </div>', '');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(66, 'va_arg()函数', '可变参数函数', '<div class=\"item_content\">\n							获取参数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdarg.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">type </code><code class=\"cpp functions bold\">va_arg</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">va_list</code> <code class=\"cpp plain\">ap, type);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>ap：va_list是一个字符指针，可以理解为指向当前参数的一个指针，取参必须通过这个指针进行；</p><p>type：获取的参数的指定类型。</p> </div>', '<div class=\"item_content\">\n<p>返回这个指定类型的值</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* va_arg example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdarg.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Summation(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">, ...);</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">result;</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">result = Summation(3, 1, 2, 3);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Sum of 1, 2 and 3 = %d.\\n\"</code><code class=\"cpp plain\">, result);</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">result = Summation(5, 2, 3, 4, 5, 6);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Sum of 2, 3, 4, 5 and 6 = %d.\\n\"</code><code class=\"cpp plain\">, result);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp comments\">/**</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp comments\">* @brief 求和</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp comments\">* @param[in] count 参数个数</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp comments\">* @param[in] ... 变长参数</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp comments\">* @return 和</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp comments\">*/</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Summation(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">count, ...) {</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">va_list</code> <code class=\"cpp plain\">ap;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sum = 0;</code></div><div class=\"line number32 index31 alt1\"> </div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">va_start</code><code class=\"cpp plain\">(ap, count);</code></div><div class=\"line number34 index33 alt1\"> </div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; count; i++ ) {</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">sum += </code><code class=\"cpp functions bold\">va_arg</code><code class=\"cpp plain\">(ap, </code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">);</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number38 index37 alt1\"> </div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">va_end</code><code class=\"cpp plain\">(ap);</code></div><div class=\"line number40 index39 alt1\"> </div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">sum;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Sum of 1, 2 and 3 = 6.</p><p>Sum of 2, 3, 4, 5 and 6 = 20.</p> </div>', ''),
(67, 'va_end()函数', '可变参数函数', '<div class=\"item_content\">\n							关闭ap指针						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdarg.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp functions bold\">va_end</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">va_list</code> <code class=\"cpp plain\">ap);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>ap：指向当前参数的指针</p> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* va_end example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdarg.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Summation(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">, ...);</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">result;</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">result = Summation(3, 1, 2, 3);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Sum of 1, 2 and 3 = %d.\\n\"</code><code class=\"cpp plain\">, result);</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">result = Summation(5, 2, 3, 4, 5, 6);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Sum of 2, 3, 4, 5 and 6 = %d.\\n\"</code><code class=\"cpp plain\">, result);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp comments\">/**</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp comments\">* @brief 求和</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp comments\">* @param[in] count 参数个数</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp comments\">* @param[in] ... 变长参数</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp comments\">* @return 和</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp comments\">*/</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Summation(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">count, ...) {</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">va_list</code> <code class=\"cpp plain\">ap;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sum = 0;</code></div><div class=\"line number32 index31 alt1\"> </div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">va_start</code><code class=\"cpp plain\">(ap, count);</code></div><div class=\"line number34 index33 alt1\"> </div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; count; i++ ) {</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">sum += </code><code class=\"cpp functions bold\">va_arg</code><code class=\"cpp plain\">(ap, </code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">);</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number38 index37 alt1\"> </div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">va_end</code><code class=\"cpp plain\">(ap);</code></div><div class=\"line number40 index39 alt1\"> </div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">sum;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Sum of 1, 2 and 3 = 6.</p><p>Sum of 2, 3, 4, 5 and 6 = 20.</p> </div>', ''),
(68, 'clearerr()函数', '输入和输出函数', '<div class=\"item_content\">\n							使文件错误标志和文件结束标志置为0						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp functions bold\">clearerr</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：要复位的文件指针</p> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* clearerr example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ch;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"w\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code> <code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败: %s\\n\"</code><code class=\"cpp plain\">,</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">filename, </code><code class=\"cpp functions bold\">strerror</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">errno</code><code class=\"cpp plain\">));</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ch = </code><code class=\"cpp functions bold\">fgetc</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 产生错误 */</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fputc</code><code class=\"cpp plain\">(ch, fp);</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 检查文件错误 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"错误: ferror(fp) = %d\\n\"</code><code class=\"cpp plain\">, </code><code class=\"cpp functions bold\">ferror</code><code class=\"cpp plain\">(fp));</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 复位错误标志 */</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">clearerr</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number28 index27 alt1\"> </div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 检查文件错误 */</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"复位后: ferror(fp) = %d\\n\"</code><code class=\"cpp plain\">, </code><code class=\"cpp functions bold\">ferror</code><code class=\"cpp plain\">(fp));</code></div><div class=\"line number31 index30 alt2\"> </div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number33 index32 alt2\"> </div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>错误: ferror(fp) = 32</p><p>复位后: ferror(fp) = 0</p> </div>', '<div class=\"item_content alert\">\n<p>只要出现错误标志，就一直保留，直到对同一文件调用clearerr函数或rewind函数，或任何一个输入输出函数；</p><p>clearerr函数与ferror函数应该配合使用，通过ferror函数检测出文件有错误标志后要用clearerr函数复位错误标志。</p> </div>'),
(69, 'fclose()函数', '输入和输出函数', '<div class=\"item_content\">\n							使文件错误标志和文件结束标志置为0						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：要关闭的文件指针</p> </div>', '<div class=\"item_content\">\n<p>如果流成功关闭，fclose返回0，否则返回EOF（-1），并把错误代码存到errno.</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* clearerr example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp comments\">/* fclose example */</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*writeline = </code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"w\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败！\\n\"</code><code class=\"cpp plain\">, filename);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(EXIT_FAILURE);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 写内容至文件中 */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fputs</code><code class=\"cpp plain\">(writeline, fp);</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>sample.txt文件内容如下：</p><p>www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>使用fclose()函数就可以把缓冲区内最后剩余的数据输出到磁盘文件中，并释放文件指针和有关的缓冲区。</p> </div>'),
(70, 'feof()函数', '输入和输出函数', '<div class=\"item_content\">\n							检查文件是否读到了文件尾						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">feof</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：要检查的文件指针</p> </div>', '<div class=\"item_content\">\n<p>如果已到文件尾则返回非零值, 其他情况返回0.</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* feof example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define N 256</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">readline[N] = {</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"r\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code> <code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败: %s\\n\"</code><code class=\"cpp plain\">,</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">filename, </code><code class=\"cpp functions bold\">strerror</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">errno</code><code class=\"cpp plain\">));</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 判断文件是否结束 */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"读取前: feof(fp) = %d\\n\"</code><code class=\"cpp plain\">, </code><code class=\"cpp functions bold\">feof</code><code class=\"cpp plain\">(fp));</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 读取文件 */</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">fgets</code><code class=\"cpp plain\">(readline, N, fp) != NULL );</code></div><div class=\"line number26 index25 alt1\"> </div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 判断文件是否结束 */</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"读取后: feof(fp) = %d\\n\"</code><code class=\"cpp plain\">, </code><code class=\"cpp functions bold\">feof</code><code class=\"cpp plain\">(fp));</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 复位错误标志 */</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">clearerr</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number32 index31 alt1\"> </div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 判断文件是否结束 */</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"复位后: feof(fp) = %d\\n\"</code><code class=\"cpp plain\">, </code><code class=\"cpp functions bold\">feof</code><code class=\"cpp plain\">(fp));</code></div><div class=\"line number35 index34 alt2\"> </div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number37 index36 alt2\"> </div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>读取前: feof(fp) = 0</p><p>读取后: feof(fp) = 16</p><p>复位后: feof(fp) = 0</p> </div>', '<div class=\"item_content alert\">\n<p>feof()函数与EOF区别：</p><p>EOF是End Of File 的缩写，是c语言中标准库中定义的宏，定义为：#define  EOF  (-1)；  </p><p>feof()用于测试流文件的结束，有宏和函数两种定义：</p><p>宏定义： #define feof(_stream)  ((_stream)-&gt;_flag &amp; _IOEOF)，其中_IOEOF的为：#define _IOEOF 0x0010</p><p>函数定义：int feof( FILE *stream );</p><p>EOF的值为-1，是int类型数据，在32位系统中，可以表示为0xFFFFFFFF; EOF 不是一个字符，也不是文件中实际存在的内容。EOF不但能表示读文件到了结尾这一状态，它还能表示 I/O 操作中的读、写错误（可以用 ferror() 来检测）以及其它一些关联操作的错误状态；</p><p>feof()只用于测试流文件的结束，当到达结尾时，返回非0；当文件内部位置指针指向文件结束时，并未立即置位FILE结构中的文件结束标记，只有再执行一次读文件操作，才会置位结束标志，此后调用feof才会返回为真。</p><p>函数如fgetc或getc返回EOF并不一定表示文件结束，当读取文件出错时也会返回EOF，仅凭返回-1就认为文件结束是错误的；正因为如此，我们需要feof()来判断文件是否结束，当然用feof()来判断文件结束时也需要判断读取操作是否出错，这时可以用ferror()来判断，当其为真时表示有错误发生。在实际的程序中，应该每执行一次文件操作，就用用ferror函数检测是否出错。</p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(71, 'ferror()函数', '输入和输出函数', '<div class=\"item_content\">\n							检查文件是否有错误						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">ferror</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：要检查的文件指针</p> </div>', '<div class=\"item_content\">\n<p>如果ferror返回值为0（假），表示未出错。如果返回一个非零值，表示出错</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* ferror example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ch;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"w\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code> <code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败: %s\\n\"</code><code class=\"cpp plain\">,</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">filename, </code><code class=\"cpp functions bold\">strerror</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">errno</code><code class=\"cpp plain\">));</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ch = </code><code class=\"cpp functions bold\">fgetc</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 产生错误 */</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fputc</code><code class=\"cpp plain\">(ch, fp);</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 检查文件错误 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"错误: ferror(fp) = %d\\n\"</code><code class=\"cpp plain\">, </code><code class=\"cpp functions bold\">ferror</code><code class=\"cpp plain\">(fp));</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 复位错误标志 */</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">clearerr</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number28 index27 alt1\"> </div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 检查文件错误 */</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"复位后: ferror(fp) = %d\\n\"</code><code class=\"cpp plain\">, </code><code class=\"cpp functions bold\">ferror</code><code class=\"cpp plain\">(fp));</code></div><div class=\"line number31 index30 alt2\"> </div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number33 index32 alt2\"> </div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>错误: ferror(fp) = 32</p><p>复位后: ferror(fp) = 0</p> </div>', '<div class=\"item_content alert\">\n<p>对同一个文件每一次调用输入输出函数，均产生一个新的ferror函数值，因此，应当在调用一个输入输出函数后立即检查ferror函数的值，否则信息会丢失。在执行fopen函数时，ferror函数的初始值自动置为0。</p> </div>'),
(72, 'fflush()函数', '输入和输出函数', '<div class=\"item_content\">\n							清除读写缓冲区						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">fflush</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>指向缓冲区内的数据要写回的文件</p> </div>', '<div class=\"item_content\">\n<p>如果成功刷新,fflush返回0。指定的流没有缓冲区或者只读打开时也返回0值。返回EOF指出一个错误。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* fflush example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">MySleep(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n);</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">buf[BUFSIZ];</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将缓冲区与标准输出关联 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">setbuf</code><code class=\"cpp plain\">(stdout, buf);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 此时\"cyuyan100\\n\"被缓冲 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"cyuyan100\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 延迟 */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">MySleep(100000);</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 刷新缓冲区，此时输出\"cyuyan100\\n\"*/</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fflush</code><code class=\"cpp plain\">(stdout);</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number26 index25 alt1\"> </div><div class=\"line number27 index26 alt2\"><code class=\"cpp comments\">/* 时间延迟 */</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">MySleep(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n) {</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; n * 5000; i++ ); </code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>cyuyan100</p> </div>', '<div class=\"item_content alert\">\n<p>【函数说明】</p><p>fflush()会强迫将缓冲区内的数据写回参数stream指定的文件中. 如果参数stream为NULL,fflush()会将所有打开的文件数据更新.</p><p><br/></p><p>fflush(stdin)刷新标准输入缓冲区，把输入缓冲区里的东西丢弃[非标准]</p><p>如果stream指向输出流或者更新流（update stream），并且这个更新流最近执行的操作不是输入，那么flush函数将把任何未被写入的数据写入stream指向的文件（如标准输出文件stdout）。否则，flush函数的行为是不确定的。fflush（NULL）清空所有输出流和上面提到的更新流。如果发生写错误，flush函数会给那些流打上错误标记，并且返回EOF，否则返回0。</p><p>由此可知，如果stream指向输入流（如 stdin），那么 fflush 函数的行为是不确定的。故而使用 fflush(stdin)是不正确的。</p><p><br/></p><p>fflush(stdout)清空输出缓冲区，把输出缓冲区里的东西打印到标准输出设备上</p><p>标准输出是以『行』为单位进行的，也即碰到\\n才打印数据到屏幕。这就可能造成延时，如printf(\"。。。。。。。。。。。\");后面不加flush(stdout)；在某些平台上就可能迟迟看不到内容打印，因为它没有回车。这时候，fflush(stdout)就起到及时输出的作用。</p> </div>'),
(73, 'fgetpos()函数', '输入和输出函数', '<div class=\"item_content\">\n							依据当前文件的句柄，获取当前访问指针位置信息						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">fgetpos</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream,</code><code class=\"cpp color1 bold\">fpos_t</code> <code class=\"cpp plain\">*pos);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：当前文件指针；</p><p>pos：存放当前文件指针所指位置。</p> </div>', '<div class=\"item_content\">\n<p>成功返回0，否则返回非0，并设置errno（EBADF：这意味着的流不是有效指针的文件也不可访问，EINVAL：表示stream值或pos值无效）。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* fgetpos example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">fpos_t</code> <code class=\"cpp plain\">pos_first, pos_writed;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"w+\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败: %s\\n\"</code><code class=\"cpp plain\">,</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">filename, </code><code class=\"cpp functions bold\">strerror</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">errno</code><code class=\"cpp plain\">));</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 获取文件指针指示的位置 */</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fgetpos</code><code class=\"cpp plain\">(fp, &amp;pos_first);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"file position indicator: %ld\\n\"</code><code class=\"cpp plain\">, (</code><code class=\"cpp color1 bold\">long</code><code class=\"cpp plain\">)pos_first);</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 写入 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fputs</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">,fp);</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 再次获取文件指针指示的位置*/</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fgetpos</code><code class=\"cpp plain\">(fp, &amp;pos_writed);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"file position indicator: %ld\\n\"</code><code class=\"cpp plain\">, (</code><code class=\"cpp color1 bold\">long</code><code class=\"cpp plain\">)pos_writed);</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 获取文件指针最初指示的位置 */</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">fsetpos</code><code class=\"cpp plain\">(fp, &amp;pos_first) == 0) {</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"first file position indicator: %ld\\n\"</code><code class=\"cpp plain\">, (</code><code class=\"cpp color1 bold\">long</code><code class=\"cpp plain\">)pos_first);</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"获得文件指针位置失败.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number37 index36 alt2\"> </div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>file position indicator: 0</p><p>file position indicator: 17</p><p>first file position indicator: 0</p> </div>', '<div class=\"item_content alert\">\n<p>fgetops/fsetops和ftell/fseek之间区别：</p><p>ftell()和fseek()用长整型表示文件内的偏移 (位置), 因此, 偏移量被限制在20亿(2^31-1) 以内。</p><p>而新的fgetpos()和fsetpos()函数使用了一个特殊的类型定义fpos_t来表示偏移量。这个类型会适当选择, 因此, fgetpos()和fsetpos可以表示任意大小的文件偏移。</p><p>fgetpos()和fsetpos()也可以用来记录多字节流式文件的状态。</p> </div>'),
(74, 'fgetc()函数', '输入和输出函数', '<div class=\"item_content\">\n							文件指针stream指向的文件中读取一个字符，读取一个字节后，光标位置后移一个字节。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">fgetc</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：指向欲从中读取字符的文件指针</p> </div>', '<div class=\"item_content\">\n<p>返回所读取的一个字节。如果读到文件末尾或者读取出错时返回EOF。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* fgetc example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/*sample.txt内容为\"www.cyuyan100.com\"*/</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ch;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"r\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败！\\n\"</code><code class=\"cpp plain\">, filename);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(EXIT_FAILURE);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 读取文件并显示 */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(( ch = </code><code class=\"cpp functions bold\">fgetc</code><code class=\"cpp plain\">(fp)) != EOF ) {</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">putchar</code><code class=\"cpp plain\">(ch);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>若读到文件尾或出现错误时，它就返回EOF，须通过ferror或feof来区分这两种情况。</p> </div>'),
(75, 'fgets()函数', '输入和输出函数', '<div class=\"item_content\">\n							使文件错误标志和文件结束标志置为0						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">fgets</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*buf,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">bufsize,</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>buf: 指向用来存储所得数据的地址。</p><p>bufsize: 指明存储数据的大小。</p><p>stream: 将要读取的文件流。</p> </div>', '<div class=\"item_content\">\n<p>成功将返回buf，失败或读到文件结尾返回NULL</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* fgets example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define N 256</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/*sample.txt内容为\"www.cyuyan100.com\"*/</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">readline[N] = {</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"r\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败！\\n\"</code><code class=\"cpp plain\">, filename);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(EXIT_FAILURE);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 读取文件并显示 */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">fgets</code><code class=\"cpp plain\">(readline, N, fp) != NULL ) {</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(readline);</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number28 index27 alt1\"> </div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>不能直接通过fgets的返回值来判断函数是否是出错而终止的，应该借助feof函数或者ferror函数来判断。</p><p>stream文件流指针体指向文件内容地址的偏移原则</p><p>如果使用fgets()读取某个文件，第一次读取的bufsize为5，而文件的第一行有10个字符（算上\'\\n\'），那么读取文件的指针会偏移至当前读取完的这个字符之后的位置。也就是第二次再用fgets()读取文件的时候，则会继续读取其后的字符。而，如果使用fgets() 读取文件的时候bufsize大于该行的字符总数加2（多出来的两个，一个保存文件本身的\'\\n\'换行，一个保存字符串本身的结束标识\'\\0\'），文件并不会继续读下去，仅仅只是这一行读取完，随后指向文件的指针会自动偏移至下一行。</p><p>例：</p><p>如果一个文件的当前位置的文本如下</p><p>Love, I Have</p><p>Since you can do it.</p><p>如果用fgets(str1,6,file1);去读取</p><p>则执行后str1 = \"Love,\" ，读取了6-1=5个字符</p><p>这个时候再执行fgets(str1,20,file1)则执行后str1 = \" I Have\\n\"</p><p>而如果</p><p>fgets(str1,23,file1);</p><p>则执行str1=\"Love ,I Have\"，读取了一行(包括行尾的\'\\n\',并自动加上字符串结束符\'\\0\')，当前文件位置移至下一行，虽然23大于当前行上字符总和，可是不会继续到下一行。而下一次调用fgets()继续读取的时候是从下一行开始读。</p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(76, 'fopen()函数', '输入和输出函数', '<div class=\"item_content\">\n							打开文件						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename,</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*mode);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>filename：欲打开的文件路径及文件名；</p><p>mode：代表着流形态，有下列几种形态字符串:</p><p>r 以只读方式打开文件，该文件必须存在。</p><p>r+ 以可读写方式打开文件，该文件必须存在。</p><p>rb+ 读写打开一个二进制文件，允许读写数据，文件必须存在。</p><p>rw+ 读写打开一个文本文件，允许读和写。</p><p>w 打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失。若文件不存在则建立该文件。</p><p>w+ 打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。</p><p>a 以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留。（EOF符保留）</p><p>a+ 以附加方式打开可读写的文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾后，即文件原先的内容会被保留。（原来的EOF符不保留）</p><p>wb 只写打开或新建一个二进制文件；只允许写数据。</p><p>wb+ 读写打开或建立一个二进制文件，允许读和写。</p><p>ab+ 读写打开一个二进制文件，允许读或在文件末追加数据。</p><p>at+ 打开一个叫string的文件，a表示append,就是说写入处理的时候是接着原来文件已有内容写入，不是从头写入覆盖掉，t表示打开文件的类型是文本文件，+号表示对文件既可以读也可以写。</p><p>上述的形态字符串都可以再加一个b字符，如rb、w+b或ab+等组合，加入b 字符用来告诉函数库以二进制模式打开文件。如果不加b，表示默认加了t，即rt,wt,其中t表示以文本模式打开文件。</p> </div>', '<div class=\"item_content\">\n<p>成功返回指向该流的文件指针，失败则返回NULL，并把错误代码存在errno中。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* fopen example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp = NULL;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*output= </code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"w\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败.\\n\"</code><code class=\"cpp plain\">, filename);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(EXIT_FAILURE);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 输出\"www.cyuyan100.com\"到sample.txt */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; 17; i++ ) {</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fputc</code><code class=\"cpp plain\">(output[i], fp);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>sample.txt文件内容为：</p><p>www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>文件操作完成后，需要将文件关闭，一定要注意，否则会造成文件所占用内存泄露和在下次访问文件时出现问题</p> </div>'),
(77, 'fprintf(()函数', '输入和输出函数', '<div class=\"item_content\">\n							按照format指定的格式将数据输出至stream指向的文件						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream,</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format,...);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：文件流；</p><p>format：格式化字符串</p> </div>', '<div class=\"item_content\">\n<p>若成功则返回输出字符数，若输出出错则返回负值。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* fprintf example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">filename[] = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">count;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"w\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"文件打开失败！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 输出 */</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">count = </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(fp, </code><code class=\"cpp string\">\"www.cyuyan100.com\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( count &lt; 0 ) {</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"输出失败！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number24 index23 alt1\"> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stdout, </code><code class=\"cpp string\">\"向%s文件输出%d字符.\\n\"</code><code class=\"cpp plain\">, filename, count);</code></div><div class=\"line number26 index25 alt1\"> </div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>向sample.txt文件输出18字符.</p> </div>', '<div class=\"item_content alert\">\n<p>printf、sprintf与fprintf的用法区别：</p><p>printf是和标准输出文件(stdout)关联的,fprintf则没有这个限制，printf(...)=fprintf(stdout,...).</p><p>fprintf是用于文件操作的，原型是int fprintf( FILE *stream, const char *format [, argument ]...);</p><p>sprintf是格式化输出到一个字符串，fprintf是格式化输出到一个stream，通常是到文件。</p> </div>'),
(78, 'fputc()函数', '输入和输出函数', '<div class=\"item_content\">\n							将字符c写到文件指针fp所指向的文件的当前写指针的位置。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">fputc</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c,</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：文件指针；</p><p>c：输出的字符量，虽然被定义为整形数，但仅用其低八位。</p> </div>', '<div class=\"item_content\">\n<p>成功返回写入的字符的ASII吗， 否则返回EOF。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* fputc example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">text[] = {</code><code class=\"cpp string\">\'c\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'y\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'u\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'y\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'a\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'n\'</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"w\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败！\\n\"</code><code class=\"cpp plain\">, filename);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(EXIT_FAILURE);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 写字符至文件 */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; 6; i++ ) {</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fputc</code><code class=\"cpp plain\">(text[i], fp);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>sample.txt文件内容为：</p><p>cyuyan</p> </div>', '<div class=\"item_content alert\">\n<p>fputc(stdout, c);和putc(c)等价</p> </div>'),
(79, 'fputs()函数', '输入和输出函数', '<div class=\"item_content\">\n							向指定的文件写入一个字符串						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">fputs</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*s,</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：文件指针；</p><p>s：字符串指针，字符串可以是字符串常量，也可以是字符数组名，或指针变量。</p> </div>', '<div class=\"item_content\">\n<p>成功写入一个字符串后，文件的位置指针会自动后移，函数返回为一个非负整数；否则返回EOF(符号常量，其值为-1)。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* fputs example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"w\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败!\\n\"</code><code class=\"cpp plain\">, filename);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(EXIT_FAILURE);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 写字符串至文件 */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fputs</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"WWW.CYUYAN100.COM\"</code><code class=\"cpp plain\">, fp);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>sample.txt文件内容为：</p><p>WWW.CYUYAN100.COM</p> </div>', '<div class=\"item_content alert\">\n<p>fputs()函数不自动写入字符串结束标记符\'\\0\'</p> </div>'),
(80, 'fread()函数', '输入和输出函数', '<div class=\"item_content\">\n							从一个文件流中读数据，最多读取nmemb个元素，每个元素size字节						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp functions bold\">fread</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*ptr,</code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">size,</code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">nmemb,</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>ptr：用于接收数据的内存地址；</p><p>size：要读写的字节数，单位是字节；</p><p>nmemb：要进行读写多少个size字节的数据项,每个元素是size字节；</p><p>stream：文件指针。</p> </div>', '<div class=\"item_content\">\n<p>成功返回实际读取到的元素个数，如果不成功或读到文件末尾返回0。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* fread example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define N 256</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* structures */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">player_tag {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">no[N];</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">name[N];</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">team[N];</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">} player;</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/*sample.dat内容为0051张三1队0055李四2队*/</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.dat\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">player p[2];</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"rb\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败: %s\\n\"</code><code class=\"cpp plain\">,</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">filename, </code><code class=\"cpp functions bold\">strerror</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">errno</code><code class=\"cpp plain\">));</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number30 index29 alt1\"> </div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; 2; i++ ) {</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fread</code><code class=\"cpp plain\">(&amp;p[i].no, 1 ,4 ,fp);</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p[i].no[4] = </code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number34 index33 alt1\"> </div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fread</code><code class=\"cpp plain\">(&amp;p[i].name, 1 ,4 ,fp);</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p[i].name[4] = </code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number37 index36 alt2\"> </div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fread</code><code class=\"cpp plain\">(&amp;p[i].team, 1 ,3 ,fp);</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p[i].team[3] = </code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number41 index40 alt2\"> </div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; 2; i++ ) {</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s, %s, %s\\n\"</code><code class=\"cpp plain\">, p[i].no, p[i].name, p[i].team);</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number45 index44 alt2\"> </div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number48 index47 alt1\"> </div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>0051, 张三, 1队</p><p>0055, 李四, 2队</p> </div>', '<div class=\"item_content alert\">\n<p>与fgets()函数区别：</p><p>fgets()函数：表示从文件中读出的字符串不超过 n-1个字符。在读入的最后一个字符后加上串结束标志\'\\0\'。</p><p>fread()函数：用于整块数据的读写函数,可用来读写一组数据，如一个数组元素，一个结构变量的值等。</p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(81, 'freopen()函数', '输入和输出函数', '<div class=\"item_content\">\n							重新分配文件指针，实现重定向。如果stream流已经打开，则先关闭该流。如果该流已经定向，则freopen将会清除该定向。此函数一般用于将一个指定的文件打开一个预定义的流：标准输入、标准输出或者标准出错。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">freopen</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename,</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*mode,</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>filename：欲打开的文件路径及文件名；</p><p>mode：代表着流形态，有下列几种形态字符串:</p><p>stream：为已打开的文件指针. </p> </div>', '<div class=\"item_content\">\n<p>如果成功则返回该指向该stream的指针,否则为NULL。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* freopen example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define N 256</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*writeline = </code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">readline[N] = {</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"w\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败.\\n\"</code><code class=\"cpp plain\">, filename);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(EXIT_FAILURE);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 输出到sample.txt */</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fputs</code><code class=\"cpp plain\">(writeline, fp);</code></div><div class=\"line number24 index23 alt1\"> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 以\"r\"重新打开文件 */</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">freopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"r\"</code><code class=\"cpp plain\">, fp)) == NULL) {</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s重新打开失败.\\n 错误原因:%s\"</code><code class=\"cpp plain\">,</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">filename, </code><code class=\"cpp functions bold\">strerror</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">errno</code><code class=\"cpp plain\">));</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(EXIT_FAILURE);</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number31 index30 alt2\"> </div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 输出文件内容 */</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fgets</code><code class=\"cpp plain\">(readline, N, fp);</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(readline);</code></div><div class=\"line number35 index34 alt2\"> </div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number38 index37 alt1\"> </div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>www.cyuyan100.com</p> </div>', ''),
(82, 'fscanf()函数', '输入和输出函数', '<div class=\"item_content\">\n							从stream指向的文件中执行格式化输入，fscanf遇到空格和换行时结束。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">fscanf</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream,</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format,...);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：文件指针；</p><p>format：格式化字符串。</p> </div>', '<div class=\"item_content\">\n<p><span style=\"color: rgb(51, 51, 51); font-family: arial, 宋体, sans-serif; font-size: 14px; line-height: 24px; text-indent: 28px; background-color: rgb(255, 255, 255);\">成功读入的参数的个数</span></p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* fscanf example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define DATA_MAX 1024</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* structures */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">csv_template {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x1;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x2;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x3;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">} Csv;</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i, data_count;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/*</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">sample.txt内容如下：</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">001,100.0,10</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">002,86.1,8</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">003,95.4,9</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">*/</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">file_name[] = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Csv csv[DATA_MAX];</code></div><div class=\"line number27 index26 alt2\"> </div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(file_name, </code><code class=\"cpp string\">\"r\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\"error: can\'t read file.\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number33 index32 alt2\"> </div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">i = 0;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">fscanf</code><code class=\"cpp plain\">(fp, </code><code class=\"cpp string\">\"%lf,%lf,%lf\"</code><code class=\"cpp plain\">, &amp;csv[i].x1, &amp;csv[i].x2, &amp;csv[i].x3) != EOF){</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">i++;</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">data_count = i;</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number42 index41 alt1\"> </div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; data_count; i++ ) {</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%.2f, %.2f, %.2f\\n\"</code><code class=\"cpp plain\">, csv[i].x1, csv[i].x2, csv[i].x3);</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"读取数量: %d\\n\"</code><code class=\"cpp plain\">, data_count);</code></div><div class=\"line number47 index46 alt2\"> </div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>1.00, 100.00, 10.00</p><p>2.00, 86.10, 8.00</p><p>3.00, 95.40, 9.00</p><p>读取数量: 3</p> </div>', ''),
(83, 'fseek()函数', '输入和输出函数', '<div class=\"item_content\">\n							设置文件指针stream的位置						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">fseek</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream,</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">offset,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">whence);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：文件指针；</p><p>offset：指针偏移量；</p><p>whence：偏移基准</p> </div>', '<div class=\"item_content\">\n<p>如果成功，stream将指向以whence为基准，偏移offset（指针偏移量）个字节的位置，函数返回0；</p><p>如果执行失败(比如offset超过文件自身大小)，则不改变stream指向的位置，函数返回一个非0值</p><p><br/></p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* fseek example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/*sample.txt内容为：www.cyuyan100.com*/</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"rb\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">( stderr, </code><code class=\"cpp string\">\"%s打开失败: %s\\n\"</code><code class=\"cpp plain\">,</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">filename, </code><code class=\"cpp functions bold\">strerror</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">errno</code><code class=\"cpp plain\">) );</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fseek</code><code class=\"cpp plain\">(fp, 0L, SEEK_END);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s 共 %ld 字节\\n\"</code><code class=\"cpp plain\">,filename, </code><code class=\"cpp functions bold\">ftell</code><code class=\"cpp plain\">(fp));</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number24 index23 alt1\"> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>sample.txt 共 17 字节</p> </div>', '<div class=\"item_content alert\">\n<p>不是定位文件指针，文件指针指向文件/流。位置指针指向文件内部的字节位置，随着文件的读取会移动，文件指针如果不重新赋值将不会改变指向别的文件。</p> </div>'),
(84, 'fsetpos()函数', '输入和输出函数', '<div class=\"item_content\">\n							将文件指针定位在pos指定的位置上						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">fsetpos</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream,</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">fpos_t</code> <code class=\"cpp plain\">*pos);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：文件指针；</p><p>pos：fpos_t类型的文件读或写指针的位置</p> </div>', '<div class=\"item_content\">\n<p>成功返回0，否则返回非0。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* fsetpos example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">fpos_t</code> <code class=\"cpp plain\">pos_first, pos_writed;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"w+\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败: %s\\n\"</code><code class=\"cpp plain\">,</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">filename, </code><code class=\"cpp functions bold\">strerror</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">errno</code><code class=\"cpp plain\">));</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 获取文件指针指示的位置 */</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fgetpos</code><code class=\"cpp plain\">(fp, &amp;pos_first);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"file position indicator: %ld\\n\"</code><code class=\"cpp plain\">, (</code><code class=\"cpp color1 bold\">long</code><code class=\"cpp plain\">)pos_first);</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 写入 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fputs</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">,fp);</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 再次获取文件指针指示的位置*/</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fgetpos</code><code class=\"cpp plain\">(fp, &amp;pos_writed);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"file position indicator: %ld\\n\"</code><code class=\"cpp plain\">, (</code><code class=\"cpp color1 bold\">long</code><code class=\"cpp plain\">)pos_writed);</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 获取文件指针最初指示的位置 */</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">fsetpos</code><code class=\"cpp plain\">(fp, &amp;pos_first) == 0) {</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"first file position indicator: %ld\\n\"</code><code class=\"cpp plain\">, (</code><code class=\"cpp color1 bold\">long</code><code class=\"cpp plain\">)pos_first);</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"获得文件指针位置失败.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number37 index36 alt2\"> </div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>file position indicator: 0</p><p>file position indicator: 17</p><p>first file position indicator: 0</p> </div>', '<div class=\"item_content alert\">\n<p>通常情况下，fsetpos()和fgetpos()可以一起使用，fgetpos()获取并保存当前文件的读写指针，然后对文件进行操作，必要的时候，调用fsetpos()重置文件指针，让指针回到初始的位置。</p> </div>'),
(85, 'ftell()函数', '输入和输出函数', '<div class=\"item_content\">\n							用于得到文件位置指针当前位置相对于文件首的偏移字节数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp functions bold\">ftell</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream ：已打开的文件指针</p> </div>', '<div class=\"item_content\">\n<p>返回当前文件位置</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* ftell example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/*sample.txt内容为：www.cyuyan100.com*/</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"rb\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">( stderr, </code><code class=\"cpp string\">\"%s打开失败: %s\\n\"</code><code class=\"cpp plain\">,</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">filename, </code><code class=\"cpp functions bold\">strerror</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">errno</code><code class=\"cpp plain\">) );</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fseek</code><code class=\"cpp plain\">(fp, 0L, SEEK_END);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s 共 %ld 字节\\n\"</code><code class=\"cpp plain\">,filename, </code><code class=\"cpp functions bold\">ftell</code><code class=\"cpp plain\">(fp));</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number24 index23 alt1\"> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>sample.txt 共 17 字节</p> </div>', '<div class=\"item_content alert\">\n<p>可以用fseek函数把位置指针移到文件尾,再用ftell函数获得这时位置指针距文件头的字节数,这个字节数就是文件的长度，如：fseek(fp,OL,SEEK_END);length=ftell(fp);</p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(86, 'fwrite()函数', '输入和输出函数', '<div class=\"item_content\">\n							将数据写至文件流						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp functions bold\">fwrite</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*ptr,</code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">size,</code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">nmemb,</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>ptr：指向欲写入的数据地址；</p><p>size：要写入内容的单字节数；</p><p>nmemb：要进行写入size字节的数据项的个数；</p><p>stream：已打开的文件指针。</p> </div>', '<div class=\"item_content\">\n<p>返回实际写入的数据项个数nmemb。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* fwrite example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define N 256</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* structures */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">player_tag {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">no[N];</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">name[N];</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">team[N];</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">} player;</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.dat\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">player p[] = {</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code><code class=\"cpp string\">\"0051\"</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\"张三\"</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\"1队\"</code><code class=\"cpp plain\">},</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code><code class=\"cpp string\">\"0055\"</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\"李四\"</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\"2队\"</code><code class=\"cpp plain\">}</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">};</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"w\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败: %s\\n\"</code><code class=\"cpp plain\">,</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">filename, </code><code class=\"cpp functions bold\">strerror</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">errno</code><code class=\"cpp plain\">));</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number32 index31 alt1\"> </div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 写入 */</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; 2; i++ ) {</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fwrite</code><code class=\"cpp plain\">(&amp;p[i].no, 1 ,4 ,fp);</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fwrite</code><code class=\"cpp plain\">(&amp;p[i].name, 1 ,4 ,fp);</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fwrite</code><code class=\"cpp plain\">(&amp;p[i].team, 1 ,3 ,fp);</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"写入完毕．\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number41 index40 alt2\"> </div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number44 index43 alt1\"> </div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>错误: ferror(fp) = 32</p><p>复位后: ferror(fp) = 0</p> </div>', '<div class=\"item_content alert\">\n<p>写入完毕．</p><p>sample.dat内容为：</p><p>0051张三1队0055李四2队</p> </div>'),
(87, 'getc()函数', '输入和输出函数', '<div class=\"item_content\">\n							由文件中读取一个字符						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">getc</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：文件指针</p> </div>', '<div class=\"item_content\">\n<p>从文件指针指向的文件读入一个字符，并把它作为函数值返回给int型变量ch。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* getc example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* sample.txt内容为WWW.CYUYAN100.COM */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ch;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"r\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败!\\n\"</code><code class=\"cpp plain\">, filename);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 读取内容并显示 */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(( ch = </code><code class=\"cpp functions bold\">getc</code><code class=\"cpp plain\">(fp)) != EOF ) {</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">putchar</code><code class=\"cpp plain\">(ch);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>WWW.CYUYAN100.COM</p> </div>', '<div class=\"item_content alert\">\n<p>与fgetc()区别：</p><p>fgetc和getc前者是函数，后者可以被当作宏来调用。</p> </div>'),
(88, 'getchar()函数', '输入和输出函数', '<div class=\"item_content\">\n							由标准输入设备内读进一字符						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">getchar</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<p>返回值为用户输入的第一个字符的ASCII码，若出错返回-1，且将用户输入的字符回显到屏幕</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* getchar example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define N 256</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ch;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">read_str[N] = {</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">i = 0;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 读取字符 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(( ch = </code><code class=\"cpp functions bold\">getchar</code><code class=\"cpp plain\">()) != EOF ) {</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">read_str[i++] = ch;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( i &gt;= N - 1 ){</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s\"</code><code class=\"cpp plain\">, read_str);</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>www.cyuyan100.com</p><p>^Z（win7下用ctrl+z 模拟EOF）</p><p>www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>如果用户在按回车键之前输入了不只一个字符，其他字符会保留在键盘缓冲区中，等待后续getchar()调用读取。也就是说，后续的getchat()调用不会等待用户按键，而是直接读取缓冲区中的字符，直到缓冲区的字符读取完毕后，才等待用户按键。</p><p>getchar()非真正函数，而是getc(stdin)宏定义。</p> </div>'),
(89, 'gets()函数', '输入和输出函数', '<div class=\"item_content\">\n							由标准输入设备内读进一字符串						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">gets</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*s);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>s：存取读入的字符串</p> </div>', '<div class=\"item_content\">\n<p>若成功则返回string的指针，否则返回NULL。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* gets example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define N 256</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">readline[N] = {</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">gets</code><code class=\"cpp plain\">(readline) != NULL ) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">, readline);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"字符串读取失败.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>www.cyuyan100.com （输入）</p><p>www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>从流中读取字符串，直到出现换行符或读到文件尾为止，最后加上NULL作为字符串结束。所读取的字符串暂存在给定的参数string中。</p><p>由于gets()不检查字符串string的大小，必须遇到换行符或文件结尾才会结束输入，因此容易造成缓存溢出的安全性问题，导致程序崩溃，可以使用fgets()代替，fgets会指定大小，如果超出数组大小，会自动根据定义数组的长度截断。。</p> </div>'),
(90, 'perror()函数', '输入和输出函数', '<div class=\"item_content\">\n							打印最近一次系统错误信息						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp functions bold\">perror</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*s);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>s:为要输出的错误信息</p> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* perror example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"no_exsists_file\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*message = </code><code class=\"cpp string\">\"发生错误\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"r\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">perror</code><code class=\"cpp plain\">(message);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>发生错误: No such file or directory</p> </div>', '<div class=\"item_content alert\">\n<p>perror()用来将上一个函数发生错误的原因输出到标准错误(stderr)。参数s所指的字符串会先打印出，后面再加上错误原因字符串，此错误原因依照全局变量errno 的值来决定要输出的字符串。</p><p>在库函数中有个errno变量，每个errno值对应着以字符串表示的错误类型。当你调用\"某些\"函数出错时，该函数已经重新设置了errno的值。perror函数只是将你输入的一些信息和现在的errno所对应的错误一起输出。</p> </div>'),
(91, 'printf()函数', '输入和输出函数', '<div class=\"item_content\">\n							格式化输出函数, 一般用于向标准输出设备按规定格式输出信息。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format,...);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>format：格式控制字符串</p><p>格式控制串可由格式字符串和非格式字符串两种组成。</p><p>格式字符串是以%开头的字符串，一般形式为：</p><p>[标志][输出最小宽度][.精度][长度]类型，其中方括号[]中的项为可选项。</p><p>1、类型</p><p>类型字符用以表示输出数据的类型，其格式符和意义如下表所示：</p><p>d    以十进制形式输出带符号整数(正数不输出符号)</p><p>o    以八进制形式输出无符号整数(不输出前缀0)</p><p>x,X  以十六进制形式输出无符号整数(不输出前缀Ox)</p><p>u    以十进制形式输出无符号整数</p><p>f    以小数形式输出单、双精度实数</p><p>e,E  以指数形式输出单、双精度实数</p><p>g,G  以%f或%e中较短的输出宽度输出单、双精度实数</p><p>c    输出单个字符</p><p>s    输出字符串</p><p>2) 标志</p><p>标志字符为 -、+、# 和空格四种，其意义下表所示</p><p>-        结果左对齐，右边填空格</p><p>+        输出符号(正号或负号)</p><p>空格     输出值为正时冠以空格，为负时冠以负号</p><p>#        对c、s、d、u类无影响；对o类，在输出时加前缀o；对x类，在输出时加前缀0x；对e、g、f 类当结果有小数时才给出小数点。</p><p>3) 输出最小宽度</p><p>用十进制整数来表示输出的最少位数。若实际位数多于定义的宽度，则按实际位数输出，若实际位数少于定义的宽度则补以空格或0。</p><p>4) 精度</p><p>精度格式符以“.”开头，后跟十进制整数。本项的意义是：如果输出数字，则表示小数的位数；如果输出的是字符，则表示输出字符的个数；若实际位数大于所定义的精度数，则截去超过的部分。</p><p>5) 长度</p><p>长度格式符为h、l两种，h表示按短整型量输出，l表示按长整型量输出。</p> </div>', '<div class=\"item_content\">\n<p>函数返回实际控制输出的字符数</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* printf example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number6 index5 alt1\"> </div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a=55;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">b=1243.2341;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">d=</code><code class=\"cpp string\">\'k\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 以十进制输出 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"a=%d\\n\"</code><code class=\"cpp plain\">,a);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 以十进制输出，宽度为5</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">     </code><code class=\"cpp comments\">* 实际位数为2少于定义的宽度则补以3个空格*/</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"a=%5d\\n\"</code><code class=\"cpp plain\">,a);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 以八进制输出 */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"a=%o\\n\"</code><code class=\"cpp plain\">,a);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 以十六进制输出 */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"a=%x\\n\"</code><code class=\"cpp plain\">,a);</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 以小数形式输出 */</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"b=%f\\n\"</code><code class=\"cpp plain\">,b);</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 以小数形式输出长浮点型数 */</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"b=%lf\\n\"</code><code class=\"cpp plain\">,b);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 以小数形式输出长浮点型数 </code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">* 输出宽度为6，精度为4，</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">* 由于实际长度超过6故应该按实际位数输出，</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">* 小数位数超过4位部分被截去</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">*/</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"b=%6.4lf\\n\"</code><code class=\"cpp plain\">,b);</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 以指数形式输出 */</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"b=%e\\n\"</code><code class=\"cpp plain\">,b);</code></div><div class=\"line number34 index33 alt1\"> </div><div class=\"line number35 index34 alt2\"> </div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 输出字符量d，其中\"%5c\"指定输出宽度为5,故在输出字符p之前补加4个空格 */</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 以字符形式输出 */</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"d=%c\\n\"</code><code class=\"cpp plain\">,d);</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* \"%5c\"指定输出宽度为5,</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">     </code><code class=\"cpp comments\">* 故在输出字符p之前补加4个空格 */</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"d=%5c\\n\"</code><code class=\"cpp plain\">,d);</code></div><div class=\"line number42 index41 alt1\"> </div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>a=55</p><p>a=   55</p><p>a=67</p><p>a=37</p><p>b=1243.234131</p><p>b=1243.234131</p><p>b=1243.2341</p><p>b=1.243234e+003</p><p>d=k</p><p>d=    k</p> </div>', '<div class=\"item_content alert\">\n<p>printf输出表列中的求值顺序,不同的编译系统不一定相同，可以从左到右，也可从右到左，Turbo C是按从右到左进行的。</p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(92, 'putc()函数', '输入和输出函数', '<div class=\"item_content\">\n							将一指定字符写入指定文件中						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">putc</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c,</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>ch：要输入的字符</p><p>stream：要输入的文件。</p> </div>', '<div class=\"item_content\">\n<p>若成功，返回输入的的字符，否则返回EOF。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* putc example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">writeline[] = </code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"w\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s打开失败！\\n\"</code><code class=\"cpp plain\">, filename);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将字符串输出到文件 */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(writeline) - 1; i++ ) {</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">putc</code><code class=\"cpp plain\">(writeline[i], fp);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>sample.txt内容为：</p><p>www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>putc()、fputc()区别：</p><p>fputc和putc，两者功能相同，前者是函数，后者可以被当作宏来调用。</p> </div>'),
(93, 'putchar()函数', '输入和输出函数', '<div class=\"item_content\">\n							将指定的字符写到标准输出设备						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">putchar</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>c：要输出的字符。</p> </div>', '<div class=\"item_content\">\n<p>成功返回该字符的ASCII码值，否则返回EOF。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* putchar example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">write_str[] = </code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(write_str) - 1; i++ ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">putchar</code><code class=\"cpp plain\">(write_str[i]);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">putchar</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'\\n\'</code><code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>1. 当c为一个被单引号（英文状态下）引起来的字符时，输出该字符（注：该字符也可为转义字符）；</p><p>2. 当c为一个介于0~127（包括0及127）之间的十进制整型数时，它会被视为对应字符的ASCII代码，输出该ASCII代码对应的字符；</p><p>3. 当c为一个事先用char定义好的字符型变量时，输出该变量所指向的字符。</p><p>putchar()非真正函数，而是putc(ch, stdout)宏定义。</p> </div>'),
(94, 'puts()函数', '输入和输出函数', '<div class=\"item_content\">\n							送一字符串到标准输出流stdout中						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*s);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>s：要输出的字符串。</p> </div>', '<div class=\"item_content\">\n<p>成功返回非0值，否则返回0。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* puts example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*writeline = </code><code class=\"cpp string\">\"WWW.CYUYAN100.COM\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(writeline);</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>WWW.CYUYAN100.COM</p> </div>', '<div class=\"item_content alert\">\n<p>puts()从s的开头往stdout中输出字符，直到遇见结束标志\'\\0\'，\'\\0\'不会被输出到stdout；</p><p>与printf区别：puts()在输出字符串后会自动输出一个回车符，printf()并不自动在新行上输出每一个字符串，puts(s)函数等同于printf(\"%s\\n\",s);；</p><p>与fputs区别：fputs()需要第二个参数来说明要写的文件，同时fputs()不为输出自动添加换行符。</p> </div>'),
(95, 'remove()函数', '输入和输出函数', '<div class=\"item_content\">\n							删除指定的文件						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">remove</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>filename：要删除的文件名，可以为一目录</p> </div>', '<div class=\"item_content\">\n<p>成功则返回0，失败则返回-1，错误原因存于errno。</p><p>错误代码：</p><p>EROFS  欲写入的文件为只读文件。</p><p>EFAULT  参数filename 指针超出可存取内存空间。</p><p>ENAMETOOLONG  参数filename 太长。</p><p>ENOMEM  核心内存不足。</p><p>ELOOP  参数filename 有过多符号连接问题。</p><p>EIO I/O  存取错误。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* remove example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">filename[] = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">remove</code><code class=\"cpp plain\">(filename) == 0 ) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s删除完毕。\\n\"</code><code class=\"cpp plain\">, filename);</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s删除失败。\\n\"</code><code class=\"cpp plain\">, filename);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>sample.txt删除完毕。</p> </div>', ''),
(96, 'rename()函数', '输入和输出函数', '<div class=\"item_content\">\n							重命名文件、改变文件路径或更改目录名称						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">rename</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*oldname,</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*newname);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>oldname：旧文件名</p><p>newname：新文件名</p> </div>', '<div class=\"item_content\">\n<p>修改文件名成功则返回0，否则返回-1。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* rename example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">oldName[] = </code><code class=\"cpp string\">\"sample01.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">newName[] = </code><code class=\"cpp string\">\"sample02.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">rename</code><code class=\"cpp plain\">(oldName, newName) == 0 ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s文件名变为%s\\n\"</code><code class=\"cpp plain\">, oldName, newName);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%s文件名更改失败\\n\"</code><code class=\"cpp plain\">, oldName);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>sample01.txt文件名变为sample02.txt</p> </div>', '<div class=\"item_content alert\">\n<p>重命名文件：</p><p>如果newname指定的文件存在，则会被删除。</p><p>如果newname与oldname不在一个目录下，则相当于移动文件。</p><p><br/></p><p>重命名目录：</p><p>如果oldname和oldname都为目录，则重命名目录。</p><p>如果newname指定的目录存在且为空目录，则先将newname删除。</p><p>对于newname和oldname两个目录，调用进程必须有写权限。</p><p>重命名目录时，newname不能包含oldname作为其路径前缀。例如，不能将E:\\\\cyuyan更名为E:\\\\cyuyan\\\\sample，因为老名字（E:\\\\cyuyan）是新名字的路径前缀，因而不能将其删除。</p> </div>'),
(97, 'rewind()函数', '输入和输出函数', '<div class=\"item_content\">\n							将文件指针重新指向文件的开头，同时清除和文件流相关的错误和eof标记						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp functions bold\">rewind</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：已打开文件的指针</p> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* rewind example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/*sample.txt内容为：www.cyuyan100.com*/</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*filename = </code><code class=\"cpp string\">\"sample.txt\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">ch;</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 打开文件 */</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((fp = </code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(filename, </code><code class=\"cpp string\">\"r\"</code><code class=\"cpp plain\">)) == NULL) {</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">( stderr, </code><code class=\"cpp string\">\"%s打开失败: %s\\n\"</code><code class=\"cpp plain\">,</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">filename, </code><code class=\"cpp functions bold\">strerror</code><code class=\"cpp plain\">(</code><code class=\"cpp functions bold\">errno</code><code class=\"cpp plain\">) );</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 读取内容并显示 */</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(( ch = </code><code class=\"cpp functions bold\">fgetc</code><code class=\"cpp plain\">(fp)) != EOF ) {</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">putchar</code><code class=\"cpp plain\">(ch);</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number24 index23 alt1\"> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 回到文件开始位置 */</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">rewind</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">putchar</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'\\n\'</code><code class=\"cpp plain\">);</code></div><div class=\"line number28 index27 alt1\"> </div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 读取内容并显示 */</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(( ch = </code><code class=\"cpp functions bold\">fgetc</code><code class=\"cpp plain\">(fp)) != EOF ) {</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">putchar</code><code class=\"cpp plain\">(ch);</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number33 index32 alt2\"> </div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭文件 */</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number36 index35 alt1\"> </div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>www.cyuyan100.com</p><p>www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>rewind()相当于调用fseek(stream, 0, SEEK_SET)</p> </div>'),
(98, 'scanf()函数', '输入和输出函数', '<div class=\"item_content\">\n							按指定的格式输入值						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format[,argument,...]);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>format为格式化控制字符串，可以由三类字符构成：</p><p>1) 格式化说明符</p><p>---------------------</p><p>格式字符    说明</p><p>---------------------</p><p>%a          读入一个浮点值(仅C99有效)</p><p>%A          同上</p><p>%c          读入一个字符</p><p>%d          读入十进制整数</p><p>%i          读入十进制，八进制，十六进制整数</p><p>%o          读入八进制整数</p><p>%x          读入十六进制整数</p><p>%X          同上</p><p>%c          读入一个字符</p><p>%s          读入一个字符串</p><p>%f          读入一个浮点数</p><p>%F          同上</p><p>%e          同上</p><p>%E          同上</p><p>%g          同上</p><p>%G          同上</p><p>%p          读入一个指针</p><p>%u          读入一个无符号十进制整数</p><p>%n          至此已读入值的等价字符数</p><p>%[]         扫描字符集合</p><p>%%          读%符号</p><p><br/></p><p>另外，还有附加格式说明字符，用于追加在上面的格式说明符后面。</p><p>---------------------</p><p>修饰符    说明</p><p>---------------------</p><p>L/l       长度修饰符，输入\"长\"数据</p><p>h         长度修饰符，输入\"短\"数据</p><p>W         整型常数，指定输入数据所占宽度</p><p>*         星号，空读一个数据</p><p>hh        同h，但仅对C99有效</p><p>ll        同l，但仅对C99有效</p><p><br/></p><p>2) 空白字符</p><p>空白字符会使scanf()函数在读操作中略去输入中的一个或多个空白字符，空白符可以是space,tab,newline等等，直到第一个非空白符出现为止。</p><p><br/></p><p>3) 非空白字符</p><p>一个非空白字符会使scanf()函数在读入时剔除掉与这个非空白字符相同的字符。</p><p><br/></p><p>argument为需要读入的所有变量的地址。</p><p>注意，是变量地址，而不是变量标识符：</p><p>如果是一般的变量，通常要在变量名前加上\"&amp;\"取得地址，但输出时是用变量名。</p><p>如果是数组，用数组名就代表了该数组的首地址，输出时也是用数组名</p><p>如果是指针，直接用指针名本身，不要加上“*”，输出时也用该指针即可。</p> </div>', '<div class=\"item_content\">\n<p>成功则返回被赋值的参数的个数。如果format和argument匹配错误，或者遇到结束符，那么返回值可能小于参数的个数。</p><p>如果读取发生错误，将会返回EOF，并设置错误标识，后续可以通过ferror()检测。</p><p>如果遇到结束符，将会设置文件结束标识，后续可以通过feof()检测。</p><p>如果在读取宽字符的时候发生编码错误，那么将会把errno设置为EILSEQ。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* scanf example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,b,c;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d,%d,%d\"</code><code class=\"cpp plain\">,&amp;a,&amp;b,&amp;c); </code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d,%d,%d\\n\"</code><code class=\"cpp plain\">,a,b,c);</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>2,3,4(输入)</p><p>2,3,4</p> </div>', '<div class=\"item_content alert\">\n<p>1. 对于字符串数组或字符串指针变量，由于数组名和指针变量名本身就是地址，因此使用scanf()函数时，不需要在它们前面加上\"&amp;\"操作符。</p><p>2. 可以在格式化字符串中的\"%\"各格式化规定符之间加入一个整数，表示任何读操作中的最大位数。</p><p>3. scanf()函数中没有精度控制。</p><p>如： scanf(\"%5.2f\",&amp;a); 是非法的。不能企图用此语句输入小数为2位的实数。</p><p>4. scanf中要求给出变量地址，如给出变量名则会出错</p><p>如 scanf(\"%d\",a);是非法的，应改为scanf(\"%d\",&amp;a);才是合法的。</p><p>5. 在输入多个数值数据时，若格式控制串中没有非格式字符作输入数据之间的间隔,则可用空格，TAB或回车作间隔。</p><p>C编译在碰到空格，TAB，回车或非法数据(如对“%d”输入“12A”时，A即为非法数据)时即认为该数据结束。</p><p>6. 在输入字符数据(%c)时，若格式控制串中无非格式字符，则认为所有输入的字符均为有效字符。</p><p>例如：</p><p>scanf(\"%c%c%c\",&amp;a,&amp;b,&amp;c);</p><p>输入为：</p><p>d ef</p><p>则把\'d\'赋予a, \' (空格)\'赋予b,\'e\'赋予c。因为%c 只要求读入一个字符，后面不需要用空格作为两个字符的间隔，因此把\' \'作为下一个字符送给b。</p><p>只有当输入为：def时，才能把\'d\'赋于a,\'e\'赋予b,\'f\'赋予c。 </p><p>如果在格式控制中加入空格作为间隔，</p><p>如</p><p>scanf(\"%c %c %c\",&amp;a,&amp;b,&amp;c);</p><p>则输入时各数据之间可加空格。</p><p>7.  如果格式控制串中有非格式字符则输入时也要输入该非格式字符。</p><p>例如：</p><p>scanf(\"%d,%d,%d\",&amp;a,&amp;b,&amp;c);</p><p>其中用非格式符\",\"作间隔符，故输入时应为：</p><p>5,6,7</p><p>又如：</p><p>scanf(\"a=%d,b=%d,c=%d\",&amp;a,&amp;b,&amp;c);</p><p>则输入应为</p><p>a=5,b=6,c=7</p><p>如输入的数据与输出的类型不一致时，虽然编译能够通过，但结果将不正确。</p> </div>'),
(99, 'setbuf()函数', '输入和输出函数', '<div class=\"item_content\">\n							将指定缓冲区与特定的文件流相关联，实现操作缓冲区时直接操作文件流						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp functions bold\">setbuf</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream,</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*buf);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：文件流指针</p><p>buf：缓冲区的起始地址。</p> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* setbuf example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">MySleep(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n);</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">buf[BUFSIZ];</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将缓冲区与标准输出关联 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">setbuf</code><code class=\"cpp plain\">(stdout, buf);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 此时\"cyuyan100\\n\"被缓冲 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"cyuyan100\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 延迟 */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">MySleep(100000);</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 刷新缓冲区，此时输出\"cyuyan100\\n\"*/</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fflush</code><code class=\"cpp plain\">(stdout);</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number26 index25 alt1\"> </div><div class=\"line number27 index26 alt2\"><code class=\"cpp comments\">/* 时间延迟 */</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">MySleep(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n) {</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; n * 5000; i++ ); </code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>cyuyan100</p> </div>', '<div class=\"item_content alert\">\n<p>setbuf()和setvbuf()函数的实际意义在于：用户打开一个文件后，可以建立自己的文件缓冲区，而不必使用fopen()函数打开文件时设定的默认缓冲区。这样就可以让用户自己来控制缓冲区，包括改变缓冲区大小、定时刷新缓冲区、改变缓冲区类型、删除流中默认的缓冲区、为不带缓冲区的流开辟缓冲区等。</p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(100, 'setvbuf()函数', '输入和输出函数', '<div class=\"item_content\">\n							把缓冲区与文件流相关						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">setvbuf</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream,</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*buf,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">mode,</code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">size);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：文件流指针；</p><p>buf：缓冲区首地址；</p><p>type：缓冲区类型，内容如下：</p><p>_IOFBF (满缓冲)：当缓冲区为空时，从流读入数据。或当缓冲区满时，向流写入数据。</p><p>_IOLBF (行缓冲)：每次从流中读入一行数据或向流中写入—行数据。</p><p>_IONBF (无缓冲)：直接从流中读入数据或直接向流中写入数据，而没有缓冲区。</p><p>size：缓冲区内字节的数量。</p> </div>', '<div class=\"item_content\">\n<p>成功返回0，失败返回非0。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* setvbuf example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">MySleep(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n);</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将缓冲区与标准输出关联 */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">setvbuf</code><code class=\"cpp plain\">(stdout, NULL, _IOLBF, 256) !=0 ) {</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"关联失败.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stdout, </code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">); </code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">MySleep(100000);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stdout, </code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">); </code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将缓冲区与标准输出关联 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">setvbuf</code><code class=\"cpp plain\">(stdout, NULL, _IONBF, 0) !=0 ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"关联失败.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number28 index27 alt1\"> </div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stdout, </code><code class=\"cpp string\">\"www.cyuyan100.com\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number30 index29 alt1\"> </div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">MySleep(100000);</code></div><div class=\"line number32 index31 alt1\"> </div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stdout, </code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">); </code></div><div class=\"line number34 index33 alt1\"> </div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number37 index36 alt2\"> </div><div class=\"line number38 index37 alt1\"><code class=\"cpp comments\">/* 时间延迟 */</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">MySleep(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n) {</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; n * 5000; i++ ); </code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>www.cyuyan100.com</p><p>www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>与setbuf区别：</p><p>setbuf()函数等价于调用</p><p>setvbuf(stream, buf, buf?_IOFBF:_IONBF, BUFSIZ);</p> </div>'),
(101, 'sprintf()函数', '输入和输出函数', '<div class=\"item_content\">\n							将格式化的数据写入字符串						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">sprintf</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">* str,</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format,...);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str：要写入的字符串；</p><p>format：格式化字符串</p> </div>', '<div class=\"item_content\">\n<p>成功则返回参数str字符串长度，失败则返回-1，错误原因存于errno中。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* sprintf example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define N 256</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s[N] = {</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">name[] = </code><code class=\"cpp string\">\"张三\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">sex[] = </code><code class=\"cpp string\">\"男\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">age = 17;</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">sprintf</code><code class=\"cpp plain\">(s, </code><code class=\"cpp string\">\"姓名：%s，年龄：%d 性别：%s\"</code><code class=\"cpp plain\">, name, age, sex);</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">, s);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>姓名：张三，年龄：17 性别：男</p> </div>', '<div class=\"item_content alert\">\n<p>sprintf的作用是将一个格式化的字符串输出到一个目的字符串中，而printf是将一个格式化的字符串输出到屏幕。sprintf的第一个参数应该是目的字符串，如果不指定这个参数，执行过程中出现 \"该程序产生非法操作,即将被关闭....\"的提示。</p><p>sprintf()会根据参数format 字符串来转换并格式化数据，然后将结果复制到参数str 所指的字符串数组，直到出现字符串结束(\'\\0\')为止，如果str的长度不够，sprintf()很容易造成缓冲区溢出，带来意想不到的后果</p> </div>'),
(102, 'sscanf()函数', '输入和输出函数', '<div class=\"item_content\">\n							从字符串中读取指定格式的数据						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">sscanf</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str,</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format,...);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str：要读取数据的字符串；</p><p>format：用户指定的格式</p> </div>', '<div class=\"item_content\">\n<p>成功则返回参数数目，失败则返回-1，错误原因存于errno中。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* sscanf example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define N 256</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s[] = </code><code class=\"cpp string\">\"张三 17 男\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">name[N] = {</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">sex[N] = {</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">age;</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">sscanf</code><code class=\"cpp plain\">(s, </code><code class=\"cpp string\">\"%s %d %s\"</code><code class=\"cpp plain\">, name, &amp;age, sex);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s,%d,%s\\n\"</code><code class=\"cpp plain\">, name, age, sex);</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>张三,17,男</p> </div>', '<div class=\"item_content alert\">\n<p>sscanf()与scanf()类似，都是用于输入的，只是scanf()以键盘(stdin)为输入源，sscanf()以固定字符串为输入源。</p> </div>'),
(103, 'tmpfile()函数', '输入和输出函数', '<div class=\"item_content\">\n							以wb+形式创建一个临时二进制文件						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">* </code><code class=\"cpp functions bold\">tmpfile</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<p>返回指向指向临时文件指针</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* tmpfile example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define N 256</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">readline[N] = {</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 创建一个临时文件 */</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( (fp = </code><code class=\"cpp functions bold\">tmpfile</code><code class=\"cpp plain\">()) == NULL ) {</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"临时文件创建失败！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将字符串写入临时文件中 */</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fputs</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"www.\"</code><code class=\"cpp plain\">, fp);</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fputs</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"cyuyan100.\"</code><code class=\"cpp plain\">, fp);</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fputs</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"com\"</code><code class=\"cpp plain\">, fp);</code></div><div class=\"line number24 index23 alt1\"> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 刷新缓冲区 */</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fflush</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number27 index26 alt2\"> </div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 重置文件指针 */</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">rewind</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number30 index29 alt1\"> </div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 从临时文件读出内容 */</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">( </code><code class=\"cpp functions bold\">fgets</code><code class=\"cpp plain\">(readline, N, fp) != NULL ) {</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stdout, </code><code class=\"cpp string\">\"%s\"</code><code class=\"cpp plain\">, readline);</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number35 index34 alt2\"> </div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关闭临时文件（删除） */</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fclose</code><code class=\"cpp plain\">(fp);</code></div><div class=\"line number38 index37 alt1\"> </div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>www.cyuyan100.com</p> </div>', '<div class=\"item_content alert\">\n<p>创建的临时文件在程序退出时会被自动删除。</p> </div>'),
(104, 'tmpnam()函数', '输入和输出函数', '<div class=\"item_content\">\n							产生一个唯一的文件名						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">tmpnam</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*sptr);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>sptr：保存了所产生的文件名</p> </div>', '<div class=\"item_content\">\n<p>返回一个内部静态内存地址(保存了临时文件名)</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* tmpnam example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s[L_tmpnam + 1] = {</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">tmpnam</code><code class=\"cpp plain\">(s);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"文件名: %s\\n\"</code><code class=\"cpp plain\">, s);</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>文件名: \\s604.</p> </div>', '<div class=\"item_content alert\">\n<p>sptr必须至少有L_tmpnam大小,用来保存临时文件名,如数组 char buffer[L_tmpnam]。</p> </div>'),
(105, 'ungetc()函数', '输入和输出函数', '<div class=\"item_content\">\n							将指定字符写回文件流中						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">ungetc</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c,</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>c：要退回的字符；</p><p>stream：要退回文件流指针</p> </div>', '<div class=\"item_content\">\n<p>若该函数执行成功，返回非零值；否则，返回0。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* ungetc example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">ungetc</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'a\'</code><code class=\"cpp plain\">, stdin);</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">, </code><code class=\"cpp functions bold\">getc</code><code class=\"cpp plain\">(stdin));</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">ungetc</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'b\'</code><code class=\"cpp plain\">, stdin);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">, </code><code class=\"cpp functions bold\">getc</code><code class=\"cpp plain\">(stdin));</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">ungetc</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'c\'</code><code class=\"cpp plain\">, stdin);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">, </code><code class=\"cpp functions bold\">getc</code><code class=\"cpp plain\">(stdin));</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>abc</p> </div>', '<div class=\"item_content alert\">\n<p>ungetc是将读出的数据再次放回到缓冲区去，下一次读数据时，会再次读出来的。</p><p>不过如果把读出的数据放回到缓冲区去后，没有将缓冲区的数据读出来 就再次试图把读出的数据放回到缓冲区去---数据是放不进去的 （可以把缓冲区看做一个可变化的容器，当你把试图用ungetc()函数把读出的数据放回到缓冲区，缓冲区这个容器就为这些数据分配相应的大小空间，之后这个空间是不变的，直到你把缓冲区的数据读出去，所以你在没有释放缓冲区时，再次想往缓冲区装数据是装不进去的）</p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(106, 'vfprintf()函数', '输入和输出函数', '<div class=\"item_content\">\n							格式化输出数据至文件						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">vfprintf</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*stream,</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format,</code><code class=\"cpp color1 bold\">va_list</code> <code class=\"cpp plain\">arg);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>stream：要从中读取字符的文件流；</p><p>format：输出的格式；</p><p>arg：处理参数</p> </div>', '<div class=\"item_content\">\n<p>成功则返回实际输出的字符数, 失败则返回-1, 错误原因存于errno 中.</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* vfprintf example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdarg.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">inputError(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*function, </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format, ...);</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sex, age;</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 输入性别 */</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"请输入性別：(1:男性 2:女性)\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">, &amp;sex);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( sex != 1 &amp;&amp; sex != 2 ) {</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">inputError(</code><code class=\"cpp string\">\"main\"</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\"性别是1或2！(输入值: %d)\\n\"</code><code class=\"cpp plain\">, sex);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 输入年龄 */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"请输入年龄：\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">, &amp;age);</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( age &lt; 0 || age &gt; 150 ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">inputError(</code><code class=\"cpp string\">\"main\"</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\"年龄范围[0,150]！(输入值: %d)\\n\"</code><code class=\"cpp plain\">, age);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number28 index27 alt1\"> </div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number31 index30 alt2\"> </div><div class=\"line number32 index31 alt1\"><code class=\"cpp comments\">/**</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp comments\">* @brief 错误处理</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp comments\">* @param[IN] function 函数名</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp comments\">* @param[IN] format 格式化字符串</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp comments\">* @param[IN] ... 可变长参数</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp comments\">*/</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">inputError(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*function, </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format, ...) {</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">va_list</code> <code class=\"cpp plain\">arg;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">va_start</code><code class=\"cpp plain\">(arg, format);</code></div><div class=\"line number41 index40 alt2\"> </div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"发生错误的函数: %s\\n\"</code><code class=\"cpp plain\">, function);</code></div><div class=\"line number43 index42 alt2\"> </div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 显示错误信息 */</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">vfprintf</code><code class=\"cpp plain\">(stderr, format, arg);</code></div><div class=\"line number46 index45 alt1\"> </div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">va_end</code><code class=\"cpp plain\">(arg);</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>请输入性別：(1:男性 2:女性)</p><p>3</p><p>发生错误的函数: main</p><p>性别是1或2！(输入值: 3)</p> </div>', '<div class=\"item_content alert\">\n<p>vfprintf()会根据参数format字符串来转换并格式化数据, 然后将结果输出到参数stream指定的文件中, 直到出现字符串结束(\'\\0\')为止</p> </div>'),
(107, 'vprintf()函数', '输入和输出函数', '<div class=\"item_content\">\n							送格式化输出到stdout中						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">vprintf</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format,</code><code class=\"cpp color1 bold\">va_list</code> <code class=\"cpp plain\">arg);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>format：输出的格式；</p><p>arg：处理参数</p> </div>', '<div class=\"item_content\">\n<p>成功返回true，失败返回0.</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* vprintf example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdarg.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">DisplayAverage(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format, ...);</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">points1[] = {100, 300, 200};</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">points2[] = {5, 30, 20, 25};</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sum;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">avg1, avg2;</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 计算points1平均数 */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">sum = points1[0];</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 1; i &lt; 3; i++ ) {</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">sum += points1[i];</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">avg1 = (</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">)sum / 3.0;</code></div><div class=\"line number24 index23 alt1\"> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 显示points1平均数 */</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DisplayAverage(</code><code class=\"cpp string\">\"{%d, %d, %d} Ave1 = %.2f\\n\"</code><code class=\"cpp plain\">, </code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">points1[0], points1[1], points1[2], avg1);</code></div><div class=\"line number28 index27 alt1\"> </div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 计算points2平均数 */</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">sum = points2[0];</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 1; i &lt; 4; i++ ) {</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">sum += points2[i];</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">avg2 = (</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">)sum / 4.0;</code></div><div class=\"line number35 index34 alt2\"> </div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 显示points2平均数 */</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DisplayAverage(</code><code class=\"cpp string\">\"{%d, %d, %d, %d} Ave2 = %.2f\\n\"</code><code class=\"cpp plain\">, </code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">points2[0], points2[1], points2[2], points2[3], avg2);</code></div><div class=\"line number39 index38 alt2\"> </div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number42 index41 alt1\"> </div><div class=\"line number43 index42 alt2\"><code class=\"cpp comments\">/**</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp comments\">* @brief 显示平均数</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp comments\">* @param[IN] format 格式化字符串</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp comments\">* @param[IN] ... 可变长参数</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp comments\">* @return EXIT_SUCCESS</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">DisplayAverage(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format, ...) {</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">va_list</code> <code class=\"cpp plain\">arg;</code></div><div class=\"line number51 index50 alt2\"> </div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">va_start</code><code class=\"cpp plain\">(arg, format);</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">vprintf</code><code class=\"cpp plain\">(format, arg);</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">va_end</code><code class=\"cpp plain\">(arg);</code></div><div class=\"line number55 index54 alt2\"> </div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>{100, 300, 200} Ave1 = 200.00</p><p>{5, 30, 20, 25} Ave2 = 20.00</p> </div>', ''),
(108, 'vsprintf()函数', '输入和输出函数', '<div class=\"item_content\">\n							格式化字符串复制						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">vsprintf</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*s,</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format,</code><code class=\"cpp color1 bold\">va_list</code> <code class=\"cpp plain\">arg);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>s：要输出的缓冲区；</p><p>format：输出的格式；</p><p>arg：处理的参数</p> </div>', '<div class=\"item_content\">\n<p>成功则返回参数str字符串长度, 失败则返回-1, 错误原因存于errno中.</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* vsprintf example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdarg.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* macros */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp preprocessor\">#define N 256</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ToTSV(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*tsv, </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format, ...);</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">tsv[N] = {</code><code class=\"cpp string\">\'\\0\'</code><code class=\"cpp plain\">};</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ToTSV(tsv, </code><code class=\"cpp string\">\"%s\\t%s\\t%d\"</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\"1995\"</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\"张三\"</code><code class=\"cpp plain\">, 20);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">, tsv);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp comments\">/**</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp comments\">* @brief 将制表符复制到tsv中</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp comments\">* @param[IN]  tsv用来存储含制表符的字符串</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp comments\">* @param[IN] format 格式化字符串</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp comments\">* @param[IN] ... 可变长参数</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp comments\">* @return EXIT_SUCCESS</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ToTSV(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*tsv, </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format, ...) {</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">va_list</code> <code class=\"cpp plain\">arg;</code></div><div class=\"line number31 index30 alt2\"> </div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">va_start</code><code class=\"cpp plain\">(arg, format);</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">vsprintf</code><code class=\"cpp plain\">(tsv, format, arg);</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">va_end</code><code class=\"cpp plain\">(arg);</code></div><div class=\"line number35 index34 alt2\"> </div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>1995    张三    20</p> </div>', ''),
(109, 'abort()函数', '标准工具库函数', '<div class=\"item_content\">\n							异常终止一个进程						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp functions bold\">abort</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* abort example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"异常终止！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">abort</code><code class=\"cpp plain\">();</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>异常终止！</p> </div>', '<div class=\"item_content alert\">\n<p>中止当前进程，返回一个错误代码，错误代码的缺省值是3。</p><p>该函数产生SIGABRT信号并发送给自己，默认情况下导致程序终止不成功的终止错误代码返回到主机环境。</p><p><br/></p><p>exit()、abort()、retrun区别</p><p>exit():</p><p>在调用时，会做大部分清理工作，但是决不会销毁局部对象，因为没有stack unwinding。</p><p>会进行的清理工作包括：销毁所有static和global对象，清空所有缓冲区，关闭所有I/O通道。终止前会调用经由atexit()登录的函数，atexit如果抛出异常，则调用terminate()。</p><p>abort():</p><p>调用时，不进行任何清理工作。直接终止程序。</p><p>retrun:</p><p>调用时，进行stack unwinding，调用局部对象析构函数，清理局部对象。如果在main中，则之后再交由系统调用exit()。</p> </div>'),
(110, 'abs()函数', '标准工具库函数', '<div class=\"item_content\">\n							求绝对值(整数)						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">abs</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>要计算绝对值的数</p> </div>', '<div class=\"item_content\">\n<p>返回参数x的绝对值结果</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* abs example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">positive = 100;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">negative = -100;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"abs(%d) = %d\\n\"</code><code class=\"cpp plain\">, positive, </code><code class=\"cpp functions bold\">abs</code><code class=\"cpp plain\">(positive));</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"abs(%d) = %d\\n\"</code><code class=\"cpp plain\">, negative, </code><code class=\"cpp functions bold\">abs</code><code class=\"cpp plain\">(negative));</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p><br/></p> </div>', '<div class=\"hljs\">\n<p>abs(100) = 100</p><p>abs(-100) = 100</p> </div>', ''),
(111, 'atexit()函数', '标准工具库函数', '<div class=\"item_content\">\n							设置程序正常结束前调用的函数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">atexit</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">(*func)(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">));</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>结束前调用的函数</p> </div>', '<div class=\"item_content\">\n<p>如果执行成功则返回0, 否则返回-1, 失败原因存于errno中.</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* atexit example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">func01(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">); </code><code class=\"cpp comments\">/* 函数1 */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">func02(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">); </code><code class=\"cpp comments\">/* 函数2 */</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 注册函数 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">atexit</code><code class=\"cpp plain\">(func01); </code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">atexit</code><code class=\"cpp plain\">(func02); </code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 正常退出 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(EXIT_SUCCESS);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp comments\">/* 函数1 */</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">func01(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"func01\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number25 index24 alt2\"> </div><div class=\"line number26 index25 alt1\"><code class=\"cpp comments\">/* 函数2 */</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">func02(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"func02\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>func02</p><p>func01</p> </div>', '<div class=\"item_content alert\">\n<p>当程序通过调用exit()或从main中返回时, 参数function所指定的函数会先被调用, 然后才真正由exit()结束程序。</p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(112, 'atof()函数', '标准工具库函数', '<div class=\"item_content\">\n							将字符串转换成浮点数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">atof</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*nptr);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参与转换的字符串</p> </div>', '<div class=\"item_content\">\n<p>返回转换后的浮点数</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* atof example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">x;</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 转换 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">x = </code><code class=\"cpp functions bold\">atof</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"3.141519\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 显示结果 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"atof 转换后: %.2f\\n\"</code><code class=\"cpp plain\">, x);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>atof 转换后: 3.14</p> </div>', '<div class=\"item_content alert\">\n<p>tof()会扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或正负符号才开始做转换，而再遇到非数字或字符串结束时(\'\\0\')才结束转换，并将结果返回。参数nptr字符串可包含正负号、小数点或E(e)来表示指数部分，如123.456或123e-2。</p><p>atof()与使用strtod(nptr, (char**)NULL) 结果相同。</p> </div>'),
(113, 'atoi()函数', '标准工具库函数', '<div class=\"item_content\">\n							将字符串转换成整数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">atoi</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*nptr);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参与转换的字符串</p> </div>', '<div class=\"item_content\">\n<p>返回转换后的整型数。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* atoi example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n;</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 转换 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n = </code><code class=\"cpp functions bold\">atoi</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"1999\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 显示结果 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"atoi 转换后: %d\\n\"</code><code class=\"cpp plain\">, n);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>atoi 转换后: 1999</p> </div>', '<div class=\"item_content alert\">\n<p>atoi()会扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或正负符号才开始做转换，而再遇到非数字或字符串结束时(\'\\0\')才结束转换，并将结果返回。</p> </div>'),
(114, 'atol()函数', '标准工具库函数', '<div class=\"item_content\">\n							将字符串转换成无符号长整型数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp functions bold\">atol</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*nptr);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>参与转换的字符串</p> </div>', '<div class=\"item_content\">\n<p>返回转换后的长整型数。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* atol example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">n;</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 转换 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n = </code><code class=\"cpp functions bold\">atol</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"20141031\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/*显示结果 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"atol 转换后: %ld\\n\"</code><code class=\"cpp plain\">, n);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>atol 转换后: 20141031</p> </div>', '<div class=\"item_content alert\">\n<p>atol()会扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或正负符号才开始做转换，而再遇到非数字或字符串结束时(\'\\0\')才结束转换，并将结果返回。</p><p><br/></p><p>atol()与使用strtol(nptr, (char**)NULL, 10);结果相同。</p> </div>'),
(115, 'bsearch()函数', '标准工具库函数', '<div class=\"item_content\">\n							用折半查找法在从数组元素buf[0]到buf[num-1] 匹配参数key						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">bsearch</code><code class=\"cpp plain\">(</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*key,</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*base,</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">nmemb,</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">size,</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">(*compar)(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*)</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>key：要查找的关键字；</p><p>base：要查找的数组；</p><p>nmemb：指定数组中元素的数目；</p><p>size：每个元素的长度（以字符为单位）；</p><p>compar：指向比较函数的指针</p> </div>', '<div class=\"item_content\">\n<p>返回指向匹配项，如果没有发现匹配项，返回NULL</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* bsearch example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* functions */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">compar(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*val1, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*val2);</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ary[] = {1, 2, 3, 4, 5, 6, 7, 8};</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">key = 7, *result;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n = </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(ary) / </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(ary[0]);</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 搜索 */</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">result = (</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">*)</code><code class=\"cpp functions bold\">bsearch</code><code class=\"cpp plain\">(&amp;key, ary, n, </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">),compar);</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( result == NULL ) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"%d没有找到.\\n\"</code><code class=\"cpp plain\">, key);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d在数组的第%d位置.\\n\"</code><code class=\"cpp plain\">, </code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">key, (</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">)(result - &amp;ary[0]));</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number26 index25 alt1\"> </div><div class=\"line number27 index26 alt2\"><code class=\"cpp comments\">/**</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp comments\">* 比较函数</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp comments\">*/</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">compar(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*val1, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*val2) {</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( *(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*)val1 &lt; *(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*)val2 ) {</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">-1;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( *(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*)val1 == * (</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*)val2 ) {</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp plain\">{</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>7在数组的第6位置.</p> </div>', ''),
(116, 'calloc()函数', '标准工具库函数', '<div class=\"item_content\">\n							分配内存空间						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">calloc</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">nmemb,</code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">size);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>nmemb：内存单位个数；</p><p>size：每一单位的大小</p> </div>', '<div class=\"item_content\">\n<p>若配置成功则返回一指针，失败则返回NULL。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* calloc example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i, *ptr;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">nmemb = 9;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( (ptr = (</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*)</code><code class=\"cpp functions bold\">calloc</code><code class=\"cpp plain\">(nmemb, </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">))) == NULL ) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"内存申请失败！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_FAILURE;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; nmemb; i++ ) {</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\" %d\"</code><code class=\"cpp plain\">, ptr[i]);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 释放内存 */</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(ptr);</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p> 0 0 0 0 0 0 0 0 0</p> </div>', '<div class=\"item_content alert\">\n<p>calloc与malloc(nmemb*size);效果相同，在利用calloc()配置内存时会将内存内容初始化为0。</p> </div>'),
(117, 'div()函数', '标准工具库函数', '<div class=\"item_content\">\n							计算number/denom的商和余数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">div_t</code> <code class=\"cpp functions bold\">div</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">number,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">denom);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>number：被除数；</p><p>denom：除数</p> </div>', '<div class=\"item_content\">\n<p>返回商和余数</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* div example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n, d;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">div_t</code> <code class=\"cpp plain\">a;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n = 20;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">d = 3;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">a = </code><code class=\"cpp functions bold\">div</code><code class=\"cpp plain\">(n, d);</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d / %d = %d\\n\"</code><code class=\"cpp plain\">, n, d, a.quot);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d %% %d = %d\\n\"</code><code class=\"cpp plain\">, n, d, a.rem);</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>20 / 3 = 6</p><p>20 % 3 = 2</p> </div>', ''),
(118, 'exit()函数', '标准工具库函数', '<div class=\"item_content\">\n							结束进程执行						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">status);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>status：程序退出的返回值.</p> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* exit example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"exit example----\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(EXIT_SUCCESS);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>exit example----</p> </div>', '<div class=\"item_content alert\">\n<p>exit()用来正常终结目前进程的执行, 并把参数status返回给父进程, 而进程所有的缓冲区数据会自动写回并关闭未关闭的文件.</p> </div>'),
(119, 'free()函数', '标准工具库函数', '<div class=\"item_content\">\n							释放ptr指向的存储空间						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*ptr);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>ptr：指向先前由malloc()、calloc()或realloc()所返回的内存指针</p> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* free example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*ptr;</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((ptr = (</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">))) == NULL) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"内存申请失败!\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(EXIT_FAILURE);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 释放内存 */</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(ptr);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"释放内存．\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number17 index16 alt2\"> </div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>释放内存．</p> </div>', '<div class=\"item_content alert\">\n<p>若参数ptr为NULL，则free()不会有任何作用；</p><p>被释放的空间通常被送入可用存储区池，以后可在调用malloc、realloc以及calloc函数来再分配。</p><p><br/></p> </div>'),
(120, 'getenv()函数', '标准工具库函数', '<div class=\"item_content\">\n							从环境中取字符串,获取环境变量的值						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">getenv</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*name);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>envvar：环境变量的名称</p> </div>', '<div class=\"item_content\">\n<p>变量存在则会返回指向该内容的指针，找不到符合的环境变量名称则返回NULL。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* getenv example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*comspec;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">comspec = </code><code class=\"cpp functions bold\">getenv</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"COMSPEC\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"COMSPEC: %s\\n\"</code><code class=\"cpp plain\">, comspec);</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>COMSPEC: C:\\Windows\\system32\\cmd.exe</p> </div>', '');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(121, 'labs()函数', '标准工具库函数', '<div class=\"item_content\">\n							取长整型绝对值						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp functions bold\">labs</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">x);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>x：欲取绝对值的长整型数</p> </div>', '<div class=\"item_content\">\n<p>x的绝对值</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* labs example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">positive = 100L;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">negative = -100L;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"labs(%ld) = %ld\\n\"</code><code class=\"cpp plain\">, positive, </code><code class=\"cpp functions bold\">labs</code><code class=\"cpp plain\">(positive));</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"labs(%ld) = %ld\\n\"</code><code class=\"cpp plain\">, negative, </code><code class=\"cpp functions bold\">labs</code><code class=\"cpp plain\">(negative));</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>labs(100) = 100</p><p>labs(-100) = 100</p> </div>', ''),
(122, 'ldiv()函数', '标准工具库函数', '<div class=\"item_content\">\n							两个长整型数相除						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">ldiv_t</code> <code class=\"cpp functions bold\">ldiv</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">numer, </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">denom);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>numer：被除数</p><p>denom：除数</p> </div>', '<div class=\"item_content\">\n<p>返回商和余数</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* ldiv example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">ldiv_t</code> <code class=\"cpp plain\">output;</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">output = </code><code class=\"cpp functions bold\">ldiv</code><code class=\"cpp plain\">(100000L, 30000L);</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Quotient = %ld\\n\"</code><code class=\"cpp plain\">, output.quot);</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Remainder = %ld\\n\"</code><code class=\"cpp plain\">, output.rem);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Quotient = 3</p><p>Remainder = 10000</p> </div>', ''),
(123, 'malloc()函数', '标准工具库函数', '<div class=\"item_content\">\n							分配长度为size字节的内存块						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">size);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>size：要分配内存的大小</p> </div>', '<div class=\"item_content\">\n<p>分配成功则返回指向被分配内存的指针(此存储区中的初始值不确定)，否则返回空指针NULL</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* malloc example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*ptr, *work;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">((ptr = (</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">) * 10)) == NULL) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">fprintf</code><code class=\"cpp plain\">(stderr, </code><code class=\"cpp string\">\"申请失败.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(EXIT_FAILURE);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">work = ptr;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt; 10; i++) {</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">work[i] = i;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">, work[i]);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 释放内存 */</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(ptr);</code></div><div class=\"line number24 index23 alt1\"> </div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>0 1 2 3 4 5 6 7 8 9</p> </div>', '<div class=\"item_content alert\">\n<p>当内存不再使用时，应使用free()函数将内存块释放。</p> </div>'),
(124, 'mblen()函数', '标准工具库函数', '<div class=\"item_content\">\n							根据locale的设置确定字符的字节数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">mblen</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*s,</code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>s：要确定字节数的字符串；</p><p>n：检查前n个字符</p> </div>', '<div class=\"item_content\">\n<p>成功返回字节数，失败返回-1。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* mblen example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp preprocessor\">#include &lt;locale.h&gt;</code></div><div class=\"line number6 index5 alt1\"> </div><div class=\"line number7 index6 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str = </code><code class=\"cpp string\">\"C语言\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">size = </code><code class=\"cpp functions bold\">strlen</code> <code class=\"cpp plain\">(str);</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">setlocale</code><code class=\"cpp plain\">( LC_ALL, </code><code class=\"cpp string\">\"chinese-simplified\"</code> <code class=\"cpp plain\">);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code> <code class=\"cpp plain\">(</code><code class=\"cpp string\">\"字节数:%d\\n\"</code><code class=\"cpp plain\">, size);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">size = </code><code class=\"cpp functions bold\">mblen</code> <code class=\"cpp plain\">(str, MB_CUR_MAX);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(size != -1) {</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code> <code class=\"cpp plain\">(</code><code class=\"cpp string\">\"字符数:%d\\n\"</code><code class=\"cpp plain\">, size );</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>字节数:5</p><p>字符数:1</p> </div>', ''),
(125, 'mbstowcs()函数', '标准工具库函数', '<div class=\"item_content\">\n							把多字符转换成宽字符，即将把多字符src转换成宽字符dest，最多转换n字节。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp functions bold\">mbstowcs</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">wchar_t</code> <code class=\"cpp plain\">*dest,</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*src,</code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>dest：转换后的宽字符；</p><p>src：指向要转换的多字符；</p><p>n：最多转换字节数。</p> </div>', '<div class=\"item_content\">\n<p>成功返回的是内容个数（不包括非0字符），不成功返回(size_t)(-1)。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* mbstowcs example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*pmbnull  = NULL;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*pmb = (</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">( MB_CUR_MAX );</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">wchar_t</code> <code class=\"cpp plain\">*pwc = L</code><code class=\"cpp string\">\"Hi\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">wchar_t</code> <code class=\"cpp plain\">*pwcs = (</code><code class=\"cpp color1 bold\">wchar_t</code> <code class=\"cpp plain\">*)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">( </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">( </code><code class=\"cpp color1 bold\">wchar_t</code> <code class=\"cpp plain\">));</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Converting to multibyte string\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len = </code><code class=\"cpp functions bold\">wcstombs</code><code class=\"cpp plain\">( pmb, pwc, MB_CUR_MAX);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Characters converted %d\\n\"</code><code class=\"cpp plain\">, len);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Hex value of first multibyte character: %#.4x\\n\"</code><code class=\"cpp plain\">, pmb);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Converting back to Wide-Character string\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len = </code><code class=\"cpp functions bold\">mbstowcs</code><code class=\"cpp plain\">( pwcs, pmb, MB_CUR_MAX);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Characters converted %d\\n\"</code><code class=\"cpp plain\">, len);</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Hex value of first wide character %#.4x\\n\\n\"</code><code class=\"cpp plain\">, pwcs);  </code></div><div class=\"line number23 index22 alt2\"> </div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Converting to multibyte string</p><p>Characters converted 1</p><p>Hex value of first multibyte character: 0x6a4bf8</p><p>Converting back to Wide-Character string</p><p>Characters converted 1</p><p>Hex value of first wide character 0x6a4c38</p> </div>', ''),
(126, 'mbtowc()函数', '标准工具库函数', '<div class=\"item_content\">\n							把多字节字符转换为宽字符						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">mbtowc</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">wchar_t</code> <code class=\"cpp plain\">*dest,</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*src,</code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>dest：转换后的宽字符；</p><p>src：指向要转换的多字符；</p><p>n：最多转换字节数。</p> </div>', '<div class=\"item_content\">\n<p>成功返回的是内容个数（不包括非0字符），不成功返回(size_t)(-1)。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* mbtowc example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp preprocessor\">#include &lt;locale.h&gt;</code></div><div class=\"line number6 index5 alt1\"> </div><div class=\"line number7 index6 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str = </code><code class=\"cpp string\">\"C语言手册\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">wchar_t</code> <code class=\"cpp plain\">mb[100];</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len;</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">setlocale</code><code class=\"cpp plain\">( LC_CTYPE, </code><code class=\"cpp string\">\"chinese\"</code> <code class=\"cpp plain\">);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">len = </code><code class=\"cpp functions bold\">mblen</code><code class=\"cpp plain\">(NULL, MB_CUR_MAX); </code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">mbtowc</code><code class=\"cpp plain\">(mb, str, len*</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(str) );</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">wprintf(L</code><code class=\"cpp string\">\"%ls \\n\"</code><code class=\"cpp plain\">, mb );   </code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>（二进制输出）</p><p>???</p> </div>', ''),
(127, 'qsort()函数', '标准工具库函数', '<div class=\"item_content\">\n							利用快速排序法排列数组						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp functions bold\">qsort</code><code class=\"cpp plain\">(</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*base,</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">nmemb,</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">size,</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">(*compar)(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*)</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>base：待排序数组首地址</p><p>nmemb：数组中待排序元素数量</p><p>size：各元素的占用空间大小</p><p>compar：指向函数的指针，用于确定排序的顺序</p> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* qsort example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">values[] = {88, 56, 100, 2, 25};</code></div><div class=\"line number7 index6 alt2\"> </div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">cmpfunc (</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">* a, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">* b) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(*(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">*)a - *(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">*)b);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n;</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Before sorting the list is: \\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">( n = 0 ; n &lt; 5; n++ ) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">, values[n]);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">qsort</code><code class=\"cpp plain\">(values, 5, </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">), cmpfunc);</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\nAfter sorting the list is: \\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">( n = 0 ; n &lt; 5; n++ ) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">, values[n]);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Before sorting the list is:</p><p>88 56 100 2 25</p><p>After sorting the list is:</p><p>2 25 56 88 100</p> </div>', ''),
(128, 'rand()函数', '标准工具库函数', '<div class=\"item_content\">\n							产生一个[0,RAND_MAX]间的随机整数。						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">rand</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<p>返回一个[0,RAND_MAX]间的随机整数。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* rand example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i, n;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">srand</code><code class=\"cpp plain\">((unsigned)</code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">(NULL));</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt;= 9; i++ ) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 产生随机数 */</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">n = </code><code class=\"cpp functions bold\">rand</code><code class=\"cpp plain\">();</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 显示 */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%2d = %3d\\n\"</code><code class=\"cpp plain\">, i + 1, n);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p> 1 = 30839</p><p> 2 = 22548</p><p> 3 = 13489</p><p> 4 = 19824</p><p> 5 = 21665</p><p> 6 = 29488</p><p> 7 = 16845</p><p> 8 = 17160</p><p> 9 = 29778</p><p>10 = 3313</p> </div>', '<div class=\"item_content alert\">\n<p>系统在调用rand()之前都会自动调用srand()，如果用户在rand()之前曾调用过srand()给参数seed指定了一个值，那么 rand()就会将seed的值作为产生伪随机数的初始值；</p><p>而如果用户在rand()前没有调用过srand()，那么系统默认将1作为伪随机数的初始 值。如果给了一个定值，那么每次rand()产生的随机数序列都是一样的。</p> </div>');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(129, 'realloc()函数', '标准工具库函数', '<div class=\"item_content\">\n							更改已经配置的内存空间，即更改由malloc()函数分配的内存空间的大小						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">realloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*ptr,</code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">size);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>ptr：指向要改变大小的内存；</p><p>size：新的内存大小。</p> </div>', '<div class=\"item_content\">\n<p>如果重新分配成功则返回指向被分配内存的指针，否则返回空指针NULL。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* realloc example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* Initial memory allocation */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">str = (</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*) </code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(15);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">strcpy</code><code class=\"cpp plain\">(str, </code><code class=\"cpp string\">\"cyuyan100\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"String = %s,  Address = %u\\n\"</code><code class=\"cpp plain\">, str, str);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* Reallocating memory */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">str = (</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*) </code><code class=\"cpp functions bold\">realloc</code><code class=\"cpp plain\">(str, 25);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">strcat</code><code class=\"cpp plain\">(str, </code><code class=\"cpp string\">\".com\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"String = %s,  Address = %u\\n\"</code><code class=\"cpp plain\">, str, str);</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(str);</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>String = cyuyan100,  Address = 1461240</p><p>String = cyuyan100.com,  Address = 1446544</p> </div>', '<div class=\"item_content alert\">\n<p>新的大小一定要大于原来的大小，不然的话会导致数据丢失，不考虑数据内容，新的大小可大可小，如果size = 0, 则等价于释放内存；</p><p>先判断当前的指针是否有足够的连续空间，如果有，扩大mem_address指向的地址，并且将mem_address返回，如果空间不够，先按照newsize指定的大小分配空间，将原有数据从头到尾拷贝到新分配的内存区域，而后释放原来mem_address所指内存区域（注意：原来指针是自动释放，不需要使用free），同时返回新分配的内存区域的首地址。即重新分配存储器块的地址；</p><p>当内存不再使用时，应使用free()函数将内存块释放。</p> </div>'),
(130, 'srand()函数', '标准工具库函数', '<div class=\"item_content\">\n							初始化随机数发生器，即给rand()提供种子随机数seed						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp functions bold\">srand</code><code class=\"cpp plain\">(unsigned </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">seed);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>seed：种子随机数</p> </div>', '<div class=\"item_content\">\n<p>无</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* srand example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i, n;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">srand</code><code class=\"cpp plain\">((unsigned)</code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">(NULL));</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt;= 9; i++ ) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 产生随机数 */</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">n = </code><code class=\"cpp functions bold\">rand</code><code class=\"cpp plain\">();</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 显示 */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%2d = %3d\\n\"</code><code class=\"cpp plain\">, i + 1, n);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p> 1 = 30839</p><p> 2 = 22548</p><p> 3 = 13489</p><p> 4 = 19824</p><p> 5 = 21665</p><p> 6 = 29488</p><p> 7 = 16845</p><p> 8 = 17160</p><p> 9 = 29778</p><p>10 = 3313</p> </div>', ''),
(131, 'strtod()函数', '标准工具库函数', '<div class=\"item_content\">\n							将字符串转换成浮点数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">strtod</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*nptr,</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">**endptr);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>nptr：指向要转换浮点数的字符串；</p><p>endptr：指向后面未被识别的第一个字符。</p> </div>', '<div class=\"item_content\">\n<p>返回转换后的浮点型数</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strtod example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">str[30] = </code><code class=\"cpp string\">\"3.1415 strtod example\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*ptr;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret = </code><code class=\"cpp functions bold\">strtod</code><code class=\"cpp plain\">(str, &amp;ptr);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Number is %lf\\n\"</code><code class=\"cpp plain\">, ret);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"String is %s\"</code><code class=\"cpp plain\">, ptr);</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Number is 3.141500</p><p>String is  strtod example</p> </div>', '<div class=\"item_content alert\">\n<p>函数扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或正负符号才开始做转换，到出现非数字或字符串结束时(\'\\0\')才结束转换，并将结果返回。若endptr不为NULL，则会将遇到不合条件而终止的nptr中的字符指针由endptr传回。参数nptr字符串可包含正负号、小数点或E(e)来表示指数部分。如123.456或123e-2。</p> </div>'),
(132, 'strtol()函数', '标准工具库函数', '<div class=\"item_content\">\n							将参数nptr字符串根据参数base来转换成长整型数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp functions bold\">strtol</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*nptr,</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">**endptr,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">base);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>nptr：指向要转换长整型数的字符串；</p><p>endptr：指向后面未被识别的第一个字符；</p><p>base：基数/进制</p> </div>', '<div class=\"item_content\">\n<p>返回转换后的长整型数</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strtol example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">str[30] = </code><code class=\"cpp string\">\"20141028 strtol example\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*ptr;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret = </code><code class=\"cpp functions bold\">strtol</code><code class=\"cpp plain\">(str, &amp;ptr, 10);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Number is %ld\\n\"</code><code class=\"cpp plain\">, ret);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"String is %s\"</code><code class=\"cpp plain\">, ptr);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Number is 20141028</p><p>String is  strtol example</p> </div>', '<div class=\"item_content alert\">\n<p>参数base范围从2至36，或0。参数base代表采用的进制方式，如base值为10则采用10进制，若base值为16则采用16进制等。当base值为0时则是采用10进制做转换，但遇到如’0x’前置字符则会使用16进制做转换、遇到’0’前置字符而不是’0x’的时候会使用8进制做转换；</p><p>一开始strtol()会扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(\'\\0\')结束转换，并将结果返回。若参数endptr不为NULL，则会将遇到不合条件而终止的nptr中的字符指针由endptr返回；若参数endptr为NULL，则会不返回非法字符串；</p><p>atol()与使用strtol(nptr,(char**)NULL,10)；结果相同。</p> </div>'),
(133, 'strtoul()函数', '标准工具库函数', '<div class=\"item_content\">\n							将字符串转换成无符号长整型数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">unsigned </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">strtoull(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*nptr,</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">**endptr,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">base);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>nptr：指向要转换无符号长整型数的字符串；</p><p>endptr：指向后面未被识别的第一个字符；</p><p>base：基数/进制</p> </div>', '<div class=\"item_content\">\n<p>返回转换后的无符号长整型数</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strtoull example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">str[30] = </code><code class=\"cpp string\">\"20141028 strtoull example\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*ptr;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret = strtoull(str, &amp;ptr, 10);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Number is %lu\\n\"</code><code class=\"cpp plain\">, ret);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"String is %s\"</code><code class=\"cpp plain\">, ptr);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Number is 20141028</p><p>String is  strtoull example</p> </div>', '<div class=\"item_content alert\">\n<p>strtoul()会将参数nptr字符串根据参数base来转换成无符号的长整型数。参数base范围从2至36，或0。参数base代表采用的进制方式，如base值为10则采用10进制，若base值为16则采用16进制数等。当base值为0时会根据情况选择用哪种进制：如果第一个字符是\'0\'，就判断第二字符如果是\'x\'则用16进制，否则用8进制；第一个字符不是\'0\'，则用10进制。一开始strtoul()会扫描参数nptr字符串，跳过前面的空格字符串，直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(\'\')结束转换，并将结果返回</p> </div>'),
(134, 'system()函数', '标准工具库函数', '<div class=\"item_content\">\n							windows下发出一个DOS命令，linux执行shell命令						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*string);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>string:要系统指向的命令</p> </div>', '<div class=\"item_content\">\n<p>=-1:出现错误 </p><p>=0:调用成功但是没有出现子进程 </p><p>&gt;0:成功退出的子进程的id</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* system example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*notepad = </code><code class=\"cpp string\">\"C:\\\\windows\\\\notepad.exe\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number8 index7 alt1\"> </div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(notepad);</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>notepad.exe</p> </div>', '<div class=\"item_content alert\">\n<p>可以被system函数调用的DOS命令: </p><p>ASSOC：显示或修改文件扩展名关联。 </p><p>AT：计划在计算机上运行的命令和程序。 </p><p>ATTRIB：显示或更改文件属性。 </p><p>BREAK：设置或清除扩展式CTRL+C检查。 </p><p>CACLS：显示或修改文件的访问控制列表(ACLs)。 </p><p>CALL：从另一个批处理程序调用这一个。 </p><p>CD：显示当前目录的名称或将其更改。 </p><p>CHCP：显示或设置活动代码页数。 </p><p>CHDIR：显示当前目录的名称或将其更改。 </p><p>CHKDSK：检查磁盘并显示状态报告。 </p><p>CHKNTFS：显示或修改启动时间磁盘检查。 </p><p>CLS：清除屏幕。 </p><p>CMD：打开另一个Windows命令解释程序窗口。 </p><p>COLOR：设置默认控制台前景和背景颜色。 </p><p>COMP：比较两个或两套文件的内容。 </p><p>COMPACT：显示或更改NTFS分区上文件的压缩。 </p><p>CONVERT：将FAT卷转换成NTFS。您不能转换当前驱动器。 </p><p>COPY：将至少一个文件复制到另一个位置。 </p><p>DATE：显示或设置日期。 </p><p>DEL：删除至少一个文件。 </p><p>DIR：显示一个目录中的文件和子目录。 </p><p>DISKCOMP：比较两个软盘的内容。 </p><p>DISKCOPY：将一个软盘的内容复制到另一个软盘。 </p><p>DOSKEY：编辑命令行、调用Windows命令并创建宏。 </p><p>ECHO：显示消息，或将命令回显打开或关上。 </p><p>ENDLOCAL：结束批文件中环境更改的本地化。 </p><p>ERASE：删除至少一个文件。 </p><p>EXIT：退出CMD.EXE程序(命令解释程序)。 </p><p>FC：比较两个或两套文件，并显示不同处。 </p><p>FIND：在文件中搜索文字字符串。 </p><p>FINDSTR：在文件中搜索字符串。 </p><p>FOR：为一套文件中的每个文件运行一个指定的命令 </p><p>FORMAT：格式化磁盘，以便跟 Windows 使用。 </p><p>FTYPE：显示或修改用于文件扩展名关联的文件类型。 </p><p>GOTO：将Windows命令解释程序指向批处理程序中某个标明的行。 </p><p>GRAFTABL：启用Windows来以图像模式显示 扩展字符集。 </p><p>HELP：提供Windows命令的帮助信息。 </p><p>IF：执行批处理程序中的条件性处理。 </p><p>LABEL：创建、更改或删除磁盘的卷标。 </p><p>MD：创建目录。 </p><p>MKDIR：创建目录。 </p><p>MODE：配置系统设备。 </p><p>MORE：一次显示一个结果屏幕。 </p><p>MOVE：将文件从一个目录移到另一个目录。 </p><p>PATH：显示或设置可执行文件的搜索路径。 </p><p>PAUSE：暂停批文件的处理并显示消息。 </p><p>POPD：还原PUSHD保存的当前目录的上一个值。 </p><p>PRINT：打印文本文件。 </p><p>PROMPT：更改Windows命令提示符。 </p><p>PUSHD：保存当前目录，然后对其进行更改。 </p><p>RD：删除目录。 </p><p>RECOVER：从有问题的磁盘恢复可读信息。 </p><p>REM：记录批文件或CONFIG.SYS中的注释。 </p><p>REN：重命名文件。 </p><p>RENAME：重命名文件。 </p><p>REPLACE：替换文件。 </p><p>RMDIR：删除目录。 </p><p>SET：显示、设置或删除Windows环境变量。 </p><p>SETLOCAL：开始批文件中环境更改的本地化。 </p><p>SHIFT：更换批文件中可替换参数的位置。 </p><p>SORT：对输入进行分类。 </p><p>START：启动另一个窗口来运行指定的程序或命令。 </p><p>SUBST：将路径跟一个驱动器号关联。 </p><p>TIME：显示或设置系统时间。 </p><p>TITLE：设置CMD.EXE会话的窗口标题。 </p><p>TREE：以图形模式显示驱动器或路径的目录结构。 </p><p>TYPE：显示文本文件的内容。 </p><p>VER：显示Windows版本。 </p><p>VERIFY：告诉Windows是否验证文件是否已正确写入磁盘。 </p><p>VOL：显示磁盘卷标和序列号。 </p><p>XCOPY：复制文件和目录树</p><p><br/></p> </div>'),
(135, 'wcstombs()函数', '标准工具库函数', '<div class=\"item_content\">\n							把宽字符串转换为多字节字符串						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp functions bold\">wcstombs</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*dest,</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">wchar_t</code> <code class=\"cpp plain\">*src,</code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">n);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>dest：指向转换后的多字节字符串，该字符串大小至少为n；</p><p>src：指向待转换的宽字符串；</p><p>n：写入dest最多字符数。</p> </div>', '<div class=\"item_content\">\n<p>转换成功，返回转换的字节数（不包括非0字符），不成功返回(size_t)(-1)。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* wcstombs example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp preprocessor\">#define BUFFER_SIZE 50</code></div><div class=\"line number6 index5 alt1\"> </div><div class=\"line number7 index6 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*MB = (</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">( BUFFER_SIZE );</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">wchar_t</code> <code class=\"cpp plain\">*WC = L</code><code class=\"cpp string\">\"http://www.cyuyan100.com\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* converting wide-character string */</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret = </code><code class=\"cpp functions bold\">wcstombs</code><code class=\"cpp plain\">(MB, WC, BUFFER_SIZE);</code></div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Characters converted = %u\\n\"</code><code class=\"cpp plain\">, ret);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Multibyte character = %s\"</code><code class=\"cpp plain\">, MB);</code></div><div class=\"line number18 index17 alt1\"> </div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Characters converted = 24</p><p>Multibyte character = http://www.cyuyan100.com</p> </div>', ''),
(136, 'wctomb()函数', '标准工具库函数', '<div class=\"item_content\">\n							将一个宽字符转化为多字节字符						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp functions bold\">wctomb</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*s,</code><code class=\"cpp color1 bold\">wchar_t</code> <code class=\"cpp plain\">wc);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>s：存放转换后的多字节字符；</p><p>wc：要转换的宽字符。</p> </div>', '<div class=\"item_content\">\n<p>转换成功，返回转换的字节数（不包括非0字符），不成功返回(size_t)(-1)。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* wctomb example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"> </div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">wchar_t</code> <code class=\"cpp plain\">wc = L</code><code class=\"cpp string\">\'a\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*pmbnull = NULL;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*pmb = (</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">( </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">));</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Converting wide character:\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">i = </code><code class=\"cpp functions bold\">wctomb</code><code class=\"cpp plain\">( pmb, wc );</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Characters converted: %u\\n\"</code><code class=\"cpp plain\">, i);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Multibyte character: %.1s\\n\"</code><code class=\"cpp plain\">, pmb);</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Trying to convert when target is NULL:\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">i = </code><code class=\"cpp functions bold\">wctomb</code><code class=\"cpp plain\">( pmbnull, wc );</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Characters converted: %u\\n\"</code><code class=\"cpp plain\">, i);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* this will not print any value */</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Multibyte character: %.1s\\n\"</code><code class=\"cpp plain\">, pmbnull);</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Converting wide character:</p><p>Characters converted: 1</p><p>Multibyte character: a</p><p>Trying to convert when target is NULL:</p><p>Characters converted: 0</p><p>Multibyte character: </p> </div>', '');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(137, 'asctime()函数', '时间和日期函数', '<div class=\"item_content\">\n							将时间和日期以字符串格式表示						</div>\n', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div></div></td></tr></tbody></table> </div>\n', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">asctime</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">tm</code> <code class=\"cpp plain\">*timeptr);</code></div></div></td></tr></tbody></table> </div>\n', '<div class=\"item_content\">\n<p>timeptr：指向的tm结构的时间信息</p> </div>\n', '<div class=\"item_content\">\n<p>返回一字符串表示目前当地的时间日期</p> </div>\n', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* asctime example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp plain\">timer;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">tm</code> <code class=\"cpp plain\">*local;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*p;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">timer = </code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">(NULL);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">local = </code><code class=\"cpp functions bold\">localtime</code><code class=\"cpp plain\">(&amp;timer);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p = </code><code class=\"cpp functions bold\">asctime</code><code class=\"cpp plain\">(local);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">, p);</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n', '<div class=\"hljs\">\n<p>Thu Oct 30 00:05:10 2014</p> </div>\n', ''),
(138, 'clock()函数', '时间和日期函数', '<div class=\"item_content\">\n							将时间和日期以字符串格式表示						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div></div></td></tr></tbody></table> </div>\n', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">clock_t</code> <code class=\"cpp functions bold\">clock</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">);</code></div></div></td></tr></tbody></table> </div>\n', '<div class=\"item_content\">\n<p>无</p> </div>\n', '<div class=\"item_content\">\n<p>返回值是硬件滴答数</p> </div>\n', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* clock example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">clock_t</code> <code class=\"cpp plain\">start, end;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">long</code> <code class=\"cpp plain\">i = 10000000L;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">start = </code><code class=\"cpp functions bold\">clock</code><code class=\"cpp plain\">();</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">( i-- );</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">end = </code><code class=\"cpp functions bold\">clock</code><code class=\"cpp plain\">();</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"The time was: %f\\n\"</code><code class=\"cpp plain\">, (</code><code class=\"cpp color1 bold\">double</code><code class=\"cpp plain\">)(end - start) / CLK_TCK);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n', '<div class=\"hljs\">\n<p>The time was: 0.039000</p> </div>\n', '<div class=\"item_content alert\">\n<p>clock_t其实就是long，即长整形。要换算成秒或者毫秒，需要除以CLK_TCK或者 CLK_TCK CLOCKS_PER_SEC。比如，在VC++6.0下，这两个量的值都是1000，这表示硬件滴答1000下是1秒，因此要计算一个进程的时间，用clock()除以1000即可。</p> </div>\n'),
(139, 'ctime()函数', '时间和日期函数', '<div class=\"item_content\">\n							把日期和时间转换为字符串						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">ctime</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp plain\">*timer);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>timer：指向time_t结构的时间信息</p> </div>', '<div class=\"item_content\">\n<p>返回一字符串表示目前当地的时间日期</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* ctime example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp plain\">timer;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*p;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">timer = </code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">(NULL);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p = </code><code class=\"cpp functions bold\">ctime</code><code class=\"cpp plain\">(&amp;timer);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">, p);</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Thu Oct 30 00:14:34 2014</p> </div>', '<div class=\"item_content alert\">\n<p>与asctime()区别：</p><p>ctime()相当于asctime(localtime(timer));</p> </div>'),
(140, 'difftime()函数', '时间和日期函数', '<div class=\"item_content\">\n							计算两个时刻之间的时间差						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp functions bold\">difftime</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp plain\">time1, </code><code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp plain\">time2);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>time1、time2：需要进行比较的时间</p> </div>', '<div class=\"item_content\">\n<p>返回两个time_t型变量之间的时间间隔</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* difftime example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp plain\">first, second;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">(&amp;first);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( i = 0; i &lt;= 100000; i++ ) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">( j = 0; j&lt;= 10000; j++ );</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">( i % 10000 == 0 ) {</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">putchar</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\'-\'</code><code class=\"cpp plain\">);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">(&amp;second);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\nThe difference is: %f seconds\\n\"</code><code class=\"cpp plain\">,</code><code class=\"cpp functions bold\">difftime</code><code class=\"cpp plain\">(second,first));</code></div><div class=\"line number21 index20 alt2\"> </div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>-----------</p><p>The difference is: 2.000000 seconds</p> </div>', ''),
(141, 'gmtime()函数', '时间和日期函数', '<div class=\"item_content\">\n							把日期和时间转换为(GMT)时间						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">tm</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">gmtime</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp plain\">*timer);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>timer：系统时间</p> </div>', '<div class=\"item_content\">\n<p>返回结构tm代表目前UTC时间。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* gmtime example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp plain\">timer;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">tm</code> <code class=\"cpp plain\">*utc;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">timer = </code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">(NULL);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">utc = </code><code class=\"cpp functions bold\">gmtime</code><code class=\"cpp plain\">(&amp;timer);</code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"UTC时间: \\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%4d/\"</code><code class=\"cpp plain\">, utc-&gt;tm_year + 1900);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%2d/\"</code><code class=\"cpp plain\">, utc-&gt;tm_mon + 1);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%2d \"</code><code class=\"cpp plain\">, utc-&gt;tm_mday);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%2d:\"</code><code class=\"cpp plain\">, utc-&gt;tm_hour);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%2d:\"</code><code class=\"cpp plain\">, utc-&gt;tm_min);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%2d\"</code><code class=\"cpp plain\">, utc-&gt;tm_sec);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\" %d\\n\"</code><code class=\"cpp plain\">, utc-&gt;tm_isdst);</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>UTC时间:</p><p>2014/10/29 16:31:35 </p><p><br/></p> </div>', '<div class=\"item_content alert\">\n<p>tm的定义为：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">tm</code><code class=\"cpp plain\">{</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">tm_sec;  </code><code class=\"cpp comments\">//代表目前秒数, 正常范围为0-59, 但允许至61 秒</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">tm_min;  </code><code class=\"cpp comments\">//代表目前分数, 范围0-59</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">tm_hour;  </code><code class=\"cpp comments\">//从午夜算起的时数, 范围为0-23</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">tm_mday;  </code><code class=\"cpp comments\">//目前月份的日数, 范围01-31</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">tm_mon;  </code><code class=\"cpp comments\">//代表目前月份, 从一月算起, 范围从0-11</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">tm_year;  </code><code class=\"cpp comments\">//从1900 年算起至今的年数</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">tm_wday;  </code><code class=\"cpp comments\">//一星期的日数, 从星期一算起, 范围为0-6</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">tm_yday;  </code><code class=\"cpp comments\">//从今年1 月1 日算起至今的天数, 范围为0-365</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">tm_isdst;  </code><code class=\"cpp comments\">//日光节约时间的旗标</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">};</code></div></div></td></tr></tbody></table><p><br/></p> </div>'),
(142, 'localtime()函数', '时间和日期函数', '<div class=\"item_content\">\n							取得当地目前时间和日期						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">tm</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">gmtime</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp plain\">*timer);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>timer：需要转换的时间</p> </div>', '<div class=\"item_content\">\n<p>返回tm结构的系统时间</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* localtime example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp plain\">timer;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">tm</code> <code class=\"cpp plain\">*local;</code></div><div class=\"line number10 index9 alt1\"> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">timer = </code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">(NULL);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">local = </code><code class=\"cpp functions bold\">localtime</code><code class=\"cpp plain\">(&amp;timer); </code></div><div class=\"line number13 index12 alt2\"> </div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"本地时间: \\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%4d/\"</code><code class=\"cpp plain\">, local-&gt;tm_year + 1900);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%2d/\"</code><code class=\"cpp plain\">, local-&gt;tm_mon + 1);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%2d \"</code><code class=\"cpp plain\">, local-&gt;tm_mday);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%2d:\"</code><code class=\"cpp plain\">, local-&gt;tm_hour);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%2d:\"</code><code class=\"cpp plain\">, local-&gt;tm_min);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%2d\"</code><code class=\"cpp plain\">, local-&gt;tm_sec);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\" %d\\n\"</code><code class=\"cpp plain\">, local-&gt;tm_isdst);</code></div><div class=\"line number22 index21 alt1\"> </div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>本地时间:</p><p>2014/10/30  0:35:13 0</p> </div>', ''),
(143, 'mktime()函数', '时间和日期函数', '<div class=\"item_content\">\n							将时间结构数据转换成经过的秒数						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp functions bold\">mktime</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">tm</code> <code class=\"cpp plain\">*timeptr);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>timeptr：tm结构系统时间</p> </div>', '<div class=\"item_content\">\n<p>返回经过的秒数</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* mktime example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ret;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">tm</code> <code class=\"cpp plain\">info;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">buffer[80];</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">info.tm_year = 2014 - 1900;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">info.tm_mon = 10 - 1;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">info.tm_mday = 30;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">info.tm_hour = 0;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">info.tm_min = 0;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">info.tm_sec = 1;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">info.tm_isdst = -1;</code></div><div class=\"line number19 index18 alt2\"> </div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ret = </code><code class=\"cpp functions bold\">mktime</code><code class=\"cpp plain\">(&amp;info);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">( ret == -1 )</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Error: unable to make time using mktime\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">strftime</code><code class=\"cpp plain\">(buffer, </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(buffer), </code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">, &amp;info );</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"buffer:%s\\n\"</code><code class=\"cpp plain\">,buffer);</code></div><div class=\"line number29 index28 alt2\"> </div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number31 index30 alt2\"> </div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>buffer:10/30/14 00:00:01</p> </div>', '');
INSERT INTO `cfunction` (`ID`, `name`, `sort`, `functionread`, `headerfile`, `definitio`, `parameterization`, `returnvalue`, `example`, `result`, `state`) VALUES
(144, 'strftime()函数', '时间和日期函数', '<div class=\"item_content\">\n							将时间格式化						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp functions bold\">strftime</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*str, </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">maxsize, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*format, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">tm</code> <code class=\"cpp plain\">*timeptr);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>str：格式化后的字符串；</p><p>maxsize：str中最多存放字符个数；</p><p>format：格式命令；</p><p>timeptr：保存要格式化的时间信息</p> </div>', '<div class=\"item_content\">\n<p>返回向strDest指向的字符串中放置的字符数</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* strftime example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp color1 bold\">tm</code><code class=\"cpp plain\">* newtime;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">tmpbuf[128];</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp plain\">lt1;</code></div><div class=\"line number11 index10 alt2\"> </div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">(&amp;lt1);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">newtime=</code><code class=\"cpp functions bold\">localtime</code><code class=\"cpp plain\">(&amp;lt1);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">strftime</code><code class=\"cpp plain\">(tmpbuf,128,</code><code class=\"cpp string\">\"Today is %A,\\nday %d of %B in the year %Y.\\n\"</code><code class=\"cpp plain\">,newtime);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">,tmpbuf);</code></div><div class=\"line number16 index15 alt1\"> </div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Today is Thursday,</p><p>day 30 of October in the year 2014.</p> </div>', '<div class=\"item_content alert\">\n<p>格式命令如下：</p><p>%a 星期几的简写</p><p>%A 星期几的全称</p><p>%b 月份的简写</p><p>%B 月份的全称</p><p>%c 标准的日期的时间串</p><p>%C 年份的前两位数字</p><p>%d 十进制表示的每月的第几天</p><p>%D 月/天/年</p><p>%e 在两字符域中，十进制表示的每月的第几天</p><p>%F 年-月-日</p><p>%g 年份的后两位数字，使用基于周的年</p><p>%G 年份，使用基于周的年</p><p>%h 简写的月份名</p><p>%H 24小时制的小时</p><p>%I 12小时制的小时</p><p>%j 十进制表示的每年的第几天</p><p>%m 十进制表示的月份</p><p>%M 十时制表示的分钟数</p><p>%n 新行符</p><p>%p 本地的AM或PM的等价显示</p><p>%r 12小时的时间</p><p>%R 显示小时和分钟：hh:mm</p><p>%S 十进制的秒数</p><p>%t 水平制表符</p><p>%T 显示时分秒：hh:mm:ss</p><p>%u 每周的第几天，星期一为第一天 （值从1到7，星期一为1）</p><p>%U 第年的第几周，把星期日作为第一天（值从0到53）</p><p>%V 每年的第几周，使用基于周的年</p><p>%w 十进制表示的星期几（值从0到6，星期天为0）</p><p>%W 每年的第几周，把星期一做为第一天（值从0到53）</p><p>%x 标准的日期串</p><p>%X 标准的时间串</p><p>%y 不带世纪的十进制年份（值从0到99）</p><p>%Y 带世纪部分的十制年份</p><p>%z，%Z 时区名称，如果不能得到时区名称则返回空字符。</p><p>%% 百分号</p> </div>'),
(145, 'time()函数', '时间和日期函数', '<div class=\"item_content\">\n							取得目前的时间						</div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp plain\">*timer);</code></div></div></td></tr></tbody></table> </div>', '<div class=\"item_content\">\n<p>timer：若给定参数，则将当前时间保存到该参数中。</p> </div>', '<div class=\"item_content\">\n<p>返回从CUT（Coordinated Universal Time）时间1970年1月1日00:00:00到当前时刻的秒数。</p> </div>', '<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* time example */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#include &lt;time.h&gt;</code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* main */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">time_t</code> <code class=\"cpp plain\">seconds;</code></div><div class=\"line number9 index8 alt2\"> </div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">seconds = </code><code class=\"cpp functions bold\">time</code><code class=\"cpp plain\">(NULL);</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Hours since January 1, 1970 = %ld\\n\"</code><code class=\"cpp plain\">, seconds/3600);</code></div><div class=\"line number12 index11 alt1\"> </div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">EXIT_SUCCESS;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>', '<div class=\"hljs\">\n<p>Hours since January 1, 1970 = 392944</p> </div>', '');

-- --------------------------------------------------------

--
-- 表的结构 `intellectual`
--

CREATE TABLE `intellectual` (
  `ID` int(8) NOT NULL,
  `name` char(100) NOT NULL,
  `sort` char(225) NOT NULL,
  `content` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `intellectual`
--

INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(2, '1、C语言历史', '一、C语言概述', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>1963年，剑桥大学将ALGOL 60语言发展成为CPL(Combined Programming Language)语言。 </p><p>1967年，剑桥大学的Matin Richards对CPL语言进行了简化，于是产生了BCPL语言。  </p><p>1970年，美国贝尔实验室的Ken Thompson将BCPL进行了修改，设计出简单且很接近硬件的B语言（取BCPL的首字母）。并且用B语言写了第一个UNIX操作系统。  </p><p>1973年，美国贝尔实验室的D.M.RITCHIE在B语言的基础上最终设计出了一种新的语言，他取了BCPL的第二个字母作为这种语言的名字，这就是C语言，BCPL和B语言都是\"无类型\"的语言，而C语言提供了很多的数据类型。  </p><p>为了使UNIX操作系统推广，1977年Dennis M.Ritchie发表了不依赖于具体机器系统的C语言编译文本《可移植的C语言编译程序》。  </p><p>1978年Brian W.Kernighian和Dennis M.Ritchie出版了名著《The C Programming Language》，从而使C语言成为目前世界上流行最广泛的高级程序设计语言。  </p><p>1989年，ANSI发布了第一个完整的C语言标准——ANSI X3.159—1989，简称\"C89\"，不过人们也习惯称其为\"ANSIC\"。C89在1990年被国际标准组织ISO(International Organization for Standardization)一字不改地采纳，所以也有\"C90\"的说法。1999年，在做了一些必要的修正和完善后，ISO发布了新的C语言标准，命名为ISO/IEC 9899：1999，简称\"C99\"，而在2011年12月8号，ISO发布了新的C语言的新标准——C11，之前被称为C1X，官方名称ISO/IEC 9899:2011。</p> </div>\n</div>'),
(3, '2、主流编程语言比较', '一、C语言概述', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>1.C/C++</p><p>C和C++都是基于C的语言，是目前最流行的编程语言， C常被用作系统以及应用程序的编程语言，如嵌入式系统的应用程序。C++语言为C的增强，其在出现后迅速成为开发人员之间最流行的语言之一。它是用于开发系统软件，应用软件，设备驱动程序，嵌入式软件，高性能服务器和客户端应用及娱乐软件，如视频游戏。</p><p>2.Java</p><p>随着移动和大数据的发展，以基于Java的Hadoop如今发展迅速，这也是Java编程人员更加千金难寻。其可以用于各种各样的领域，包括企业应用及基础设施，以及Web应用和移动开发。</p><p>3.JavaScript</p><p>JavaScript在Web应用上有着非常大的需求，主要目的是为了解决服务器端语言，比如Perl，遗留的速度问题，为客户提供更流畅的浏览效果。JavaScript主要用于实现为Web浏览器，以提供增强的用户界面和动态网站。</p><p>4.C#</p><p>C#是微软公司发布的一种面向对象的、运行于.NET Framework之上的高级程序设计语言。C#是微软公司用来替代Java而开发的一种语言，并借鉴了Java，C，C++和Delphi的一些特点，如今C#已经成为微软应用商店和开发成员非常欢迎的开发语言。</p><p>5.PHP </p><p>PHP是一种通用开源脚本语言，特别适合于Web开发，可嵌入到HTML中，它最初是用来设计动态网页产生的。语法吸收了C语言、Java和Perl的特点，入门门槛较低，易于学习，使用广泛。</p><p>6.Python</p><p>Python是应用于设计各种各样的应用程序的动态语言， 往往比Tcl，Perl，Ruby，Scheme和Java更容易编写。Python语法简洁而清晰，具有丰富和强大的类库。它常被昵称为胶水语言，它能够很轻松的把用其他语言制作的各种模块（尤其是C/C++）轻松地联结在一起。</p><p>7.Ruby</p><p>Ruby是一种动态的，侧重于简单个高效的开源语言，他是一个优雅的语法，能够很自然的阅读和编写，适合于快速开发，一般开发效率是JAVA的5倍。</p><p>8.Objective-C</p><p>Objective-C的流行就得益于苹果的成功，其是增加了Smalltalk风格的消息在C编程语言中的反射，面向对象的语言。主要使用于苹果系统和GNUstep这两个使用OpenStep的标准的系统。随着苹果平台的巨大人气，如今Objective-C语言被人们逐渐知道。</p><p>9.HTML5</p><p>HTML5是用于构建因特网的核心技术的标准语言，用于Web呈现内容，它是HTML标准的第五次修订，如今，HTML5继续在移动开发领域发挥着重要的作用，为互联网的发展提供了多样化的发展道路，37％的开发者依赖HTML5开发移动网站和Web应用程序 。</p><p>10.CSS</p><p>CSS是一种用来表现HTML或XML等文件样式的计算机语言。最常用于Web样式和HTML和Xhtml接口，该语言可以应用与任何类型的XML文档， CSS的设计主要是为了使文档内容从文档表示的分离，包括元素，如布局，颜色和字体。</p> </div>\n</div>'),
(4, '3、程序员成长阶段', '一、C语言概述', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>第一阶段</p><p>熟练掌握某种语言基础。</p><p>第二阶段</p><p>精通某种平台的接口以及对应语言的自身的库函数。</p><p>第三阶段</p><p>了解软件平台系统的底层，熟悉其实现原理和方法。</p><p>第四阶段</p><p>能直接在平台上进行比较深层次的开发基本上，能达到这个层次就可以说是进入了高层次。</p><p>第五阶段</p><p>可以进行系统软件架构设计，能够从全局上把握和设计一个比较大的系统体系结构。</p><p>第六阶段</p><p>软件创意的思考和开发等。</p> </div>\n</div>'),
(5, '4、C语言经典书籍', '一、C语言概述', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>1.《C Primer plus》</p><p>这是目前市场上，最适合自学的C语言书籍。你可以在书中找到所有C语言编程概念的详细解释。这本书为每一个单独的概念提供了简短的例子，帮助读者更好理解。比如，指针这一章节就体现了这个特点。指针章节是本书编写最出色的章节之一。指针用来标识内存中的具体位置并且存放相应内存地址。书中参照了最新的ANSI标准C99。对于初级程序员来说，本书对学习基本概念大有帮助。这些概念在其他语言（比如：PHP和JAVA中）也有所应用。</p><p>  </p><p>2.《C程序设计语言》</p><p>这本书由C语言之父合著编写。它提供了对C语言的更好见解。比如在C语言中的控制流、运算符、数据结构和函数构造等方面，这本书都有自己的解释。书中所有概念都有合适的例子，以助读者理解。此书适合有一定实践经验的人作为一个全面熟悉和巩固语言的工具书，不是很适合初学者用来了解和学习。</p><p><br/></p><p>3.《C和指针》</p><p>《C和指针》通过对指针的基础知识和高级特性的探讨，帮助程序员把指针的强大功能融入到自己的程序中去。</p><p><br/></p><p>4.《C陷阱与缺陷》</p><p>作者以自己1985年在Bell实验室时发表的一篇论文为基础，结合自己的工作经验扩展成为这本对C程序员具有珍贵价值的经典著作。写作本书的出发点不是要批判C语言，而是要帮助C程序员绕过编程过程中的陷阱和障碍。本书适合有一定经验的C程序员阅读学习，即便你是C编程高手，本书也应该成为你的案头必备书籍。</p><p><br/></p><p>5.《C专家编程》</p><p>它可以帮助程序员理解高级的C语言概念。它强调程序员常用的一些最佳C语言技巧。这本书写得十分有趣，展现了作者在SUN系统（SUN SYSTEM）中的丰富经验。这本书还定义了一些传统的编程方式，比如使用不同的声明方式。同时，本书还提供了很多实用的编程实践提示，比如，指针和数组之间的差别。</p> </div>\n</div>'),
(6, '5、第一个C程序', '一、C语言概述', '<div class=\"content_item\">\n<div class=\"item_content\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 打印 Hello, world */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;  //包含头文件stdio.h</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(){  </code><code class=\"cpp comments\">// 主函数</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Hello, word\\n\"</code><code class=\"cpp plain\">);  </code><code class=\"cpp comments\">// 打印字符串</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;  </code><code class=\"cpp comments\">// 返回0，表示程序正确运行</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p><span style=\"font-family: 微软雅黑, \'Microsoft YaHei\';\">第1行包含标准库文件，include称为文件包含命令，扩展名为.h的文件称为头文件。</span></p><p><span style=\"font-family: 微软雅黑, \'Microsoft YaHei\';\">第2行定义名为main的函数，它不接受参数值；main函数的语句都被括在花括号中；int为main函数返回值类型。</span></p><p><span style=\"font-family: 微软雅黑, \'Microsoft YaHei\';\">第3行打印“Hello, world”，main函数调用库函数printf以显示字符序列。</span></p><p><span style=\"font-family: 微软雅黑, \'Microsoft YaHei\';\">第4行表示main函数的返回值为0，return让函数返回一个值。</span></p><p><span style=\"font-family: 微软雅黑, \'Microsoft YaHei\';\">第5行结束main函数，花括弧必须成对出现。</span></p> </div>\n</div>'),
(7, '1、auto', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>声明自动存储变量，也就是申明一块临时的变量内存。 </p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">auto</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a = 5;</code></div></div></td></tr></tbody></table><p>表示a为一个自动存储的临时变量。</p><p>auto可以显式的声明变量为自动变量。只要不是声明在所有函数之前的变量，即使没加auto关键字，也默认为自动变量。并且只在声明它的函数内有效。而且当使用完毕后，它的值会自动还原为最初所赋的值。自动变量使用时要先赋值，因为其中包含的是未知的值。</p> </div>\n</div>'),
(8, '2、break', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>用来表示中断。一般用在循环中，判断是否满足条件然后中断当前循环。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">fun(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(i &lt; 100)</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i == 10)</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">i++;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">(i);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>fun()函数中当i为10时结束while循环并返回i当前值。</p> </div>\n</div>'),
(9, '3、case', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>配合switch一起使用，例子同switch。</p><p>case后面只能是整型或字符型的常量或常量表达式。</p> </div>\n</div>'),
(10, '4、char', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>用来定义为字符型变量。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">c;</code></div></div></td></tr></tbody></table><p>表示c为一个字符型变量。</p><p>它的范围通常为1个字节。它在内存中是以ASCII玛来表示的。所以它也可以跟整型来运算。也可使用无符号或有符号来定义，sigened char、unsigned char。</p> </div>\n</div>'),
(11, '5、const', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>const是constant的缩写，是恒定不变的意思。被const修饰的值，是只读变量。</p><p>1. const修饰只读变量，具有不变性</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">func()</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a=0;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>首先，我们先把const这个单词忽略不看，那么a是一个int类型的局部自动变量，我们给它赋予初始值0。然后再看const，const作为一个类型限定词，和int有相同的地位。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp keyword bold\">const</code> <code class=\"cpp plain\">a;</code></div></div></td></tr></tbody></table><p>是等价的。</p><p>const修饰的对象是谁，是a,和int没有关系。const 要求他所修饰的对象为常量，不可被改变，不可被赋值，不可作为左值（l-value)，下面的写法是错误的：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">a=0;</code></div></div></td></tr></tbody></table><p>const修饰的只读变量必须在定义的同时初始化。</p><p>编译器解析const的时候先忽略类型名，看const离哪个近，离谁近就修饰谁。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* p;</code></div></div></td></tr></tbody></table><p>其实等价于</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">(*p);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp keyword bold\">const</code> <code class=\"cpp plain\">(*p);</code></div></div></td></tr></tbody></table><p>即，*p是常量。也就是说，p指向的数据是常量。</p><p>于是</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">p+=8; </code><code class=\"cpp comments\">//合法</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">*p=3; </code><code class=\"cpp comments\">//非法，p指向的数据是常量。</code></div></div></td></tr></tbody></table><p>那么如何声明一个自身是常量指针呢？方法是让const尽可能的靠近p;</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp plain\">p;</code></div></div></td></tr></tbody></table><p>const右面只有p,显然，它修饰的是p,说明p不可被更改。然后把const去掉，可以看出p是一个指向 int形式变量的指针。</p><p>于是</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">p+=8; </code><code class=\"cpp comments\">//非法</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">*p=3; </code><code class=\"cpp comments\">//合法</code></div></div></td></tr></tbody></table><p>再看一个更复杂的例子，它是上面二者的综合</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">* </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp plain\">p;</code></div></div></td></tr></tbody></table><p>说明p自己是常量，且p指向的变量也是常量。</p><p>于是</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">p+=8; </code><code class=\"cpp comments\">//非法</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">*p=3; </code><code class=\"cpp comments\">//非法</code></div></div></td></tr></tbody></table><p>const 还有一个作用就是用于修饰常量静态字符串。</p><p><br/></p><p>2.节省空间，避免不必要的内存分配，同时提高效率</p><p>const推出的初始目的，是为了取代预编译指令，消除它的缺点，同时继承他的优点。编译器通常不为普通const只读变量分配存储空间，而是将他们保存在符号表中，这使他成为一个编译期间的值，没有了存储于读内存的操作，使得他的效率也提高。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp comments\">/* 宏常量 */</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#define M 3</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp comments\">/* 此时并未将N放入内存中 */</code>    </div><div class=\"line number5 index4 alt2\"><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">N = 5; </code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 此时为N分配内存，以后不再分配 */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = N;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp comments\">/* 预编译期间进行宏替换，分配内存 */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">I = M;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp comments\">/* 没有内存分配 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j = N; </code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp comments\">/* 在进行宏替换，又一次分配内存 */</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">J = M; </code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>const定义的只读变量从汇编的角度来看，只是给出了对应的内存地址，而不是像#define一样给出的是立即数，所以，const定义的只读变量在程序运行过程中只有一份备份（因为它是全局的只读变量，放在静态区），而#define定义的宏常量在内存中有若干个备份。#define宏是在预编译阶段进行替换，而const修饰的只读变量是在编译的时候确定其值。#define宏没有类型，而const修饰的只读变量具有特定的类型。</p><p><br/></p><p>3. const修饰函数的参数</p><p>const修饰符可以修饰函数的参数，当不希望这个参数值在函数体内被意外改变时使用</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">fun(</code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i)</code></div></div></td></tr></tbody></table><p>告诉编译器i在函数体内不能被改变，从而防止了使用者的一些无意的或者错误的修改</p><p><br/></p><p>4. 修饰函数的返回值</p><p>const修饰符也可以修饰函数的返回值，返回值不可被改变</p><p>在另一链接文件中引用const只读变量</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">extern</code> <code class=\"cpp keyword bold\">const</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div></div></td></tr></tbody></table><p><br/></p> </div>\n</div>'),
(12, '6、continue', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>用来表示跳过当前其后面的语句，继续下一次循环。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">fun(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(i &lt; 100)</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">i++;</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i == 10)</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">continue</code><code class=\"cpp plain\">;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">(i);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>fun()函数中当i为10时跳过当前while当前循环，继续下一次循环。</p> </div>\n</div>'),
(13, '7、default', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>用于在switch语句中。定义默认的处理. 用法见switch。</p> </div>\n</div>'),
(14, '8、do', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>一般与while语句配合使用，构成的形式如 do...while或while...do，例见while语句。  </p> </div>\n</div>'),
(15, '9、double', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>用来声明为双精度类型。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">name;</code></div></div></td></tr></tbody></table><p>表示name为一个双精度类型变量。</p><p>它的范围为8个字节。也可使用更高精度的long double它的范围则更大，达到10字节。</p> </div>\n</div>'),
(16, '10、else', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>常用来配合if一起使用。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a==b)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=n;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">else</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=s;</code></div></div></td></tr></tbody></table><p><br/></p> </div>\n</div>'),
(17, '11、enum', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>用来声明枚举变量。 </p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">enum</code> <code class=\"cpp plain\">weekday{one,two,three,four,five,six,seven};</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">enum</code> <code class=\"cpp plain\">weekday a;</code></div></div></td></tr></tbody></table><p>表示a为一个枚举变量。</p> </div>\n</div>'),
(18, '12、extern', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>extern可以置于变量或者函数前，以标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。</p><p>如：</p><p>(1) 在example1.h中有下列声明:</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#ifndef EXAMPLE1H</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#define EXAMPLE1H</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">extern</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">g_str[]; </code><code class=\"cpp comments\">// 声明全局变量g_str</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">fun1();</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp preprocessor\">#endif</code></div></div></td></tr></tbody></table><p>(2) 在example1.cpp中</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include \"example1.h\"</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">g_str[] = </code><code class=\"cpp string\">\"123456\"</code><code class=\"cpp plain\">; </code><code class=\"cpp comments\">// 定义全局变量g_str</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">fun1() </code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">{ </code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">,g_str) </code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>(3) 以上是example1模块， 它的编译和连接都可以通过,如果我们还有example2模块也想使用g_str,只需要在原文件中引用就可以了</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include \"example1.h\"</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">fun2()</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">,g_str);</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>以上example1和example2编译连接后，在example1.obj可以在里面找到\"123456\"这个字符串,但在example2.obj里面找不到，这是因为g_str是整个工程的全局变量，在内存中只存在一份,example2.obj这个编译单元不需要再有一份了，不然会在连接时报告重复定义这个错误!</p><p>(4) 如果把全局变量的声明和定义放在一起，即把上面example1.h改为</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">extern</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">g_str[] = </code><code class=\"cpp string\">\"123456\"</code><code class=\"cpp plain\">; </code><code class=\"cpp comments\">// 这个时候相当于没有extern</code></div></div></td></tr></tbody></table><p>然后把example1.cpp中的g_str的定义去掉,这个时候再编译连接example1和example2两个模块时，会报连接错误，这是因为你把全局变量g_str的定义放在了头文件之后，example1.cpp这个模块包含了example1.h所以定义了一次g_str,而example2.cpp也包含了example1.h所以再一次定义了g_str,这个时候连接器在连接example1和example2时发现两个g_str。如果你非要把g_str的定义放在example1.h中的话，那么就把example2的代码中#include \"example1.h\"去掉，换成:</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">extern</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">g_str[];</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">fun2()</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s\\n\"</code><code class=\"cpp plain\">,g_str);</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>这个时候编译器就知道g_str是引自于外部的一个编译模块了，不会在本模块中再重复定义一个出来，但是因为无法在example2.cpp中使用#include \"example1.h\",那么example1.h中声明的其他函数你也无法使用了，除非也用都用extern修饰，这样的话你光声明的函数就要一大串，而且头文件的作用就是要给外部提供接口使用的，所以只在头文件中做声明。</p> </div>\n</div>'),
(19, '13、float', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>用来声明变量的类型。float为浮点型，也叫实型。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">name;</code></div></div></td></tr></tbody></table><p>表示name为一个浮点型变量。</p><p>它的范围固定为4个字节。</p> </div>\n</div>'),
(20, '14、for', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>循环语句.可以指定程序循环多少次，其一般形式为： </p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(表达式1;表达式2;表达式3)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">循环体</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>这三个表达式，可以都有，也可以都没有，也可以由任意的一项或两项，这就是for的灵活性所在。</p><p>表达式1，这个一般是初始化条件，如i=1。在第一个分号之前，可以用一个，也可以好几个，用逗号隔开；</p><p>表达式2，这个事循环条件，满足就继续执行循环体，不满足就跳出循环。这里一般是个逻辑判断语句；</p><p>表达式3，这个一般是改变循环条件的地方，如i++。</p><p>执行顺序是，先初始化，也就是运算表达式1，初始化完成后，这个表达式就没有用处了。</p><p>接着判断是否满足循环条件，也就是运算表达式2，如果是真，就执行循环体。</p><p>最后，运算表达式3，改变循环条件。这样第一次循环完成。</p><p>接着第二次循环，也就是运算表达式2，看是否满足循环条件，如果表达式2还满足（也就是真），接着执行循环体。完成后运算表达式3,。</p><p>如此往复循环，直到不满足表达式2后，跳出循环</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;i&lt;5;i++)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"程序将输出5次这段话！\"</code><code class=\"cpp plain\">); </code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p><br/></p> </div>\n</div>'),
(21, '15、goto', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>无条件循环语句. 使用goto时先设置一个标签，然后用它就可以跳转到这个标签，标签可以位于goto的前面，也可以位于它的后面。</p><p>例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=1;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">w_go:i++;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(i&lt;5)</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">goto</code> <code class=\"cpp plain\">w_go;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp keyword bold\">else</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,i);</code></div></div></td></tr></tbody></table><p><br/></p> </div>\n</div>'),
(22, '16、if', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>判断语句，用来判断语句是否满足条件。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a==b)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">k=n;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>如果a与b相等，则将n赋值给k。</p> </div>\n</div>'),
(23, '17、int', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>用来声明变量的类型。int为整型。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">num;</code></div></div></td></tr></tbody></table><p>表示num为一个整型变量。</p><p>注意在16位和32位系统中它的范围是不同的。16位中占用2个字节，对应的取值范围32768~+32767(16位)。32位中占用4个字节，对应的取值范围-2147483648～2147483647(32位)。还可以显式的声明为无符号或有符号：unsigned int    signed int .有符号和无符号的区别就是把符号位也当作数字位来存储。也可用short和long来声明为短整型，或长整行。</p> </div>\n</div>'),
(24, '18、long', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>用来声明长型的类型。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">long</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">num;</code></div></div></td></tr></tbody></table><p>表示num为一个长整型变量。</p> </div>\n</div>'),
(25, '19、register', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>register修饰符暗示编译程序相应的变量将被频繁地使用，如果可能的话，应将其保存在CPU的寄存器中，以加快其存储速度。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#ifdef NOSTRUCTASSIGN</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp functions bold\">memcpy</code><code class=\"cpp plain\">(d,s,l)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">register</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*d;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">register</code> <code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*s;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">register</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(i--)</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">*d++ = *s++;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp preprocessor\">#endif</code></div></div></td></tr></tbody></table><p>但是使用register修饰符有几点限制。</p><p>首先，register变量必须是能被CPU所接受的类型。这通常意味着register变量必须是一个单个的值，并且长度应该小于或者等于整型的长度。不过，有些机器的寄存器也能存放浮点数。</p><p>其次，因为register变量可能不存放在内存中，所以不能用\"&amp;\"来获取register变量的地址。</p><p>由于寄存器的数量有限，而且某些寄存器只能接受特定类型的数据（如指针和浮点数），因此真正起作用的register修饰符的数目和类型都依赖于运行程序的机器，而任何多余的register修饰符都将被编译程序所忽略。</p><p>在某些情况下，把变量保存在寄存器中反而会降低程序的运行速度。因为被占用的寄存器不能再用于其它目的；或者变量被使用的次数不够多，不足以装入和存储变量所带来的额外开销。</p><p>早期的C编译程序不会把变量保存在寄存器中，除非你命令它这样做，这时register修饰符是C语言的一种很有价值的补充。然而，随着编译程序设计技术的进步，在决定那些变量应该被存到寄存器中时，现在的C编译环境能比程序员做出更好的决定。实际上，许多编译程序都会忽略register修饰符，因为尽管它完全合法，但它仅仅是暗示而不是命令。</p> </div>\n</div>'),
(26, '20、return', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>返回语句。</p><p>可以返回一个值。当我们定义一个函数为有返回值的时候则必须返回一个值。</p> </div>\n</div>'),
(27, '21、short', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>用于声明一个短整型变量: </p><p>例： </p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">short</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a;</code></div></div></td></tr></tbody></table><p>表示a为一个共用体数据类型。</p> </div>\n</div>'),
(28, '22、signed', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>将变量声明为有符号型，默认变量就为signed 型，一般可省略。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">signed</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">num;</code></div></div></td></tr></tbody></table><p>表示num为一个有符号型整型变量。</p> </div>\n</div>');
INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(29, '23、sizeof', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>用来获取变量的存储空间大小。</p><p>1. 用法</p><p>sizeof(类型说明符，数组名或表达式);</p><p>或sizeof 变量名</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(a);</code><code class=\"cpp comments\">//ok</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">sizeof</code> <code class=\"cpp plain\">a;</code><code class=\"cpp comments\">//ok</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">);</code><code class=\"cpp comments\">//ok</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp keyword bold\">sizeof</code> <code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">;</code><code class=\"cpp comments\">//error</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(2+3.14);</code><code class=\"cpp comments\">//表达式，等价于sizeof(double);</code></div></div></td></tr></tbody></table><p>C99标准规定，函数、不能确定类型的表达式以及位域（bit-field）成员不能被计算sizeof值。</p><p>2. sizeof的常量性</p><p>sizeof的计算发生在编译时刻，所以它可以被当作常量表达式使用。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">ary[</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">)*10];</code><code class=\"cpp comments\">//ok</code></div></div></td></tr></tbody></table><p>3. 基本数据类型的sizeof</p><p>这里的基本数据类型指short、int、long、float、double这样的简单内置数据类型，由于它们都是和系统相关的，所以在不同的系统下取值可能不同，这务必引起我们的注意，尽量不要在这方面给自己程序的移植造成麻烦。</p><p>一般的，在32位编译环境中，sizeof(int)的取值为4。</p><p>4. 指针变量的sizeof</p><p>在32位计算机中，一个指针变量的返回值必定是4（注意结果是以字节为单位），但是，在64位系统中指针变量的sizeof结果为8，指针变量的sizeof值与指针所指的对象没有任何关系。</p><p>5. 数组的sizeof</p><p>数组的sizeof值等于数组所占用的内存字节数，如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a1[] = </code><code class=\"cpp string\">\"abc\"</code><code class=\"cpp plain\">; </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a2[3]; </code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(a1); </code><code class=\"cpp comments\">//结果为4，字符末尾还存在一个NULL终止符 </code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(a2); </code><code class=\"cpp comments\">//结果为3*4=12（依赖于int）</code></div></div></td></tr></tbody></table><p>6. 结构体的sizeof</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">S1</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">c;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">};</code></div></div></td></tr></tbody></table><p>sizeof(struct S1)值为多少？</p><p>由于编译器默认会对结构体进行字节对其处理，字节对齐的细节和编译器实现相关，但一般而言，满足三个准则：</p><p>1)结构体变量的首地址能够被其最宽基本类型成员的大小所整除；</p><p>2)结构体每个成员相对于结构体首地址的偏移量（offset）都是成员大小的整数倍，如有需要编译器会在成员之间加上填充字节（internal padding）；</p><p>3)结构体的总大小为结构体最宽基本类型成员大小的整数倍，如有需要编译器会在最末一个成员之后加上填充字节（trailing padding）。</p><p>其中基本类型是指前面提到的像char、short、int、float、double这样的内置数据类型，这里所说的“数据宽度”就是指其sizeof的大小。由于结构体的成员可以是复合类型，比如另外一个结构体，所以在寻找最宽基本类型成员时，应当包括复合类型成员的子成员，而不是把复合成员看成是一个整体。</p><p>通过上面的叙述，我们可以得到一个公式：</p><p>结构体的大小等于最后一个成员的偏移量加上其大小再加上末尾的填充字节数目，即：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">struct</code><code class=\"cpp plain\">)=offsetof(lastitem)+</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(lastitem)+</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(trailingpadding)</code></div></div></td></tr></tbody></table><p>所以：sizeof(struct S1) = 8。</p><p>另外，编译器的pack指令可以调整结构体对齐方式的，不同编译器名称和用法略有不同，在VC6中通过#pragma pack实现，也可以直接修改/Zp编译开关。</p><p>#pragma pack的基本用法为：</p><p>#pragma pack(n)</p><p>n为字节对齐数，其取值为1、2、4、8、16，默认是8，如果这个值比结构体成员的sizeof值小，那么该成员的偏移量应该以此值为准，即是说，结构体成员的偏移量应该取二者的最小值，公式如下：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">offsetof(item)=min(n,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(item))</code></div></div></td></tr></tbody></table><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#pragma pack(push)//将当前pack设置压栈保存</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#pragma pack(2)//必须在结构体定义之前使用</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">S1{</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">c;</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;};</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">S3{</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">c1;S1 s;</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">c2;};</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp preprocessor\">#pragma pack(pop)//恢复先前的pack设置</code></div></div></td></tr></tbody></table><p>计算sizeof(S1)时，min(2, sizeof(i))的值为2，所以i的偏移量为2，加上sizeof(i)等于6，能够被2整除，所以整个S1的大小为6。</p><p>同样，对于sizeof(S3)，s的偏移量为2，c2的偏移量为8，加上sizeof(c2)等于9，不能被2整除，添加一个填充字节，所以sizeof(S3)等于10。</p><p>\"空结构体\"（不含数据成员）的大小不为0，而是1。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">S5 { }; </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(S5); </code><code class=\"cpp comments\">//结果为1</code></div></div></td></tr></tbody></table><p>7. 含位域结构体的sizeof</p><p>C99规定int、unsigned int和bool可以作为位域类型，但编译器几乎都对此作了扩展，允许其它类型类型的存在。使用位域的主要目的是压缩存储，其大致规则为：</p><p>1) 如果相邻位域字段的类型相同，且其位宽之和小于类型的sizeof大小，则后面的字段将紧邻前一个字段存储，直到不能容纳为止；</p><p>2) 如果相邻位域字段的类型相同，但其位宽之和大于类型的sizeof大小，则后面的字段将从新的存储单元开始，其偏移量为其类型大小的整数倍；</p><p>3) 如果相邻的位域字段的类型不同，则各编译器的具体实现有差异；</p><p>4) 如果位域字段之间穿插着非位域字段，则不进行压缩；</p><p>5) 整个结构体的总大小为最宽基本类型成员大小的整数倍。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">BF1{</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">f1:3;</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">f2:4;</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">f3:5;};</code></div></div></td></tr></tbody></table><p>位域类型为char，第1个字节仅能容纳下f1和f2，所以f2被压缩到第1个字节中，而f3只能从下一个字节开始。因此sizeof(BF1)的结果为2。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">BF2{</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">f1:3;</code><code class=\"cpp color1 bold\">short</code> <code class=\"cpp plain\">f2:4;</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">f3:5;};</code></div></div></td></tr></tbody></table><p>由于相邻位域类型不同，在VC6中其sizeof为6，在Dev-C++中为2。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">BF3{</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">f1:3;</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">f2;</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">f3:5;};</code></div></div></td></tr></tbody></table><p>非位域字段穿插在其中，不会产生压缩，在VC6和Dev-C++中得到的大小均为3。</p><p>8. 联合体的sizeof</p><p>结构体在内存组织上是顺序式的，联合体则是重叠式，各成员共享一段内存，所以整个联合体的sizeof也就是每个成员sizeof的最大值。结构体的成员也可以是复合类型，这里，复合类型成员是被作为整体考虑的。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">union</code> <code class=\"cpp plain\">U</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">c;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">S1 s;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">};</code></div></div></td></tr></tbody></table><p>U的sizeof值等于sizeof(s)。</p> </div>\n</div>'),
(30, '24、static', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>声明静态变量和静态函数。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">static</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a = 5;</code></div></div></td></tr></tbody></table><p>表示a为一个静态变量</p><p>在C语言中，关键字static有三个明显的作用：</p><p>1)在函数体内，一个被声明为静态的变量在这一函数被调用过程中维持其值不变（该变量存放在静态变量区）。</p><p>2)在模块内（但在函数体外），一个被声明为静态的变量可以被模块内所用函数访问，但不能被模块外其它函数访问。它是一个本地的全局变量。</p><p>3)在模块内，一个被声明为静态的函数只可被这一模块内的其它函数调用。那就是，这个函数被限制在声明它的模块的本地范围内使用。</p> </div>\n</div>'),
(31, '25、struct', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>用来声明结构体类型。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">some</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{ </code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a=1;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">b=1.1;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code><code class=\"cpp plain\">=1.1234567;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">}kkk;</code></div></div></td></tr></tbody></table><p>这样就可以使用kkk.a来使用结构体中的成员变量了。</p><p>也可以显式的用struct some aaa,bbb;来声明多个结构体变量。</p><p>结构体可以包含各种不同类型的量。比如可以把整型，字符型等类型的变量声明在同一个结构体种，使用的时候使用结构体变量直接可以调用。</p> </div>\n</div>'),
(32, '26、switch', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>条件选择语句，常用来判断用户选择的条件来执行特定语句。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">switch</code> <code class=\"cpp plain\">(name)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">1: </code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"yes,ok!\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">; </code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">2: </code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"oh,no!\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">default</code><code class=\"cpp plain\">: </code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"error..!\"</code><code class=\"cpp plain\">) </code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>if、else一般表示两个分支或是嵌套表示少量的分支，但如果分支很多的话可以用switch、case组合；</p><p>每个case语句的结尾绝对不要忘了加break，否则将导致多个分支重叠（除非有意使多个分支重叠）；</p><p>最后必须使用default分支。即使程序真的不需要default处理，也应该保留语句：</p><p>default:</p><p>    break;</p><p>这样做并非画蛇添足，可以避免让人误以为你忘了default处理。</p> </div>\n</div>'),
(33, '27、typedef', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>类型重定义，可以重定义类型。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp plain\">unsigned </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">u_int;</code></div></div></td></tr></tbody></table><p>将无符号整形定义为u_int。</p> </div>\n</div>'),
(34, '28、union', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>声明共用体（联合）数据类型。用法用struct相同。不同的是共用体所有成员共享存储空间.</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">union</code> <code class=\"cpp plain\">kkk</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">b;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">}kka;</code></div></div></td></tr></tbody></table><p>表示kka为一个共用体数据类型。</p><p>一个union只配置一个足够大的空间以来容纳最大长度的数据成员，以上例而言，最大长度是float型态，所以kka的空间大小就是float数据类型的大小。</p> </div>\n</div>'),
(35, '29、unsigned', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>定义为无符号的变量. 默认变量都为有符号的.除非显示的声明为unsigned的.</p><p>无符号版本和有符号版本的区别就是无符号类型能保存2倍于有符号类型的数据，比如16位系统中一个int能存储的数据的范围为–32767~32768，而unsigned能存储的数据范围则是0~65535。由于在计算机中,整数是以补码形式存放的。根据最高位的不同，如果是1,有符号数的话就是负数；如果是无符号数,则都解释为正数。同时在相同位数的情况下,所能表达的整数范围变大。</p><p>unsigned若省略后一个关键字，大多数编译器都会认为是unsigned int。 </p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">unsigned  </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a; </code><code class=\"cpp comments\">//a为0~65535的数 (2的16次方)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">unsigned  </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a;</code><code class=\"cpp comments\">//a为0~255的数　（2的8次方）</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(36, '30、void', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>空类型，void的字面意思是\"无类型\"，void *则为\"无类型指针\"，void *可以指向任何类型的数据，一般用于声明函数为无返回值或无参数。</p><p>1. 如果函数没有返回值，那么应声明为void类型</p><p>在C语言中，凡不加返回值类型限定的函数，就会被编译器作为返回整型值处理。</p><p><br/></p><p>2. 如果函数无参数,那么应声明其参数为void</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include \"stdio.h\"</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">fun()</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">main()</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,fun(2));</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">getchar</code><code class=\"cpp plain\">();</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>编译正确且输出1，这说明，在C语言中，可以给无参数的函数传送任意类型的参数。</p><p><br/></p><p>3. 按照ANSI标准，不能对void指针进行算法操作</p><p>ANSI标准认为进行算法操作的指针必须是确定知道其指向数据类型大小的。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">* pvoid;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">pvoid++; </code><code class=\"cpp comments\">//ANSI：错误</code></div></div></td></tr></tbody></table><p>但是GNU(GNU\'s Not Unix的缩写)则不这么认定，它指定void *的算法操作与char *一致。</p><p>因此下列语句在GNU编译器中皆正确：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">pvoid++; </code><code class=\"cpp comments\">//GNU：正确</code></div></div></td></tr></tbody></table><p>在实际的程序设计中，为迎合ANSI标准，并提高程序的可移植性，我们可以这样编写实现同样功能的代码：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">* pvoid;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*)pvoid++; </code><code class=\"cpp comments\">//ANSI：正确；GNU：正确</code></div></div></td></tr></tbody></table><p>4. 如果函数的参数可以是任意类型指针，那么应声明其参数为void *</p><p>典型的如内存操作函数memcpy和memset的函数原型分别为：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">memcpy</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*dest, </code><code class=\"cpp keyword bold\">const</code> <code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*src, </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">len);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*</code><code class=\"cpp functions bold\">memset</code> <code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*buffer, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">c, </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">num);</code></div></div></td></tr></tbody></table><p>5. void不能代表一个真实的变量</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">a; </code><code class=\"cpp comments\">//错误</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">function(</code><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">a); </code><code class=\"cpp comments\">//错误</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(37, '31、volatile', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>一个定义为volatile的变量是说这变量可能会被意想不到地改变，优化器在用到这个变量时必须直接从原始内存地址读取这个变量的值，而不是使用保存在寄存器里的备份。</p><p>一般说来，volatile用在如下的几个地方：</p><p>1、中断服务程序中修改的供其它程序检测的变量需要加volatile；</p><p>2、多任务环境下各任务间共享的标志应该加volatile；</p><p>3、存储器映射的硬件寄存器通常也要加volatile说明，因为每次对它的读写都可能有不同意义。</p><p>如：</p><p>注意，在vc6中，一般调试模式没有进行代码优化，所以这个关键字的作用看不出来。下面通过插入汇编代码，测试有无volatile关键字，对程序最终代码的影响：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">arg c,</code><code class=\"cpp color1 bold\">char</code><code class=\"cpp plain\">* argv[])</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=10;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a=i;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"i=%d\"</code><code class=\"cpp plain\">,a);</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">//下面汇编语句的作用就是改变内存中i的值，但是又不让编译器知道</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">__asm</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">mov dword ptr[ebp-4],20h</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b=i;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"i=%d\"</code><code class=\"cpp plain\">,b);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>然后，在调试版本模式运行程序，输出结果如下：</p><p>i = 10</p><p>i = 32</p><p>然后，在release版本模式运行程序，输出结果如下：</p><p>i = 10</p><p>i = 10</p><p>输出的结果明显表明，release模式下，编译器对代码进行了优化，第二次没有输出正确的i值。下面，我们把 i的声明加上volatile关键字，看看有什么变化：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">arg c,</code><code class=\"cpp color1 bold\">char</code><code class=\"cpp plain\">* argv[])</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">volatile</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=10;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a=i;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"i=%d\"</code><code class=\"cpp plain\">,a);</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">//下面汇编语句的作用就是改变内存中i的值，但是又不让编译器知道</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">__asm</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">mov dword ptr[ebp-4],20h</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">b=i;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"i=%d\"</code><code class=\"cpp plain\">,b);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>分别在调试版本和release版本运行程序，输出都是：</p><p>i = 10</p><p>i = 32</p><p>这说明这个关键字发挥了它的作用！</p> </div>\n</div>'),
(38, '32、while', '二、关键字', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>循环控制语句，只要表达式为真就一直循环。</p><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">){</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,sum=0;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">i=1;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">do</code><code class=\"cpp plain\">{</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">sum=sum+i;</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">i++;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(i&lt;=100);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\\n\"</code><code class=\"cpp plain\">,sum);</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(39, '1、赋值运算符', '三、运算符与表达式', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p><span style=\"font-size: 11px;font-family: Tahoma, sans-serif\"> </span>赋值语句的作用是把某个常量或变量或表达式的值赋值给另一个变量。符号为‘=’。这里并不是等于的意思，只是赋值，等于用‘==’表示。</p><p>注意：赋值语句左边的变量在程序的其他地方必须要声明。</p><p>已赋值的变量我们称为左值，因为它们出现在赋值语句的左边；产生值的表达式我们称为右值，因为她它们出现在赋值语句的右边。常数只能作为右值。</p><p>例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">count=5;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">total1=total2=0;</code></div></div></td></tr></tbody></table><p>第一个赋值语句大家都能理解。    </p><p>第二个赋值语句的意思是把0同时赋值给两个变量。这是因为赋值语句是从右向左运算的，也就是说从右端开始计算。这样它先total2=0;然后total1=total2;那么我们这样行不行呢？</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">(total1=total2)=0;</code></div></div></td></tr></tbody></table><p>这样是不可以的，因为先要算括号里面的，这时total1=total2是一个表达式，而赋值语句的左边是不允许表达式存在的。</p> </div>\n</div>'),
(40, '2、算术运算符', '三、运算符与表达式', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>在C语言中有两个单目和五个双目运算符。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">符号   功能</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">+    单目正</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">-    单目负</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">*    乘法</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">/    除法</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">%    取模</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">+    加法</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">-    减法</code></div></div></td></tr></tbody></table><p>下面是一些赋值语句的例子， 在赋值运算符右侧的表达式中就使用了上面的算术运算符：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">Area=Height*Width;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">num=num1+num2/num3-num4;</code></div></div></td></tr></tbody></table><p>运算符也有个运算顺序问题，先算乘除再算加减。单目正和单目负最先运算。</p><p>取模运算符(%)用于计算两个整数相除所得的余数。例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">a=7%4;</code></div></div></td></tr></tbody></table><p>最终a的结果是3，因为7%4的余数是3。</p><p>除法运算符(/)用于计算两个整数相除所得的商。例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">b=7/4;</code></div></div></td></tr></tbody></table><p>b的结果是是1。</p><p>这里需要说明的是，当两个整数相除时，所得到的结果仍然是整数，没有小数部分。要想也得到小数部分，可以这样写7.0/4或者7/4.0，也即把其中一个数变为非整数。</p><p>那么怎样由一个实数得到它的整数部分呢？这就需要用强制类型转换了。例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">a=(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">) (7.0/4);</code></div></div></td></tr></tbody></table><p>因为7.0/4的值为1.75，如果在前面加上(int)就表示把结果强制转换成整型，这就得到了1。</p><p>单目减运算符相当于取相反值，若是正值就变为负值，若是负数就变为正值。</p><p>单目加运算符没有意义，纯粹是和单目减构成一对用的。</p> </div>\n</div>'),
(41, '3、逻辑运算符', '三、运算符与表达式', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>逻辑运算符是根据表达式的值来返回真值或是假值。其实在C语言中没有所谓的真值和假值，只是认为非0为真值，0为假值。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">符号   功能</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">&amp;&amp;   逻辑与</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">||   逻辑或</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">!    逻辑非</code></div></div></td></tr></tbody></table><p>例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">5!3;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">0||-2&amp;&amp;5;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">!4;</code></div></div></td></tr></tbody></table><p>当表达式进行&amp;&amp;运算时，只要有一个为假，总的表达式就为假，只有当所有都为真时，总的式子才为真。</p><p>当表达式进行||运算时，只要有一个为真，总的值就为真，只有当所有的都为假时，总的式子才为假。</p><p>逻辑非(!)运算是把相应的变量数据转换为相应的真/假值。若原先为假，则逻辑非以后为真，若原先为真，则逻辑非以后为假。</p><p>当一个逻辑表达式的后一部分的取值不会影响整个表达式的值时，后一部分就不会进行运算了。例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">a=2,b=1;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">a||b-1;</code></div></div></td></tr></tbody></table><p>因为a=2，为真值，所以不管b-1是不是真值，总的表达式一定为真值，这时后面的表达式就不会再计算了。</p> </div>\n</div>'),
(42, '4、关系运算符', '三、运算符与表达式', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>关系运算符是对两个表达式进行比较，返回一个真/假值。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">符号   功能</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">&gt;    大于</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">&lt;    小于</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">&gt;=    大于等于</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">&lt;=    小于等于</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">==    等于</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">!=    不等于</code></div></div></td></tr></tbody></table><p>等于==和赋值=的区别了：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(Amount=123) ……</code></div></div></td></tr></tbody></table><p>这行代码的意思是先赋值Amount=123，然后判断这个表达式是不是真值，因为结果为123，是真值，那么就做后面的。如果想让当Amount等于123才运行时，应该if(Amount==123) ……</p> </div>\n</div>'),
(43, '5、自增自减运算符', '三、运算符与表达式', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>这是一类特殊的运算符，自增运算符++和自减运算符--对变量的操作结果是增加1和减少1。例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">--Couter;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">Couter--;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">++Amount;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">Amount++;</code></div></div></td></tr></tbody></table><p>看这些例子里，运算符在前面还是在后面对本身的影响都是一样的，都是加1或者减1，但是当把他们作为其他表达式的一部分，两者就有区别了。运算符放在变量前面，那么在运算之前，变量先完成自增或自减运算；如果运算符放在后面，那么自增自减运算是在变量参加表达式的运算后再运算。</p><p>例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">num1=4;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">num2=8;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">a=++num1;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">b=num2++;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">c=num1+++num2;</code></div></div></td></tr></tbody></table><p>a=++num1;这总的来看是一个赋值，把++num1的值赋给a，因为自增运算符在变量的前面，所以num1先自增加1变为5，然后赋值给a，最终a也为5。</p><p>b=num2++;这是把num2++的值赋给b，因为自增运算符在变量的后面，所以先把num2赋值给b，b应该为8，然后num2自增加1变为9。</p><p>对于c，到底是c=(num1++)+num2;还是c=num1+(++num2);这要根据编译器来决定，不同的编译器可能有不同的结果。所以我们在以后的编程当中，应该尽量避免出现上面复杂的情况。</p> </div>\n</div>');
INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(44, '6、复合赋值运算符', '三、运算符与表达式', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>复合赋值运算符实际上是一种缩写形式，使得对变量的改变更为简洁。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">Total=Total+3;</code></div></div></td></tr></tbody></table><p>这行的意思是本身的值加3，然后在赋值给本身。为了简化，上面的代码也可以写成：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">Total+=3;</code></div></div></td></tr></tbody></table><p>复合赋值运算符有下列这些：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">符号   功能</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">+=   加法赋值</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">-=   减法赋值</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">*=   乘法赋值</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">/=   除法赋值</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">%=   模运算赋值</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">&lt;&lt;=  左移赋值</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">&gt;&gt;=  右移赋值</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">&amp;=   位逻辑与赋值</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">|=   位逻辑或赋值</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">^=    位逻辑异或赋值</code></div></div></td></tr></tbody></table><p>Total=Total+3;与Total+=3;区别：</p><p>对于A=A+1，表达式A被计算了两次，对于复合运算符A+=1，表达式A仅计算了一次。</p><p>一般的来说，这种区别对于程序的运行没有多大影响，但是当表达式作为函数的返回值时，函数就被调用了两次，而且如果使用普通的赋值运算符，也会加大程序的开销，使效率降低。</p> </div>\n</div>'),
(45, '7、条件运算符', '三、运算符与表达式', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>条件运算符(?:)是C语言中唯一的一个三目运算符，它是对第一个表达式作真/假检测，然后根据结果返回两外两个表达式中的一个。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">&lt;表达式1&gt;?&lt;表达式2&gt;:&lt;表达式3&gt;</code></div></div></td></tr></tbody></table><p>在运算中，首先对第一个表达式进行检验，如果为真，则返回表达式2的值；如果为假，则返回表达式3的值。</p><p>例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">a=(b&gt;0)?b:-b;</code></div></div></td></tr></tbody></table><p>当b&gt;0时，a=b;当b不大于0时，a=-b;这就是条件表达式。其实上面的意思就是把b的绝对值赋值给a。</p> </div>\n</div>'),
(46, '8、逗号运算符', '三、运算符与表达式', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>在C语言中，多个表达式可以用逗号分开，其中用逗号分开的表达式的值分别结算，但整个表达式的值是最后一个表达式的值。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">假设b=2,c=7,d=5,</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">a1=(++b,c--,d+3);</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">a2=++b,c--,d+3;</code></div></div></td></tr></tbody></table><p>对于第一行代码，有三个表达式，用逗号分开，所以最终的值应该是最后一个表达式的值，也就是d+3，为8，所以a=8。</p><p>对于第二行代码，那么也是有三个表达式，这时的三个表达式为a2=++b、c--、d+3，所以最终表达式的值虽然也为8，但a2=3。</p> </div>\n</div>'),
(47, '9、位移运算符', '三、运算符与表达式', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>位移赋值运算符有下列这些：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">符号   功能</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">&amp;   位与</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">|   位或</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">^   位异或</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">~   按位取反</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">&lt;&lt;  左移</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">&gt;&gt;  右移</code></div></div></td></tr></tbody></table><p>位与(&amp;)</p><p>只有两个操作数的对应位都为1结果才为1 （用真假描述，只有两个操作数都为真结果才为真）</p><p>用法：掩码</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">(10010011)&amp;(00111101)= (00010001)</code></div></div></td></tr></tbody></table><p>位或(|)</p><p>其中任意操作数中对应的位为1，那么结果位就为1（如果任意一个操作数为真，或两个都为真，那么结果为真）</p><p>用法：打开位  fla |=1</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">(10010011)|(00111101) = (10111111)</code></div></div></td></tr></tbody></table><p>位异或(^)</p><p>操作数中的对应位有一个为1（但是不都为1），那么结果为1（如果两个操作数中有一个为真，但是不都是真，那么结果为真）</p><p>用法：转置位，既如果该位打开，则关闭该位；如果该位关闭，则打开该位</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">(10010011)^(00111101)=(10101110)</code></div></div></td></tr></tbody></table><p>按位取反(~)</p><p>将每个1变为0，将每个0变为1</p><p>用法：关闭位 fla &amp;=~1</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">~(10011010)=(01100101)</code></div></div></td></tr></tbody></table><p>左移(&lt;&lt;)</p><p>操作数的每位向左移动，移动的位数由其右侧操作数指定，空出的位用0填充</p><p>用法  bu&lt;&lt;n; bu乘以2的n次幂</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">(10001010)&lt;&lt;2 = (00101000)</code></div></div></td></tr></tbody></table><p>右移(&gt;&gt;)</p><p>操作数的每位向右移动，移动的位数由其右侧操作数指定，丢弃移出左侧操作数右端的位</p><p>对于unsigned类型，使用0填充空出的位；对于有符号类型，结果依赖于机器</p><p>用法  bu&gt;&gt;2;如果bu为非负，则bu除以2的n次幂</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">(10001010)&gt;&gt;2 =(00100010)</code></div></div></td></tr></tbody></table><p><br/></p> </div>\n</div>'),
(48, '10、优先级和结合性', '三、运算符与表达式', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>C语言中，运算符的运算优先级共分为15 级。1级最高，15级最低，具体如下：</p><p>1级（左结合）</p><p>( ) 圆括号；[ ]下标运算符；-&gt;指向结构体成员运算符；. 结构体成员运算符。</p><p>2级（右结合）</p><p>\"!\"逻辑非运算符；\"~\"按位取反运算符；\"++\"前缀增量运算符；\"--\"前缀减量运算符；</p><p>\"-\"负号运算符；(类型)类型转换运算符；\"*\"指针运算符；\"&amp;\"地址运算符。</p><p>3级（左结合）</p><p>\"*\" 乘法运算符；\"/\"除法运算符；\"%\" 取余运算符。</p><p>4级（左结合）</p><p>\"+\"加法运算符；\"-\"减法运算符。</p><p>5级（左结合）</p><p>&lt;&lt; 左移运算符；&gt;&gt; 右移运算符。</p><p>6级（左结合）</p><p>&lt;、&lt;=、&gt;、&gt;=关系运算符。</p><p>7级（左结合）</p><p>\"==\"等于运算符；\"!=\"不等于运算符。</p><p>8级（左结合）</p><p>\"&amp;\"按位与运算符，\"~\"按位取反运算符”。</p><p>9级（左结合）</p><p>\"∧\"按位异或运算符。</p><p>10级（左结合）</p><p>\"|\"按位或运算符。</p><p>11级（左结合）</p><p>\"&amp;&amp;”逻辑与运算符。</p><p>12级（左结合）</p><p>\"||\"逻辑或运算符。</p><p>13级（右结合）</p><p>? :条件运算符。</p><p>14级（右结合）</p><p>=、 +=、 -=、 *=、 /=、 %=、 &amp;=、 ^=、 |=、 &lt;&lt;=、 &gt;&gt;=赋值运算符。</p><p>15级（左结合）</p><p>\",\"逗号运算符。</p> </div>\n</div>'),
(49, '1、数组定义', '四、数组', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>数组由一系列类型相同的元素构成，其形式如下：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">类型名   数组名[整型常量表达式];</code></div></div></td></tr></tbody></table><p>例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">s[10];</code></div></div></td></tr></tbody></table><p>①定义了一个名为s的一维数组</p><p>②方括号中的10规定了s数组含有10个数组元素，依次是s[0]，s[1]……s[9]</p><p>③类型名int规定了每一个数组元素都是整型数据</p><p>④每个元素只有一个下标，下标范围0~9，C语言中规定，所有数组的下标都必须从0开始，按顺序依次递增</p><p>⑤C编译程序将为s数组在内存中开辟10个连续的存储单元</p> </div>\n</div>'),
(50, '2、数组初始化', '四、数组', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>语法格式：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">类型说明符   数组名[整型变量表达式]={初始化常量列表};</code></div></div></td></tr></tbody></table><p>①对数组所有元素赋初值，此时可以忽略中括号内数组元素的个数，即数组的长度。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[5]={1,2,3,4,5}; &lt;&lt;===&gt;&gt; </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[ ]={1,2,3,4,5};</code></div></div></td></tr></tbody></table><p>②对数组部分元素赋初值，此时数组长度不能省略。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code>  <code class=\"cpp plain\">a[5]={1,2}; &lt;&lt;===&gt;&gt; a[0]=1，a[1]=2，编译系统将会自动给a[2]、a[3]、a[4]赋初值0</code></div></div></td></tr></tbody></table><p>③将数组中的所有元素赋初值0。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[5]={0};</code></div></div></td></tr></tbody></table><p>④整型数组在未赋值时，其数组元素的值时不确定的。</p><p>⑤利用输入函数逐个输入数组中的各个元素。</p><p>⑥通过赋初值可以确定数组的大小。</p> </div>\n</div>'),
(51, '3、数组引用', '四、数组', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p><span style=\"color: rgb(51, 51, 51); font-family: \'Tahoma,Simsun,sans-serif\'; font-size: 14px; line-height: 20px; background-color: rgb(255, 255, 255);\">语法格式：</span></p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">数组名[下标];</code></div></div></td></tr></tbody></table><p>数组元素在引用时，下标可以是整型常量或整型表达式，也可以使用变量</p><p>例：将一个数组逆序输出</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include \"stdio.h\"</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#define N 5</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[N]={9,7,5,3,1},i;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"n original array: \"</code><code class=\"cpp plain\">);</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;N;i++)</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">      </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%4d\"</code><code class=\"cpp plain\">,a[i]);</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"n sorted array: \"</code><code class=\"cpp plain\">);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=N-1;i&gt;=0;i--)</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">      </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%4d\"</code><code class=\"cpp plain\">,a[i]);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">getch();</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>输出：</p><p>original array:   9   7   5   3   1</p><p>sorted array:   1   3   5   7   9</p><p><br/></p> </div>\n</div>'),
(52, '4、二维数组', '四、数组', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p><strong>定义：</strong></p><p>二维数组是指数组元素有两个下标的数组。可以看做一个矩阵，用统一的数组名来标识，第一个下标表示行，第二个下标表示列。</p><p><strong>形式：</strong></p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">类型名  数组名[整型常量表达式1] [整型常量表达式2];</code></div></div></td></tr></tbody></table><p>例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp color1 bold\">float</code>  <code class=\"cpp plain\">b[3][3];</code></div></div></td></tr></tbody></table><p>①定义了一个二维数组b，该数组由9个元素构成，其中每一个数组元素都属于实行数据。</p><p>②数组b包含的各个数据元素依次是：b[0][0],b[0][1],b[0][2],b[1][0],b[1][1],b[1][2],b[2][0],b[2][1],b[2][2]</p><p>说明：</p><p>①每个数组元素的行和列下标的下界都是从0开始。</p><p>②每个数组元素都有两个下标，且必须分别放在单独的“[]”内。</p><p>③定义中的第1个下标表示该数组具有的行数，第2个下标表示该数组具有的列数。两个下标之积是数组元素的总个数。</p><p>④每个数组元素的数据类型均相同。C语言中，二维数组中各个元素在内存中的存放规律是“以行为主序进行存储”。</p><p>⑤二维数组可以看做由多个一维数组组成。</p><p><strong>初始化（赋初值）：</strong></p><p>①分行给二维数组所有元素赋初值（清晰、直观、便于查错）</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code>  <code class=\"cpp plain\">a[2][3]={{1,2,3},{7,8,9}};</code></div></div></td></tr></tbody></table><p>②给二维数组所有元素赋初值，二维数组第一维的长度可以省略，但第二维对的长度不能省略</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code>  <code class=\"cpp plain\">a[ ][3]={{1,2,3},{7,8,9}};</code></div></div></td></tr></tbody></table><p>    编译程序会根据数组元素的总个数分配存储空间，计算出行数。   </p><p>③对部分元素赋初值</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code>  <code class=\"cpp plain\">a[2][3]={{1,2},{5}}; &lt;&lt;===&gt;&gt; </code><code class=\"cpp color1 bold\">int</code>  <code class=\"cpp plain\">a[2][3]={{1,2,0},{5,0,0}};</code></div></div></td></tr></tbody></table><p>  当某行大括号中的初值个数少于该行中元素的个数时，系统将自动默认该行后面的元素值为0。也就是说对数组元素赋值时，应该是依次逐个赋值，而不能跳过某个元素给下一个元素赋值。</p><p><strong>引用：</strong></p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">数组名[下标1][下标2];</code></div></div></td></tr></tbody></table><p>例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp color1 bold\">int</code>  <code class=\"cpp plain\">b[3][3],i,j;</code></div></div></td></tr></tbody></table><p>①b[0][0]引用数组中的第一个元素</p><p>②b[1][1+1]引用数组中的第二行的第三个元素</p><p>③b[i][j]引用数组中第i+1行的第j+1个元素，其中i和j应同时满足是大于等于0且小于等于2的整数</p><p>例：从一个四行五列的整型二维数组中查找第一个出现的负数</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j,num[4][5];</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Enter 20 integers:n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;4;i++)</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">      </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=0;j&lt;5;j++)</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">         </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;num[i][j]);   </code><code class=\"cpp comments\">/*给数组元素逐个赋值*/</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;4;i++)</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">{ </code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">      </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=0;j&lt;5;j++)</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">         </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(num[i][j]&lt;0)</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">         </code><code class=\"cpp plain\">{ </code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"minus number num[%d][%d]: %dn\"</code><code class=\"cpp plain\">,i,j,num[i][j]);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">         </code><code class=\"cpp plain\">} </code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">      </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">}</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">getch();</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>输出：</p><p>Enter 20 integers:</p><p>2 1 -1 -2 3 4 5 4 44 60 -3 -55 -43 34 -60 23 45 88 58 -98</p><p>minus number num[0][2]：-1</p> </div>\n</div>'),
(53, '1、函数概述', '五、函数', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>C语言用函数实现程序模块化，一个程序由一个或多个源程序文件组成，一个源程序文件由一个或多个函数组成。</p><p>C程序的执行从main函数开始，并回到main函数结束，函数之间可以相互调用，或调用自身，不能调用main函数，函数之间相互独立，不存在从属关系。</p><p>函数的分类</p><p>1. 从使用角度分：</p><p>(1). 标准库函数:以程序库的形式直接提供给用户使用。</p><p>stdio.h: gets()、printf()</p><p>math.h: sin()、sqrt()</p><p>(2). 用户自定义函数：由用户自己建立定义。</p><p>2. 从函数形式分：</p><p>(1). 无参函数：调用函数时主函数不将数据传送给被调函数。用于完成特定功能的操作。如：c=getchar( )……</p><p>(2). 有参函数：调用函数时在主调函数和被调函数之间有参数传递。如：putchar(c)、puts(str)、……</p> </div>\n</div>'),
(54, '2、函数定义', '五、函数', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>函数定义形式</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">返回类型 函数名(参数声明)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">声明部分</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">语句</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>返回类型、参数、函数体内容都可省略</p><p>如：dummy(){}</p><p>返回类型：指函数返回值的类型，若省略此项，则认为返回类型是int，若无返回值，则定义返回类型为void。</p><p>参数声明：类型 形参名, 类型 形参名, ...</p><p>声明部分：指变量、函数的声明</p><p>例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">max(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">z;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">z = x&gt;y?x:y;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">z;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">min(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y)</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">x&lt;y?x:y;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(55, '3、函数参数', '五、函数', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p><strong>形式参数和实际参数</strong></p><p><span style=\"font-family: 宋体, SimSun;\">形参：定义函数时，函数名后()中的参数</span></p><p><span style=\"font-family: 宋体, SimSun;\">实参：调用函数时，函数名后()中的参数</span></p><p><span style=\"font-family: 宋体, SimSun;\">实参可以是常量、变量、表达式、函数调用，实参和形参必须类型相同或赋值兼容</span></p><p><span style=\"font-family: 宋体, SimSun;\">例：求两数的最大值。注意函数的定义形式。</span></p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">max(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y) </code><code class=\"cpp comments\">/*函数定义 形式参数*/</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{ </code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">z;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">z=(x&gt;y)?x:y;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">(z);</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main(  )</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp plain\">{ </code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a,b,c;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d%d\"</code><code class=\"cpp plain\">,&amp;a,&amp;b);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">c=max(a,b); </code><code class=\"cpp comments\">/*函数调用 实际参数*/</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"max=%dn\"</code><code class=\"cpp plain\">,c);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p><strong>参数传递</strong></p><p>值传递，实参对形参的数据传递是“值传递”</p><p>单向传递，只能把实参的值传递给形参，不能把形参的值传递给实参，对形参的值所作的改变不能带回给实参</p><p>实参和形参是不同的变量，具有不同的存储空间，具有不同的生存期和作用域，</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">swap(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">t;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">t=x, x=y, y=t;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp color1 bold\">int</code>  <code class=\"cpp plain\">main()</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a=1, b=4;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">swap(a, b);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(“%d %d”,a,b);</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>结果：1  4</p> </div>\n</div>'),
(56, '4、函数返回值', '五、函数', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p><strong>return语句</strong></p><p>形式</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">形式一：</code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">形式二：</code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">expression;</code></div></div></td></tr></tbody></table><p>功能</p><p>函数返回语句</p><p>结束函数调用</p><p>如果需要，还可以带回函数返回值</p><p><strong>函数的返回值 </strong></p><p>1. 函数返回值的类型在函数定义中指定</p><p>2. 函数返回值通过函数中的return语句获得</p><p>3. 若函数无返回值，则可以没有return语句</p><p>4. return语句后的表达式类型，应与函数返回值类型相同，或可以兼容赋值；两者类型不同时，自动做类型转换</p><p>5. 函数需要返回值时，若缺少return语句，或return语句未带返回值，则返回一个不确定值</p> </div>\n</div>'),
(57, '5、函数的调用', '五、函数', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p><strong>一般形式</strong></p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">函数名(实参表列)</code></div></div></td></tr></tbody></table><p>说明</p><p>即使没有实参，()也不能省略</p><p>多个实参之间用逗号分隔</p><p>实参与形参按顺序一一对应，类型应匹配</p><p>实参的求值顺序不唯一，应避免对此敏感的调用形式，如printf(\"%d,%d\", i, i++);</p><p><strong>函数调用的方式</strong></p><p>函数语句：printf(\"%dn\", i);</p><p>函数表达式：(c + d * max(a,b)) % e</p><p>函数参数：gcd(max(a,b), min(c, d))</p><p>说明：函数调用可以看作同返回类型的表达式使用，同时，函数调用还完成了函数中定义的操作</p><p>函数原型 </p><p>一般形式</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">类型 函数名(类型1, 类型2, ...);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">类型 函数名(类型1 形参1,类型2 形参2, ...);</code></div></div></td></tr></tbody></table><p>举例</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">max(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">, </code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">max(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y);</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">dummy();  </code><code class=\"cpp comments\">/* 无参函数原型 */</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">dummy(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">); </code><code class=\"cpp comments\">/* 同上 */</code></div></div></td></tr></tbody></table><p><strong>函数的声明 </strong></p><p>函数声明的形式即函数原型，在函数调用之前，应对函数进行声明</p><p>函数声明可以在主调函数的声明部分，也可以在函数外部</p><p>函数外部的声明，对所有主调函数都起作用，不需要在主调函数内再次声明</p><p>函数的定义也具有声明的作用</p><p>库函数的声明包括在头文件(*.h)里，不需在源程序里声明</p><p>例1:</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">max(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y); </code><code class=\"cpp comments\">/* 函数声明 */</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a, b, c;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">c = max(a, b);</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">max(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y)</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">x&gt;y?x:y;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">例2:</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">max(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y); </code><code class=\"cpp comments\">/* 函数声明 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp comments\">/* 不需要再次声明int max(int, int) */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a, b, c; </code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">c = max(a, b);</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">max(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y)</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">x&gt;y?x:y;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">例3:</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">max(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y) </code><code class=\"cpp comments\">/* 函数定义具有声明作用 */</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">x&gt;y?x:y;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp comments\">/* 不需要再次声明int max(int, int) */</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a, b, c;</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">c = max(a, b);</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(58, '6、函数的嵌套调用', '五、函数', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>调用一个函数的过程中，调用另一函数。<br/></p><p>例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sum_class( </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp keyword bold\">class</code><code class=\"cpp plain\">);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sum_dept(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dept);</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main( )</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code>  <code class=\"cpp plain\">i, dn, sum;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(“输入学院数:”)；</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(“%d”, &amp;dn);</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(sum=0,i=1; i&lt;=dn; i++)</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">      </code><code class=\"cpp plain\">sum=sum+sumdept(i);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(“全校学费总金额%dn”,sum);</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sum_dept(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">dept)</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code>  <code class=\"cpp plain\">i, cn, s=0;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(“输%d学院班级数”,dept)；</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(“%d”, &amp;cn);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=1; i&lt;=cn; i++)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">      </code><code class=\"cpp plain\">s=s+sum_calss(i);</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(s);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sum_class(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp keyword bold\">class</code><code class=\"cpp plain\">)</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i, student, s=0;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(“输%d班级人数”, </code><code class=\"cpp keyword bold\">class</code><code class=\"cpp plain\">)；</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(“%d”, &amp;student);</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=1; i&lt;=student; i++)</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">{</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">      </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(“输第%d学生学费金额：”, i)；</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">      </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(“%d”,&amp;data);</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">      </code><code class=\"cpp plain\">s=s+data;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">}</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">(s);</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(59, '7、函数的递归调用', '五、函数', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>一个函数直接或间接的调用它自身，必须有一定的条件判断语句，使得递归调用能够终止。</p><p>例: 用递归方法求n！。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">fac(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n) </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">f;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(n==0||n==1)</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">      </code><code class=\"cpp plain\">f = 1;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">      </code><code class=\"cpp plain\">f = fac(n-1) * n;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">(f);</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">y;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(“%d”,&amp;n);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">y=fac(n);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(“%d!=%10.2fn”,n,y);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(60, '8、数组与函数参数', '五、函数', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p><strong>数组元素作为函数的实参</strong></p><p>数组元素的引用与一般变量的引用是一样的，传递的是数组元素的值，属于“值传递”方式。</p><p>例：设a[8]和b[8]分别保存了A班和B班八门课程的平均成绩，现要统计出A班有几门课程的平均成绩高于B班</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">better(</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">ave1,</code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">ave2)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(ave1&gt;ave2 )</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">      </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">(1);</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">      </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">(-1);</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main( )</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,k=0;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">a[8]={65,78,67,90,84,63,58,76},b[8]={62,79,65,88,80,65,60,74};</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;8;i++)</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">      </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(better(a[i],b[i])&gt;0)</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">         </code><code class=\"cpp plain\">k=k+1;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%dn\"</code><code class=\"cpp plain\">,k);</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p><strong>数组名作为函数的实参</strong></p><p>C语言中的数组名代表了数组在内存中存放的起始地址，所以数组名作为函数的参数传递的是数组的起始地址，属于“传地址”。</p><p>说明：</p><p>（1）用数组名作为函数的参数，必须对实参数组先定义，形参必须说明成与实参数组类型一致的数组。</p><p>（2）形参数组和实参数组的数组名可以不一样，数组的大小也可以不一致。由于传递的是地址，所以形参数组和实参数组在内存中实际上是共用了连续的一块地址空间</p><p>例：用函数average()求30个学生英语课的平均成绩。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">average(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">mark[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">ave;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">sum=0,i;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;n;i++)</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">      </code><code class=\"cpp plain\">sum=sum+mark[i];</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">ave=sum/n;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">(ave);</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">      </code> </div><div class=\"line number11 index10 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main( )</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,score[30];</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"请输入30个学生的英语成绩：n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;30;i++)</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">      </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;score[i]);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%5.1fn\"</code><code class=\"cpp plain\">,average(score,30));   </code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(61, '1、指针变量', '六、指针', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>指针表示变量等的存储地址</p><p><strong>指针与地址</strong></p><p>地址：通过首地址和数据类型可以访问内存中某一数据，数据类型决定所占用存储单元数</p><p>指针：就是地址，和类型有关</p><p><strong>变量的指针和指针变量</strong></p><p>变量的指针：</p><p>内存中存储某个变量的存储单元的首地址，指针(地址)实质上是一个整数(不是C的整型)，可以通过变量的地址来间接的访问变量</p><p>指针变量：</p><p>指针(地址)是一个数据，也可以用另一个变量来存放，即指针变量，通过指针变量可以间接访问变量或内存数据</p><p><strong>指针变量的定义</strong></p><p>一般形式：</p><p>基类型 *指针变量名;</p><p>说明：</p><p>“基类型”表示该指针指向的数据的类型，可以定义基类型为空类型void的指针变量</p><p>举例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*pi;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*pc1, c, *pc2;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">*p;</code></div></div></td></tr></tbody></table><p><strong>地址运算符和指针运算符</strong></p><p>地址运算符&amp;：</p><p>获得操作数的地址(指针)，单目运算符，自右向左结合，优先级较高</p><p>操作数应为各种类型的内存变量、数组元素、结构体成员等，操作数不能是表达式、常量、寄存器变量</p><p>举例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%f\"</code><code class=\"cpp plain\">, &amp;score);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i, *p=&amp;i;</code></div></div></td></tr></tbody></table><p>指针运算符*：</p><p>获得指针指向的内存数据，又称“间接访问运算符”，单目运算符，自右向左结合，优先级较高，操作数为具有指针(地址)意义的值</p><p>举例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i, *p=&amp;i;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">(*p)++; </code><code class=\"cpp comments\">/* i++; */</code></div></div></td></tr></tbody></table><p><strong>指针变量的引用</strong></p><p>指针变量也要“先赋值，后使用”，没有赋值的指针变量所存储的地址数据是不确定的，对它的引用非常危险</p><p>对指针的赋值要注意类型匹配，必要时可以使用强制类型转换，但要慎重使用，*p可以用于与指针p的基类型相同类型的变量可以使用的任何场合</p><p>指针变量可以作为函数的参数</p><p>举例</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a, b, c, *pa, *pb, *pc;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">pa = &amp;a;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">pb = &amp;b;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">pc = &amp;c;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">a = 100;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"*pa=%dn\"</code><code class=\"cpp plain\">, *pa);</code><code class=\"cpp comments\">/* *pa=100 */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">*pb = 200;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"b=%dn\"</code><code class=\"cpp plain\">, b);</code><code class=\"cpp comments\">/* b=200 */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">, pc);</code><code class=\"cpp comments\">/* 输入34 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"c=%dn\"</code><code class=\"cpp plain\">, c);</code><code class=\"cpp comments\">/* c=34 */</code></div></div></td></tr></tbody></table><p>指针变量作为函数参数</p><p>参数传递：</p><p>仍然遵循“单向值传递”的规则，这里的传递规则是指针类型参数的值的传递，作为参数的指针型实参的值不会改变，但是对指针型实参所指向的内存数据所作的操作将不会随函数的返回而恢复</p><p>用途：</p><p>借助指针类型参数可以改变多个数据的值</p><p>举例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">swap(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*x, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*y)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">t;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">t=*x, *x=*y, *y=t;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a=1, b=4;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*pa, *pb;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">pa=&amp;a, pb=&amp;b;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">swap(pa, pb);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(62, '2、指针运算', '六、指针', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p><strong>指针的算术运算：</strong></p><p>条件：</p><p>p,q是指向同一数据集合(数组)的指针</p><p>运算方式：</p><p>p+n：p之后第n个元素的地址</p><p>p-n：p之前第n个元素的地址</p><p>p++：p作为当前操作数，然后后移一个元素</p><p>++p：p后移一个元素，然后作为当前操作数</p><p>p--：p作为当前操作数，然后前移一个元素</p><p>--p：p前移一个元素，然后作为当前操作数</p><p>p-q：表示p和q两者之间的元素个数</p><p>指针的关系运算：</p><p>条件：</p><p>p,q是指向同一数据集合(数组)的指针</p><p>运算方式：</p><p>p&lt;q、p&lt;=q、p==q、p!=q、p&gt;=q、p&gt;q</p><p>p&lt;q:判断p所指元素是否在q所指元素之前</p><p>其他运算的含义与上述类似，若p,q不是指向同一数据集合的指针，则运算无意义</p><p><strong>指针的赋值运算：</strong></p><p>条件：</p><p>p,q是指向同一数据类型的指针，n是整型数据</p><p>有意义的赋值方式</p><p>p=q、p=q+n、p=q-n (要求q指向数组)、p+=n、p-=n (要求p指向数组)</p><p>注意避免数组越界</p><p><strong>指针的运算说明：</strong></p><p>指针的运算还包括：指针运算，对指向数组的指针的下标运算，对指针变量的取地址运算，对指向结构体的指针的指向成员运算，除上述运算方式(包括约束条件)外的其他运算都没有意义，无意义的指针运算不一定会出现语法错误，但可能造成危险的操作</p><p>指针的运算举例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">short</code> <code class=\"cpp plain\">a[5], *p, *q;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">p = &amp;a[0];</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">q = p+2;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">p += 3;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">, *p++);</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">, *--q);</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(p&gt;q)</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">, p-q);</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp keyword bold\">else</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">, q-p);</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(63, '3、数组与指针', '六、指针', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p><strong>指针与数组的关系</strong></p><p>数组名是“常量指针”：</p><p>数组名表示数组的首地址，因此数组名也是一种指针(地址)，数组名表示的地址(指针)不能被修改，所以称之为“常量指针”</p><p>数组的指针：</p><p>数组的起始地址，与数组名表示的指针相同：a，与数组的第一个元素(a[0])的地址相同: &amp;a[0]</p><p>数组和指针的用法：</p><p>数组名不能被赋值和修改，若指针指向数组，则两者的其他用法基本相同</p><p>定义指针变量时，只分配了用来存放地址（指针）的空间，而没有分配存放数据（指针指向的对象）的空间</p><p>定义数组时，为所有元素分配相应的连续的存储空间，但没有额外存放他们的地址的空间</p><p>指针应赋值后才能使用</p><p><strong>通过指针引用数组元素</strong></p><p>当一个指针变量指向数组或某个数组元素时，可以通过这个指针变量引用所有的数组元素</p><p>引用数组元素的方法：</p><p>下标运算符[]，例如a[i]、p[i]</p><p>指针运算符*，例如*(a+i)、*(p+i)</p><p>注意数组名不能被修改和赋值，注意防止下标越界</p><p>数组名和指针引用数组元素比较：</p><p>指针指向数组首地址：</p><p>前提条件：int a[10], *p=a;</p><p>a[i]、p[i]、*(a+i)、*(p+i)等用法都是合法的，且它们都表示同一个数组元素</p><p>a+i(或p+i)不是简单的在a(或p)表示的地址值上简单的加i，而是加上i个基类型所需的地址偏移量，即加上i*sizeof(int)</p><p>指针值可以改变，如p++为下一元素的地址，数组名的值不能修改，如a++是非法操作</p><p>指针指向某个数组元素：</p><p>前提条件：p=a+i;</p><p>*(p++)与a[i++]等价、*(p--)与a[i--]等价、*(++p)与a[++i]等价、*(--p)与a[--i]等价</p><p>注意不能使用*(a++)或a=p+i这种形式，注意区分运算顺序，*(p++)与(*p)++，注意防止下标越界，注意掌握指针位置</p><p>通过指针引用数组元素举例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[10], i, *p;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">p = a;  </code><code class=\"cpp comments\">/* 指针需要先赋值 */</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(p&lt;a+10)   </code><code class=\"cpp comments\">/* 指针在数组范围内移动 */</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">, p++); </code><code class=\"cpp comments\">/* 指针向下移动 */</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">p = a;   </code><code class=\"cpp comments\">/* 指针指向正确位置 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0; i&lt;10; i++)</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">, p[i]); </code><code class=\"cpp comments\">/* 指针使用[] */</code></div></div></td></tr></tbody></table><p><strong>数组用作函数参数</strong></p><p>数组元素用作函数实参：</p><p>与同类型的一般变量用法相同</p><p>数组用作函数参数：</p><p>数组类型可以作为函数参数类型，数组可以用作函数的形参和实参</p><p>定义函数时，数组型形参实际上作为指针型形参处理，实参可用相同类型的数组或指针</p><p>声明数组类型形参时，不需要指定数组长度,一般应把数组长度作为另一个参数传递</p><p>以数组作为实参的几种方法：</p><p>(1)形参用数组名，实参用数组名</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">f(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x[], </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{ ... ... }</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">main()</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">{ </code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[10];</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">... ...</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">f(a, 10);</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>(2)形参用指针变量，实参用数组名</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">f(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*x, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{ ... ... }</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">main()</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">{ </code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[10];</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">... ...</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">f(a, 10);</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>(3)形参用数组名，实参用指针变量</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">f(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x[], </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{ ... ... }</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">main()</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">{ </code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[10], *p=a;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">... ...</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">f(p, 10);</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>(4)形参用指针变量，实参用指针变量</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">f(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*x, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{ ... ... }</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">main()</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">{ </code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[10], *p=a;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">... ...</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">f(p, 10);</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(64, '4、二维数组指针', '六、指针', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>指向二维数组的指针总结：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">a[3][4];</code></div></div></td></tr></tbody></table><p>a是一个长度为3的数组，数组元素是长度为4的数组</p><p>表示二维数组</p><p>a：指向二维数组的指针类型</p><p>表示第i行</p><p>a[i]、*(a+i)：指向一维数组的指针类型</p><p>表示第i行j列的元素</p><p>a[i][j]、  *(*(a+i)+j)</p><p>*(a[i]+j)、(*(a+i))[j]：char类型</p><p>注意a和*a都是指针，但是基类型不同，注意*(a+i)和*a+i的区别</p><p>二维数组的指针作函数参数：</p><p>用指向数组元素的指针作为参数，用指向二维数组的行的指针作为参数</p><p>举例:</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">foo(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*p, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n);</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">bar(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">(*p)[4], </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n);</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[3][4]; </code><code class=\"cpp comments\">/* 定义二维数组 */</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">foo(*a, 12); </code><code class=\"cpp comments\">/* 二维数组的行作为参数 */</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">bar(a, 3);   </code><code class=\"cpp comments\">/* 二维数组名作为参数 */</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(65, '5、字符串指针', '六、指针', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p><strong>直接用字符指针指向字符串：</strong></p><p>字符串常量按字符数组处理，在存储器中占有一定的空间，并有自己的地址(指针)</p><p>可以把字符串常量的地址赋给字符指针变量，通过这个字符指针变量可以修改字符串常量</p><p>两个内容完全一样的字符串常量，在存储器中是不同的字符串，具有不同的存储空间</p><p>注意防止越过原字符串常量的范围，注意字符串末尾应保留结束标志\'\'</p><p>字符串指针举例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*s=</code><code class=\"cpp string\">\"I love\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*t;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">t = </code><code class=\"cpp string\">\"China!\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">s[0] = ‘U’; </code><code class=\"cpp comments\">//非标准，慎用</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(s);    </code><code class=\"cpp comments\">/* U love */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">s[6] = </code><code class=\"cpp string\">\'~\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(s);    </code><code class=\"cpp comments\">/* U love~China! */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp plain\">s[12] =</code><code class=\"cpp string\">\'~\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp functions bold\">puts</code><code class=\"cpp plain\">(t);   </code><code class=\"cpp comments\">/* China~ */</code></div></div></td></tr></tbody></table><p><strong>字符数组和字符指针变量比较：</strong></p><p>数组在定义时分配存放若干字符的空间，指针定义时只分配存放一个地址的空间</p><p>数组有存储空间可以直接使用，字符指针要先指向一个字符串后才能使用</p><p>字符串常量能对数组赋初值，如同把字符串的各个字符放到数组中；不能在其他场合对数组整体赋值，char a[4];a=“abc”;是错的</p><p>指针可以用字符串常量或字符数组任意赋值，但只是把字符串的地址赋给指针</p><p>数组名的值不能修改，指针可以任意修改</p> </div>\n</div>'),
(66, '6、函数指针', '六、指针', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>函数也有相应的内存地址，函数名代表函数的入口地址，函数的入口地址就是函数的指针</p><p>函数的指针可以用相应类型的指针变量表示，即指向函数的指针变量，函数也可以用通过指针变量间接调用</p><p>指向函数的指针变量</p><p>定义形式：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">类型 (*变量名)([参数类型列表]);</code></div></div></td></tr></tbody></table><p>说明：</p><p>与函数原型类似，函数名用(*变量名)代替， “参数类型列表”可以省略，但一般不要省略，主要用于函数的参数，</p><p>先赋值，后使用，一般用同类型函数名赋值，不能进行算术运算和关系运算</p><p>举例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">max(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{ </code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">x&gt;y?x:y; </code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">(*p)(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">, </code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">); </code><code class=\"cpp comments\">/* 定义指针变量 */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a, b, c;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d%d\"</code><code class=\"cpp plain\">, &amp;a, &amp;b);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">p = max;        </code><code class=\"cpp comments\">/* 用函数名赋值 */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">c = (*p)(a, b); </code><code class=\"cpp comments\">/* c=max(a,b); */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(67, '7、函数返回指针', '六、指针', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>函数的返回值可以是指针类型</p><p>定义形式：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">类型 *函数名(参数列表);</code></div></div></td></tr></tbody></table><p>如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*foo(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">x, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">y);</code></div></div></td></tr></tbody></table><p>说明：</p><p>函数调用可以结合使用*和[]运算符</p><p>注意与指向函数的指针区别：int (*foo)(int x, int y);</p><p>举例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*f(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*px, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*py) </code><code class=\"cpp comments\">/* 返回整型指针 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">*px&gt;*py?px:py; </code><code class=\"cpp comments\">/* 较大数的地址 */</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a=2, b=3, c=9;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">*f(&amp;a,&amp;b)=c;  </code><code class=\"cpp comments\">/* 赋值给a和b中较大的数 */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%dn\"</code><code class=\"cpp plain\">, b); </code><code class=\"cpp comments\">/* 输出9 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(68, '8、指针数组', '六、指针', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>形式：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp plain\">类型 *数组名[长度];</code></div></div></td></tr></tbody></table><p>元素是指针类型的数组，如：char *p[4];</p><p>注意与基类型为数组的指针区分，char (*p)[4];</p><p>举例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 把所有名字的所有字母全部改成大写 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*name[]={</code><code class=\"cpp string\">\"Tom\"</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\"John\"</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\"Kate\"</code><code class=\"cpp plain\">};</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i, j;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0; i&lt;3; i++)</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">      </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(j=0; *(name[i]+j); j++)</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">         </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(name[i][j]&gt;=</code><code class=\"cpp string\">\'a\'</code> <code class=\"cpp plain\">&amp;&amp;name[i][j]&lt;=</code><code class=\"cpp string\">\'z\'</code><code class=\"cpp plain\">)</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">name[i][j]-=32;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(69, '9、指向指针的指针', '六、指针', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>基类型为指针类型的指针，如：char **p;</p><p>举例：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 利用指向字符指针的指针打印字符串数组 */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*name[]={</code><code class=\"cpp string\">\"Tom\"</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\"John\"</code><code class=\"cpp plain\">, </code><code class=\"cpp string\">\"Kate\"</code><code class=\"cpp plain\">};</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">**p;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">p = name;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=0; i&lt;3; i++)</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">      </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%sn\"</code><code class=\"cpp plain\">, *p++);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(70, '10、命令行参数', '六、指针', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>main函数的几种形式</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main();</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">argc, </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*argv[]);</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">argc, </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">**argv);</code></div></div></td></tr></tbody></table><p>说明</p><p>返回值类型一般为int，也可以是其他类型，argc为命令行参数的个数，argv为命令行参数字符串数组，命令行参数包括文件名本身</p><p>举例—echo命令</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">argc, </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*argv[])</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(--argc &gt; 0)</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">      </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%s%c\"</code><code class=\"cpp plain\">, *++argv, (argc&gt;1)?</code><code class=\"cpp string\">\' \'</code><code class=\"cpp plain\">:</code><code class=\"cpp string\">\'n\'</code><code class=\"cpp plain\">);</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>&gt;echo C Language</p><p>argc == 3;</p><p>argv[0] == \"echo\";</p><p>argv[1] == \"C\";</p><p>argv[2] == \"Language\";</p> </div>\n</div>'),
(71, '1、文件概述', '七、文件', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p><strong>文件：</strong></p><p>存储在外部介质上数据的集合,是操作系统数据管理的单位</p><p><strong>文件分类</strong></p><p>按文件的逻辑结构：</p><p>记录文件：由具有一定结构的记录组成（定长和不定长）</p><p>流式文件：由一个个字符（字节）数据顺序组成</p><p>按存储介质：</p><p>普通文件：存储介质文件（磁盘、磁带等）</p><p>设备文件：非存储介质（键盘、显示器、打印机等）</p><p>按数据的组织形式：</p><p>文本文件： </p><p>ASCII文件，每个字节存放一个字符的ASCII码,其特点是存储量大、速度慢、便于对字符操作</p><p>二进制文件：</p><p>数据按其在内存中的存储形式直接存放到磁盘上，其特点是存储量小、速度快、便于存放中间结果</p><p>如</p><p>int型数10000</p><p>内存存储形式</p><p>00100111 00010000</p><p>ASCII形式</p><p>00110001 00110000 00110000 00110000 00110000</p><p>二进制形式</p><p>00100111 00010000</p><p><strong>文件处理方法</strong></p><p>缓冲文件系统：</p><p>高级文件系统，系统自动为正在使用的文件开辟内存缓冲区</p><p>非缓冲文件系统：</p><p>低级文件系统，由用户在程序中为每个文件设定缓冲区</p> </div>\n</div>'),
(72, '2、文件指针', '七、文件', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p><strong>文件结构体FILE</strong></p><p>实质上 是一个结构体类型，缓冲文件系统为每个正使用的文件在内存开辟文件信息区，文件信息用系统定义的名为FILE的结构体描述</p><p>FILE定义在stdio.h中</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp keyword bold\">typedef</code>   <code class=\"cpp keyword bold\">struct</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code>   <code class=\"cpp plain\">_fd;     </code><code class=\"cpp comments\">//文件号</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code>   <code class=\"cpp plain\">_cleft;  </code><code class=\"cpp comments\">//缓冲区中剩下的字符数</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code>   <code class=\"cpp plain\">_mode;   </code><code class=\"cpp comments\">//文件操作方式</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">char</code>  <code class=\"cpp plain\">*_next;  </code><code class=\"cpp comments\">//文件当前读写位置</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">char</code>  <code class=\"cpp plain\">*_buff;  </code><code class=\"cpp comments\">//文件缓冲区位置</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp plain\">}</code><code class=\"cpp color1 bold\">FILE</code><code class=\"cpp plain\">;</code></div></div></td></tr></tbody></table><p><strong>文件类型指针</strong></p><p>指针变量说明：FILE *fp;</p><p>用法：</p><p>文件打开时，系统自动建立文件结构体，并把指向它的指针返回来，程序通过这个指针获得文件信息,访问文件</p><p>文件关闭后，它的文件结构体被释放</p> </div>\n</div>'),
(73, '3、文件的打开与关闭', '七、文件', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>C文件操作用库函数实现,库函数包含于stdio.h</p><p><strong>三个标准文件：</strong></p><p>标准输入------键盘  stdin</p><p>标准输出------显示器  stdout</p><p>标准出错输出-----显示器  stderr</p><p>对这三个标准文件系统是自动打开和关闭（不需要语句来操作）</p><p><strong>对文件的读写应该按指定的操作方式打开</strong></p><p>打开文件使用方式:</p><p>打开文件--&gt;文件读/写--&gt;关闭文件</p><p><strong>打开文件fopen</strong></p><p>函数原型：</p><p>FILE *fopen(char  *name,char *mode)</p><p>功能：</p><p>按指定方式打开指定的文件</p><p>返值：</p><p>正常打开，为指向文件结构体的指针；打开失败，为NULL</p><p>例 文件打开与测试 </p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp color1 bold\">FILE</code> <code class=\"cpp plain\">*fp;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">fp=</code><code class=\"cpp functions bold\">fopen</code><code class=\"cpp plain\">(“aa.c”,“w”);</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(fp==NULL)</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(“File open error!n”);</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(0);</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>文件使用方式列表</p><p><strong>文件关闭fclose</strong></p><p>作用:</p><p>使文件指针变量与文件“脱钩”，释放文件结构体和文件指针，不关闭文件可能会丢失数据</p><p>函数原型：</p><p>int  fclose(FILE  *fp)</p><p>功能：</p><p>关闭fp指向的文件</p><p>返值：</p><p>正常关闭为0;出错时,非0</p> </div>\n</div>'),
(74, '1、预处理的工作方式', '八、预处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>在集成开发环境中，编译，链接是同时完成的。其实，C语言编译器在对源代码编译之前，还需要进一步的处理：预编译。</p><p>预编译的主要作用如下：</p><p>1) 将源文件中以\"include\"格式包含的文件复制到编译的源文件中。</p><p>2) 用实际值替换用\"#define\"定义的字符串。</p><p>3) 根据\"#if\"后面的条件决定需要编译的代码。</p><p>预处理的行为是由指令控制的。</p><p>1) 指令都是以#开始。#符号不需要在一行的行首，只要她之前有空白字符就行。在#后是指令名，接着是指令所需要的其他信息。</p><p>2) 在指令的符号之间可以插入任意数量的空格或横向制表符。</p><p>3) 指令总是第一个换行符处结束，除非明确地指明要继续。</p><p>4) 指令可以出现在程序中的任何地方。我们通常将#define和#include指令放在文件的开始，其他指令则放在后面，甚至在函数定义的中间。</p><p>5) 注释可以与指令放在同一行。</p> </div>\n</div>'),
(75, '2、#define', '八、预处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>使用#define命令并不是真正的定义符号常量，而是定义一个可以替换的宏。被定义为宏的标示符称为“宏名”。在编译预处理过程时，对程序中所有出现的“宏名”，都用宏定义中的字符串去代换，这称为“宏代换”或“宏展开”。<br/></p><p>在C语言中，宏分为有参数和无参数两种。</p><p><strong>无参数的宏</strong></p><p>其定义格式如下： </p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#define 宏名  字符串</code></div></div></td></tr></tbody></table><p>在以上宏定义语句中，各部分的含义如下：</p><p>#：表示这是一条预处理命令(凡是以“#”开始的均为预处理命令)。</p><p>define:关键字“define”为宏定义命令。</p><p>宏名：是一个标示符，必须符合C语言标示符的规定，一般以大写字母标示宏名。</p><p>字符串：可以是常数，表达式，格式串等。在前面使用的符号常量的定义就是一个无参数宏定义。</p><p>注意:</p><p>预处理命令语句后面一般不会添加分号，如果在#define最后有分号，在宏替换时分号也将替换到源代码中去。在宏名和字符串之间可以有任意个空格。</p><p>如:</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#define PI 3.14</code></div></div></td></tr></tbody></table><p>1) 在使用宏定义时，还需要注意以下几点：</p><p>2) 宏定义是宏名来表示一个字符串，在宏展开时又以该字符串取代宏名。这只是一种简单的代换，字符串中可以含任何字符，可以是常数，也可以是表达式，预处理程序对它不作任何检查。如有错误，只能在编译已被宏展开后的源程序时发现。</p><p>3) 宏定义必须写在函数之外，其作用域为宏定义命令起到源程序结束。</p><p>4) 宏名在源程序只能够若用引号括起来，则预处理程序不对其作宏替换。</p><p>5) 宏定义允许嵌套，在宏定义的字符串中可以使用已经定义的宏名。在宏展开时由预处理程序层层替换。</p><p>6) 习惯上宏名可用大写字母表示，以方便与变量区别。但也允许用小写字母。</p><p><strong>带参数的宏</strong></p><p>#define命令定义宏时，还可以为宏设置参数。与函数中的参数类似，在宏定于中的参数为形式参数，在宏调用中的参数称为实际参数。对带参数的宏，在调用中，不仅要宏展开，还要用实参去代换形参。</p><p>带参宏定义的一般形式为：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#define 宏名(形参表)  字符串</code></div></div></td></tr></tbody></table><p>在定义带参数的宏时，宏名和形参表之间不能有空格出现，否则，就将宏定义成为无参数形式，而导致程序出错。</p><p>如:</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#define ABS(x) (x)&lt;0?-(x):(x)</code></div></div></td></tr></tbody></table><p>以上的宏定义中，如果x的值小于0，则使用一元运算符(-)对其取负，得到正数。</p><p>带参的宏和带参的函数相似，但其本质是不同的。使用带参宏时，在预处理时将程序源代码替换到相应的位置，编译时得到完整的目标代码，而不进行函数调用，因此程序执行效率要高些。而函数调用只需要编译一次函数，代码量较少，一般情况下，对于简单的功能，可使用宏替换的形式来使用。</p> </div>\n</div>'),
(76, '3、#和##', '八、预处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p><strong>操作符#</strong></p><p>在使用#define定义宏时，可使用操作符#在字符串中输出实参。</p><p>例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#define AREA(x,y) printf(\"长为\"#x\",宽为\"#y\"的长方形的面积：%d\\n\",(x)*(y));</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">AREA(3,4)</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>输出为：长为3,宽为4的长方形的面积：12</p><p><strong>操作符##</strong></p><p>与操作符#类似，操作符##也可用在带参宏中替换部分内容。该操作符将宏中的两个部分连接成一个内容。</p><p>例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#define VAR(n)   v##n</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">v1 = 2,temp1;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">float</code> <code class=\"cpp plain\">v2 = 3.1415,temp2;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 预处理时，VAR(1)替换为v1 */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">temp1 = VAR(1);</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 预处理时，VAR(2)替换为v2 */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">temp2 = VAR(2);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"temp1:%d temp2:%.4f\\n\"</code><code class=\"cpp plain\">,temp1,temp2);</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>输出为：temp1:2 temp2:3.1415</p> </div>\n</div>'),
(77, '4、#include', '八、预处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>当一个C语言程序由多个文件模块组成时，主模块中一般包含main函数和一些当前程序专用的函数。程序从main函数开始执行，在执行过程中，可调用当前文件中的函数，也可调用其他文件模块中的函数。</p><p>如果在模块中要调用其他文件模块中的函数，首先必须在主模块中声明该函数原型。一般都是采用文件包含的方法，包含其他文件模块的头文件。</p><p>文件包含中指定的文件名即可以用引号括起来，也可以用尖括号括起来，格式如下：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;文件名&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">或者</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include \"文件名\"</code></div></div></td></tr></tbody></table><p>例如： </p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include \"stdio.h\"</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">或者</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div></div></td></tr></tbody></table><p>如果使用尖括号&lt;&gt;括起文件名，则编译程序将到C语言开发环境中设置好的include文件中去找指定的文件。</p><p>因为C语言的标准头文件都存放在include文件夹中，所以一般对标准头文件采用尖括号；对编程自己编写的文件，则使用双引号。如果自己编写的文件不是存放在当前工作文件夹，可以在#include命令后面加在路径。</p><p>#include命令的作用是把指定的文件模块内容插入到#include所在的位置，当程序编译链接时，系统会把所有#include指定的文件链接生成可执行代码。文件包含必须以#开头，表示这是编译预处理命令，行尾不能用分号结束。</p><p>#include所包含的文件，其扩展名可以是\".c\",表示包含普通C语言源程序。也可以是\".h\",表示C语言程序的头文件。C语言系统中大量的定义与声明是以头文件形式提供的。</p><p>通过#include包含进来的文件模块中还可以再包含其他文件，这种用法称为嵌套包含。嵌套的层数与具体C语言系统有关，但是一般可以嵌套8层以上。</p> </div>\n</div>'),
(78, '5、#error', '八、预处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>当预处理器预处理到#error命令时将停止编译并输出用户自定义的错误消息。</p><p>语法：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#error [用户自定义的错误消息]</code></div></div></td></tr></tbody></table><p>注：上述语法成份中的方括号“[]”代表用户自定义的错误消息可以省略不写。</p><p>例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp comments\">/* 若没有定义ERRORTEST，</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 则输出not define ERRORTEST！*/</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#ifndef ERRORTEST</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#error not define ERRORTEST！</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp preprocessor\">#endif</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"Hello,World!\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>运行结果为：</p><p>fatal error C1189: #error :  not define ERRORTEST！</p> </div>\n</div>'),
(79, '6、条件编译', '八、预处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>预处理器还提供了条件编译功能。在预处理时，按照不同的条件去编译程序的不同部分，从而得到不同的目标代码。使用条件编译，可方便地处理程序的调试版本和正式版本，也可使用条件编译使程序的移植更方便。</p><p><strong>1) 使用#if</strong></p><p>与C语言的条件分支语句类似，在预处理时，也可以使用分支，根据不同的情况编译不同的源代码段。</p><p>#if 的使用格式如下：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#if 常量表达式</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">程序段</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#else</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">  </code><code class=\"cpp plain\">程序段</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp preprocessor\">#endif</code></div></div></td></tr></tbody></table><p>该条件编译命令的执行过程为：若常量表达式的值为真(非0),则对程序段1进行编译，否则对程序段2进行编译。因此可以使程序在不同条件下完成不同的功能。</p><p>例如:</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#define DEBUG 1</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,j;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">ch[26];</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">  </code> </div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=</code><code class=\"cpp string\">\'a\'</code><code class=\"cpp plain\">;j=0;i&lt;=</code><code class=\"cpp string\">\'z\'</code><code class=\"cpp plain\">;i++,j++)</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">{</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">       </code><code class=\"cpp plain\">ch[j]=i;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">       </code><code class=\"cpp plain\">#</code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">DEBUG</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">          </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"ch[%d]=%c\\n\"</code><code class=\"cpp plain\">,j,ch[j]);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">       </code><code class=\"cpp plain\">#endif</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">}</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=0;j&lt;26;j++)</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">{</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">       </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">,ch[j]);</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">   </code><code class=\"cpp plain\">}</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">   </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>#if预编译命令还可使用多分支语句格式，具体格式如下：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#if 常量表达式 1</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">程序段 1</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#elif 常量表达式 2</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">程序段 2</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">… …</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#elif 常量表达式 n</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">程序段 n</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp preprocessor\">#else</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">程序段 m</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp preprocessor\">#endif</code></div></div></td></tr></tbody></table><p>关键字#elif与多分支if语句中的else if类似。</p><p>#if和#elif还可以进行嵌套，C89标准中，嵌套深度可以到达8层，而C99允许嵌套达到63层。在嵌套时，每个#endif，#else或#elif与最近的#if或#elif配对。</p><p><strong>2) 使用#ifdef和#ifndef</strong></p><p>在上面的#if条件编译命令中，需要判断符号常量定义的具体值。在很多情况下，其实不需要判断符号常量的值，只需要判断是否定义了该符号常量。这时，可不使用#if命令，而使用另外一个预编译命令———#ifdef.</p><p>#ifdef命令的使用格式如下：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#ifdef 标识符</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">程序段 1</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#else</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">程序段 2</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp preprocessor\">#endif</code></div></div></td></tr></tbody></table><p>其意义是，如果#ifdef后面的标识符已被定义过，则对“程序段1”进行编译；如果没有定义标识符，则编译“程序段2”。一般不使用#else及后面的“程序2”。</p><p>而#ifndef的意义与#ifdef相反，其格式如下：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#ifndef 标识符</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">程序段 1</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#else</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">程序段 2</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp preprocessor\">#endif</code></div></div></td></tr></tbody></table><p>其意义是：如果未定义标识符，则编译“程序段1”；否则编译“程序段2”。</p><p><strong>3) 使用#defined和#undef</strong></p><p>与#ifdef类似的，可以在#if命令中使用define来判断是否已定义指定的标识符。例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#if defined 标识符</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">程序段 1  </code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#endif</code></div></div></td></tr></tbody></table><p>与下面的标示方式意义相同。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#ifdef 标识符</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">程序段 1</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#endif</code></div></div></td></tr></tbody></table><p>也可使用逻辑运算符，对defined取反。例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#if ! define 标识符</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">程序段 1</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#endif</code></div></div></td></tr></tbody></table><p>与下面的标示方式意义相同。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#ifndef 标识符</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">程序段 1</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#endif</code></div></div></td></tr></tbody></table><p>在#ifdef和#ifndef命令后面的标识符是使用#define进行定义的。在程序中，还可以使用#undef取消对标识符的定义，其形式为：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#undef 标识符</code></div></div></td></tr></tbody></table><p>例如:</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#define MAX 100</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp plain\">……</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#undef MAX</code></div></div></td></tr></tbody></table><p>在以上代码中，首先使用#define定义标识符MAX,经过一段程序代码后，又可以使用#undef取消已定义的标识符。使用#undef命令后，再使用#ifdef max，将不会编译后的源代码，因为此时标识符MAX已经被取消定义了。</p> </div>\n</div>');
INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(80, '7、#pragma', '八、预处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>命令#pragma 为实现时定义的命令，它允许向编译程序传送各种指令。 </p><p>#pragma的作用是设定编译器的状态或者是指示编译器完成一些特定的动作。#pragma指令对每个编译器给出了一个方法,在保持与C和C++语言完全兼容的情况下,给出主机或操作系统专有的特征。依据定义,编译指示是机器或操作系统专有的,且对于每个编译器都是不同的。 </p><p>其格式一般为: </p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#pragma Para</code></div></div></td></tr></tbody></table><p>其中Para为参数。</p><p><strong>1) message参数</strong> </p><p>Message 参数能够在编译信息输出窗口中输出相应的信息，这对于源代码信息的控制是非常重要的。</p><p>其使用方法为：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#pragma message(\"消息文本\")</code></div></div></td></tr></tbody></table><p>当编译器遇到这条指令时就在编译输出窗口中将消息文本打印出来。 </p><p>当我们在程序中定义了许多宏来控制源代码版本的时候，我们自己有可能都会忘记有没有正确的设置这些宏，此时我们可以用这条指令在编译的时候就进行检查。</p><p>假设想判断有没有在源代码中定义了VERSION2_0这个宏可以用下面的方法 </p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#ifdef VERSION2_0 </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#pragma message(\"VERSION2_0 macro activated!\")</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#endif</code></div></div></td></tr></tbody></table><p>当我们定义了VERSION2_0这个宏以后，应用程序在编译时就会在编译输出窗口里显示\"VERSION2_0 macro activated!\"。</p><p><strong>2) code_seg参数</strong></p><p>格式如： </p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#pragma code_seg([\"section-name\"[,\"section-class\"]])</code></div></div></td></tr></tbody></table><p>它能够设置程序中函数代码存放的代码段，当我们开发驱动程序的时候就会使用到它。  </p><p><strong>3) #pragma once</strong></p><p>只要在头文件的最开始加入这条指令就能够保证头文件被编译一次。  </p><p><strong>4) #pragma hdrstop </strong></p><p>表示预编译头文件到此为止，后面的头文件不进行预编译。BCB可以预编译头文件以加快链接的速度，但如果所有头文件都进行预编译又可能占太多磁盘空间，所以使用这个选项排除一些头文件。 </p><p>有时单元之间有依赖关系，比如单元A依赖单元B，所以单元B要先于单元A编译。你可以用#pragma startup指定编译优先级，如果使用了#pragma package(smart_init)，BCB就会根据优先级的大小先后编译。  </p><p><strong>5) #pragma resource \"*.dfm\" </strong></p><p>表示把*.dfm文件中的资源加入工程。*.dfm中包括窗体外观的定义。  </p><p><strong>6) #pragma warning( disable:4507 34; once:4385; error:164 )</strong></p><p>等价于： </p><p>#pragma warning(disable:4507 34) /* 不显示4507和34号警告信息。如果编译时总是出现4507号警告和34号警告,  而认为肯定不会有错误，可以使用这条指令。*/ </p><p>#pragma warning(once:4385) // 4385号警告信息仅报告一次 </p><p>#pragma warning(error:164) // 把164号警告信息作为一个错误。 </p><p>同时这个pragma warning 也支持如下格式： </p><p>#pragma warning(push [,n ]) </p><p>#pragma warning(pop) </p><p>这里n代表一个警告等级(1---4)。</p><p>#pragma warning(push)保存所有警告信息的现有的警告状态。 </p><p>#pragma warning(push, n)保存所有警告信息的现有的警告状态，并且把全局警告等级设定为n。</p><p>#pragma warning(pop)向栈中弹出最后一个警告信息，在入栈和出栈之间所作的一切改动取消。</p><p>例如： </p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#pragma warning(push)</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#pragma warning(disable:4705)</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#pragma warning(disable:4706)</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#pragma warning(disable:4707) //....... </code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp preprocessor\">#pragma warning(pop)</code></div></div></td></tr></tbody></table><p>在这段代码的最后，重新保存所有的警告信息(包括4705，4706和4707)。  </p><p><strong>7) pragma comment(...) </strong></p><p>该指令将一个注释记录放入一个对象文件或可执行文件中。 常用的lib关键字，可以帮我们连入一个库文件。  </p><p><strong>8) progma pack（n）</strong> </p><p>指定结构体对齐方式。#pragma pack(n)来设定变量以n字节对齐方式。 n字节对齐就是说变量存放的起始地址的偏移量有两种情况： </p><p>第一、如果n大于等于该变量所占用的字节数，那么偏移量必须满足默认的对齐方式; </p><p>第二、如果n小于该变量的类型所占用的字节数，那么偏移量为n的倍数，不用满足默认的对齐方式。 </p><p>结构的总大小也有个约束条件，分下面两种情况：</p><p>如果n大于所有成员变量类型所占用的字节数，那么结构的总大小必须为占用空间最大的变量占用的空间数的倍数； </p><p>否则必须为n的倍数。</p><p>例如：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#pragma pack(push) /* 保存对齐状态  */</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#pragma pack(4)   /* 设定为4字节对齐 */</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">test{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">m1;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">double</code> <code class=\"cpp plain\">m4;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">m3;</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">};</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp preprocessor\">#pragma pack(pop) /* 恢复对齐状态 */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">test_size;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">test_size = </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">test);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"size of test is: %d\\n\"</code><code class=\"cpp plain\">,test_size);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>输出为：size of test is: 16</p> </div>\n</div>'),
(81, '8、#line', '八、预处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>使用__LINE__预定义宏名赈灾编译的程序行号。使用#line命令可改变预定义宏__LINE__与__FILE__的内容，该命令的基本形如下：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp spaces\"> </code><code class=\"cpp plain\">#line number[</code><code class=\"cpp string\">\"filename\"</code><code class=\"cpp plain\">]</code></div></div></td></tr></tbody></table><p>其中的数字为一个正整数，可选的文件名为有效文件标识符。行号为源代码中当前行号，文件名为源文件的名字。命令为#line主要用于调试以及其他特殊应用。</p><p>例如:</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#line 1000</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"当前行号：%d\\n\"</code><code class=\"cpp plain\">,__LINE__);</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>当前行号：1003</p><p>该程序第4行中使用#line定义的行号为从1000开始(不包括#line这行)。所以第5行的编号将为1000，第6行为1001，第7行为1002，第8行为1003。</p> </div>\n</div>'),
(82, '9、其他预处理命令', '八、预处理', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>ANSI C标准预定义了五个宏名，每个宏名的前后均有两个下画线，避免与程序员定义相同的宏名(一般都不会定义前后有两个下划线的宏)。这5个宏名如下：</p><p>__DATE__:当前源程序的创建日期。</p><p>__FILE__:当前源程序的文件名称(包括盘符和路径)。</p><p>__LINE__:当前被编译代码的行号。</p><p>__STDC__:返回编译器是否位标准C,若其值为1表示符合标准C，否则不是标准C.</p><p>__TIME__:当前源程序的创建时间。</p><p>例如:</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"日期：%s\\n\"</code><code class=\"cpp plain\">,__DATE__);</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"时间：%s\\n\"</code><code class=\"cpp plain\">,__TIME__};</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"文件名：%s\\n\"</code><code class=\"cpp plain\">,__FILE__);</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"这是第%d行代码\\n\"</code><code class=\"cpp plain\">,__LINE__);</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"本编译器%s标准C\\n\"</code><code class=\"cpp plain\">,(__STD__)?</code><code class=\"cpp string\">\"符合\"</code><code class=\"cpp plain\">:</code><code class=\"cpp string\">\"不符合\"</code><code class=\"cpp plain\">)；</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>输出为：</p><p>日期：Nov  4 2014</p><p>时间：20:16:12</p><p>文件名：C:/Examples/macro.c</p><p>这是第10行代码</p><p>本编译器符合标准C</p> </div>\n</div>');
INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(83, '1、单链表', '九、链表', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>链表是用一组任意的存储单元存储线性表元素的一种数据结构。</p><p>单链表，是指数据接点是单向排列的。一个单链表结点，其结构类型分为两部分：</p><p>1、数据域：用来存储本身数据</p><p>2、链域或称为指针域：用来存储下一个结点地址或者说指向其直接后继的指针。</p><p>单链表的实现：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div><div class=\"line number121 index120 alt2\">121</div><div class=\"line number122 index121 alt1\">122</div><div class=\"line number123 index122 alt2\">123</div><div class=\"line number124 index123 alt1\">124</div><div class=\"line number125 index124 alt2\">125</div><div class=\"line number126 index125 alt1\">126</div><div class=\"line number127 index126 alt2\">127</div><div class=\"line number128 index127 alt1\">128</div><div class=\"line number129 index128 alt2\">129</div><div class=\"line number130 index129 alt1\">130</div><div class=\"line number131 index130 alt2\">131</div><div class=\"line number132 index131 alt1\">132</div><div class=\"line number133 index132 alt2\">133</div><div class=\"line number134 index133 alt1\">134</div><div class=\"line number135 index134 alt2\">135</div><div class=\"line number136 index135 alt1\">136</div><div class=\"line number137 index136 alt2\">137</div><div class=\"line number138 index137 alt1\">138</div><div class=\"line number139 index138 alt2\">139</div><div class=\"line number140 index139 alt1\">140</div><div class=\"line number141 index140 alt2\">141</div><div class=\"line number142 index141 alt1\">142</div><div class=\"line number143 index142 alt2\">143</div><div class=\"line number144 index143 alt1\">144</div><div class=\"line number145 index144 alt2\">145</div><div class=\"line number146 index145 alt1\">146</div><div class=\"line number147 index146 alt2\">147</div><div class=\"line number148 index147 alt1\">148</div><div class=\"line number149 index148 alt2\">149</div><div class=\"line number150 index149 alt1\">150</div><div class=\"line number151 index150 alt2\">151</div><div class=\"line number152 index151 alt1\">152</div><div class=\"line number153 index152 alt2\">153</div><div class=\"line number154 index153 alt1\">154</div><div class=\"line number155 index154 alt2\">155</div><div class=\"line number156 index155 alt1\">156</div><div class=\"line number157 index156 alt2\">157</div><div class=\"line number158 index157 alt1\">158</div><div class=\"line number159 index158 alt2\">159</div><div class=\"line number160 index159 alt1\">160</div><div class=\"line number161 index160 alt2\">161</div><div class=\"line number162 index161 alt1\">162</div><div class=\"line number163 index162 alt2\">163</div><div class=\"line number164 index163 alt1\">164</div><div class=\"line number165 index164 alt2\">165</div><div class=\"line number166 index165 alt1\">166</div><div class=\"line number167 index166 alt2\">167</div><div class=\"line number168 index167 alt1\">168</div><div class=\"line number169 index168 alt2\">169</div><div class=\"line number170 index169 alt1\">170</div><div class=\"line number171 index170 alt2\">171</div><div class=\"line number172 index171 alt1\">172</div><div class=\"line number173 index172 alt2\">173</div><div class=\"line number174 index173 alt1\">174</div><div class=\"line number175 index174 alt2\">175</div><div class=\"line number176 index175 alt1\">176</div><div class=\"line number177 index176 alt2\">177</div><div class=\"line number178 index177 alt1\">178</div><div class=\"line number179 index178 alt2\">179</div><div class=\"line number180 index179 alt1\">180</div><div class=\"line number181 index180 alt2\">181</div><div class=\"line number182 index181 alt1\">182</div><div class=\"line number183 index182 alt2\">183</div><div class=\"line number184 index183 alt1\">184</div><div class=\"line number185 index184 alt2\">185</div><div class=\"line number186 index185 alt1\">186</div><div class=\"line number187 index186 alt2\">187</div><div class=\"line number188 index187 alt1\">188</div><div class=\"line number189 index188 alt2\">189</div><div class=\"line number190 index189 alt1\">190</div><div class=\"line number191 index190 alt2\">191</div><div class=\"line number192 index191 alt1\">192</div><div class=\"line number193 index192 alt2\">193</div><div class=\"line number194 index193 alt1\">194</div><div class=\"line number195 index194 alt2\">195</div><div class=\"line number196 index195 alt1\">196</div><div class=\"line number197 index196 alt2\">197</div><div class=\"line number198 index197 alt1\">198</div><div class=\"line number199 index198 alt2\">199</div><div class=\"line number200 index199 alt1\">200</div><div class=\"line number201 index200 alt2\">201</div><div class=\"line number202 index201 alt1\">202</div><div class=\"line number203 index202 alt2\">203</div><div class=\"line number204 index203 alt1\">204</div><div class=\"line number205 index204 alt2\">205</div><div class=\"line number206 index205 alt1\">206</div><div class=\"line number207 index206 alt2\">207</div><div class=\"line number208 index207 alt1\">208</div><div class=\"line number209 index208 alt2\">209</div><div class=\"line number210 index209 alt1\">210</div><div class=\"line number211 index210 alt2\">211</div><div class=\"line number212 index211 alt1\">212</div><div class=\"line number213 index212 alt2\">213</div><div class=\"line number214 index213 alt1\">214</div><div class=\"line number215 index214 alt2\">215</div><div class=\"line number216 index215 alt1\">216</div><div class=\"line number217 index216 alt2\">217</div><div class=\"line number218 index217 alt1\">218</div><div class=\"line number219 index218 alt2\">219</div><div class=\"line number220 index219 alt1\">220</div><div class=\"line number221 index220 alt2\">221</div><div class=\"line number222 index221 alt1\">222</div><div class=\"line number223 index222 alt2\">223</div><div class=\"line number224 index223 alt1\">224</div><div class=\"line number225 index224 alt2\">225</div><div class=\"line number226 index225 alt1\">226</div><div class=\"line number227 index226 alt2\">227</div><div class=\"line number228 index227 alt1\">228</div><div class=\"line number229 index228 alt2\">229</div><div class=\"line number230 index229 alt1\">230</div><div class=\"line number231 index230 alt2\">231</div><div class=\"line number232 index231 alt1\">232</div><div class=\"line number233 index232 alt2\">233</div><div class=\"line number234 index233 alt1\">234</div><div class=\"line number235 index234 alt2\">235</div><div class=\"line number236 index235 alt1\">236</div><div class=\"line number237 index236 alt2\">237</div><div class=\"line number238 index237 alt1\">238</div><div class=\"line number239 index238 alt2\">239</div><div class=\"line number240 index239 alt1\">240</div><div class=\"line number241 index240 alt2\">241</div><div class=\"line number242 index241 alt1\">242</div><div class=\"line number243 index242 alt2\">243</div><div class=\"line number244 index243 alt1\">244</div><div class=\"line number245 index244 alt2\">245</div><div class=\"line number246 index245 alt1\">246</div><div class=\"line number247 index246 alt2\">247</div><div class=\"line number248 index247 alt1\">248</div><div class=\"line number249 index248 alt2\">249</div><div class=\"line number250 index249 alt1\">250</div><div class=\"line number251 index250 alt2\">251</div><div class=\"line number252 index251 alt1\">252</div><div class=\"line number253 index252 alt2\">253</div><div class=\"line number254 index253 alt1\">254</div><div class=\"line number255 index254 alt2\">255</div><div class=\"line number256 index255 alt1\">256</div><div class=\"line number257 index256 alt2\">257</div><div class=\"line number258 index257 alt1\">258</div><div class=\"line number259 index258 alt2\">259</div><div class=\"line number260 index259 alt1\">260</div><div class=\"line number261 index260 alt2\">261</div><div class=\"line number262 index261 alt1\">262</div><div class=\"line number263 index262 alt2\">263</div><div class=\"line number264 index263 alt1\">264</div><div class=\"line number265 index264 alt2\">265</div><div class=\"line number266 index265 alt1\">266</div><div class=\"line number267 index266 alt2\">267</div><div class=\"line number268 index267 alt1\">268</div><div class=\"line number269 index268 alt2\">269</div><div class=\"line number270 index269 alt1\">270</div><div class=\"line number271 index270 alt2\">271</div><div class=\"line number272 index271 alt1\">272</div><div class=\"line number273 index272 alt2\">273</div><div class=\"line number274 index273 alt1\">274</div><div class=\"line number275 index274 alt2\">275</div><div class=\"line number276 index275 alt1\">276</div><div class=\"line number277 index276 alt2\">277</div><div class=\"line number278 index277 alt1\">278</div><div class=\"line number279 index278 alt2\">279</div><div class=\"line number280 index279 alt1\">280</div><div class=\"line number281 index280 alt2\">281</div><div class=\"line number282 index281 alt1\">282</div><div class=\"line number283 index282 alt2\">283</div><div class=\"line number284 index283 alt1\">284</div><div class=\"line number285 index284 alt2\">285</div><div class=\"line number286 index285 alt1\">286</div><div class=\"line number287 index286 alt2\">287</div><div class=\"line number288 index287 alt1\">288</div><div class=\"line number289 index288 alt2\">289</div><div class=\"line number290 index289 alt1\">290</div><div class=\"line number291 index290 alt2\">291</div><div class=\"line number292 index291 alt1\">292</div><div class=\"line number293 index292 alt2\">293</div><div class=\"line number294 index293 alt1\">294</div><div class=\"line number295 index294 alt2\">295</div><div class=\"line number296 index295 alt1\">296</div><div class=\"line number297 index296 alt2\">297</div><div class=\"line number298 index297 alt1\">298</div><div class=\"line number299 index298 alt2\">299</div><div class=\"line number300 index299 alt1\">300</div><div class=\"line number301 index300 alt2\">301</div><div class=\"line number302 index301 alt1\">302</div><div class=\"line number303 index302 alt2\">303</div><div class=\"line number304 index303 alt1\">304</div><div class=\"line number305 index304 alt2\">305</div><div class=\"line number306 index305 alt1\">306</div><div class=\"line number307 index306 alt2\">307</div><div class=\"line number308 index307 alt1\">308</div><div class=\"line number309 index308 alt2\">309</div><div class=\"line number310 index309 alt1\">310</div><div class=\"line number311 index310 alt2\">311</div><div class=\"line number312 index311 alt1\">312</div><div class=\"line number313 index312 alt2\">313</div><div class=\"line number314 index313 alt1\">314</div><div class=\"line number315 index314 alt2\">315</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp comments\">/* 单链表的最大长度 */</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#define MAXSIZE 100</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 单链表结点类型定义 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* 定义elemtype为int类型 */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">elemtype;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp comments\">/* 单链表的结点类型 */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">link_node{</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">elemtype elem;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">link_node *next;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">}list,*linklist;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp comments\">/* 1、初始化单链表</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp comments\">* 参数：链表(L)。</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp comments\">* 返回值：成功返回1,否则返回0</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">initList(linklist *L)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 头结点申请内存 */</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*L)=(linklist)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(list));</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 判断有无申请到空间 */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!(*L))</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 没有申请到内存返回0 */</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*L)-&gt;next=NULL;</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*L)-&gt;elem=0;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp comments\">/* 2、清空单链表</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp comments\">* 参数：链表(L)。</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp comments\">* 返回值：成功返回1</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">clearList(linklist *L)</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">linklist p,q;</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">((*L) == NULL || (*L)-&gt;next!=NULL)</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p=(*L)-&gt;next;</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 当p非空时，删除p */</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p)</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">q=p;</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(q);</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 只剩头指针，所以L-&gt;next=NULL */</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*L)-&gt;next=NULL;</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 清空后链表中元素为0 */</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*L)-&gt;elem=0;</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp comments\">/* 3、求链表长度。</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp comments\">* 参数：链表(L)。</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp comments\">* 返回链表的长度</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp comments\">*/</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">getLength(linklist L)</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">linklist p;</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len=0;</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len=0;</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(L==NULL||L-&gt;next==NULL)</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p=L-&gt;next;</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p)</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 统计链表中元素 */</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">len++;</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">len;</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp comments\">/* */</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp comments\">/* 4、判断链表是否为空。</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp comments\">* 参数：链表(L)。</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp comments\">* 返回值：为空返回1,否则返回0</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp comments\">*/</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">isEmpty(linklist L)</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(L==NULL||L-&gt;next==NULL)</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp comments\">/* 5、判断链表是否为满。</code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp comments\">* 参数：链表(L)。</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp comments\">* 返回值：为满时返回1,否则返回0</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">isFull(linklist L)</code></div><div class=\"line number94 index93 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(getLength(L)&lt;=MAXSIZE)</code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp comments\">/* 6、遍历链表,输出每个节点的elem值</code></div><div class=\"line number105 index104 alt2\"><code class=\"cpp comments\">* 参数：链表(L)</code></div><div class=\"line number106 index105 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">printList(linklist L)</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">linklist p;</code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(L==NULL||L-&gt;next==NULL)</code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">;</code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p=L-&gt;next;</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 链表为空 */</code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(isEmpty(L)==1)</code><code class=\"cpp comments\">//当链表为空时则输出链表为空</code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"链表为空！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number118 index117 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 链表不为空 */</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p)</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number121 index120 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d  \"</code><code class=\"cpp plain\">,p-&gt;elem);</code></div><div class=\"line number122 index121 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number123 index122 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number124 index123 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number125 index124 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number126 index125 alt1\"><code class=\"cpp comments\">/* 7、定位元素在表中的位置</code></div><div class=\"line number127 index126 alt2\"><code class=\"cpp comments\">* 参数：链表(L)</code></div><div class=\"line number128 index127 alt1\"><code class=\"cpp comments\">*       给定元素(elem)</code></div><div class=\"line number129 index128 alt2\"><code class=\"cpp comments\">* 返回值：表中有给定元素i则返回元素的位置,没有则返回0</code></div><div class=\"line number130 index129 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number131 index130 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">locatElem(linklist L,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">e)</code></div><div class=\"line number132 index131 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number133 index132 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">linklist p;</code></div><div class=\"line number134 index133 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">loc=0;</code></div><div class=\"line number135 index134 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(L==NULL||L-&gt;next==NULL)</code></div><div class=\"line number136 index135 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number137 index136 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p=L-&gt;next; </code></div><div class=\"line number138 index137 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p)</code></div><div class=\"line number139 index138 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number140 index139 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">loc++;</code></div><div class=\"line number141 index140 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 判断有无元素e */</code></div><div class=\"line number142 index141 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(p-&gt;elem==e)</code></div><div class=\"line number143 index142 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number144 index143 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 有返回其位置 */</code></div><div class=\"line number145 index144 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">loc;</code></div><div class=\"line number146 index145 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number147 index146 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number148 index147 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number149 index148 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 没有则返回0 */</code></div><div class=\"line number150 index149 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number151 index150 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number152 index151 alt1\"><code class=\"cpp comments\">/* 8、向链表插入元素</code></div><div class=\"line number153 index152 alt2\"><code class=\"cpp comments\">* 参数：链表(L)</code></div><div class=\"line number154 index153 alt1\"><code class=\"cpp comments\">*       位置(loc)</code></div><div class=\"line number155 index154 alt2\"><code class=\"cpp comments\">*       元素(e)。</code></div><div class=\"line number156 index155 alt1\"><code class=\"cpp comments\">* 返回值：成功返回1,否则返回0</code></div><div class=\"line number157 index156 alt2\"><code class=\"cpp comments\">*/</code></div><div class=\"line number158 index157 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">insertElem(linklist L,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">loc,elemtype e)</code></div><div class=\"line number159 index158 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number160 index159 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">linklist p,s;</code></div><div class=\"line number161 index160 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j = 0;</code></div><div class=\"line number162 index161 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(L==NULL)</code></div><div class=\"line number163 index162 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">initList(&amp;L);</code></div><div class=\"line number164 index163 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p = L;</code></div><div class=\"line number165 index164 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p&amp;&amp;j&lt;loc-1)</code></div><div class=\"line number166 index165 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number167 index166 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p = p-&gt;next;</code></div><div class=\"line number168 index167 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">j++;</code></div><div class=\"line number169 index168 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number170 index169 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 不符合条件返回0 */</code></div><div class=\"line number171 index170 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(j&gt;loc-1||!p)</code></div><div class=\"line number172 index171 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number173 index172 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number174 index173 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number175 index174 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 给节点s分配内存 */</code></div><div class=\"line number176 index175 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s=(linklist)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(list));</code></div><div class=\"line number177 index176 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;elem=e;</code></div><div class=\"line number178 index177 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;next=p-&gt;next;</code></div><div class=\"line number179 index178 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p-&gt;next=s;</code></div><div class=\"line number180 index179 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 头结点的elem加1，作为链表的长度*/</code></div><div class=\"line number181 index180 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">L-&gt;elem++;</code></div><div class=\"line number182 index181 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number183 index182 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number184 index183 alt1\"><code class=\"cpp comments\">/* 9、在指定位置删除元素</code></div><div class=\"line number185 index184 alt2\"><code class=\"cpp comments\">* 参数：链表(linklist?L)</code></div><div class=\"line number186 index185 alt1\"><code class=\"cpp comments\">*       位置(loc)</code></div><div class=\"line number187 index186 alt2\"><code class=\"cpp comments\">* 返回值：成功返回1,否则返回0</code></div><div class=\"line number188 index187 alt1\"><code class=\"cpp comments\">*/</code></div><div class=\"line number189 index188 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">delElem(linklist L,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">loc)</code></div><div class=\"line number190 index189 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number191 index190 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">linklist p,q;</code></div><div class=\"line number192 index191 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j=0;</code></div><div class=\"line number193 index192 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p=L;</code></div><div class=\"line number194 index193 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 查找第loc个元素的前驱 */</code></div><div class=\"line number195 index194 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p-&gt;next&amp;&amp;j&lt;loc-1)</code></div><div class=\"line number196 index195 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number197 index196 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number198 index197 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">j++;</code></div><div class=\"line number199 index198 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number200 index199 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 没找到返回0 */</code></div><div class=\"line number201 index200 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(j&gt;loc-1||!(p-&gt;next))</code></div><div class=\"line number202 index201 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number203 index202 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number204 index203 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number205 index204 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">q=p-&gt;next;</code></div><div class=\"line number206 index205 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 删除操作 */</code></div><div class=\"line number207 index206 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p-&gt;next=q-&gt;next;</code></div><div class=\"line number208 index207 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(q);</code></div><div class=\"line number209 index208 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 头结点的elem(链表的长度)减1 */</code></div><div class=\"line number210 index209 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">L-&gt;elem--;</code></div><div class=\"line number211 index210 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number212 index211 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number213 index212 alt2\"><code class=\"cpp comments\">/* 显示单链表操作功能 */</code></div><div class=\"line number214 index213 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">singleLink(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number215 index214 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number216 index215 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number217 index216 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\t\\t\\t\\t单链表操作\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number218 index217 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\t\\t------------------------------------------\\n\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number219 index218 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\t\\t1 链表初始化\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number220 index219 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\t\\t2 清空链表\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number221 index220 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\t\\t3 求链表长度\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number222 index221 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\t\\t4 链表是否为空\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number223 index222 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\t\\t5 检查链表是否为满\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number224 index223 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\t\\t6 遍历链表\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number225 index224 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\t\\t7 从链表中查找元素\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number226 index225 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\t\\t8 向链表中插入元素\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number227 index226 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\t\\t9 从链表中删除元素\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number228 index227 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\t\\t其他键退出\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number229 index228 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\t\\t------------------------------------------\\n\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number230 index229 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\t\\t请选择要进行操作的序号（1--9）:\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number231 index230 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number232 index231 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number233 index232 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number234 index233 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">choice,len,e,loc;</code></div><div class=\"line number235 index234 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">linklist L = NULL;</code></div><div class=\"line number236 index235 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 显示主界面 */</code></div><div class=\"line number237 index236 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">singleLink();</code></div><div class=\"line number238 index237 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;choice);</code></div><div class=\"line number239 index238 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">do</code></div><div class=\"line number240 index239 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number241 index240 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">switch</code><code class=\"cpp plain\">(choice)</code></div><div class=\"line number242 index241 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number243 index242 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">1:</code><code class=\"cpp comments\">//初始化</code></div><div class=\"line number244 index243 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(initList(&amp;L)==1)</code></div><div class=\"line number245 index244 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"初始化成功！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number246 index245 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number247 index246 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"初始化失败！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number248 index247 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number249 index248 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">2:</code><code class=\"cpp comments\">//链表置空</code></div><div class=\"line number250 index249 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(clearList(&amp;L)==1)</code></div><div class=\"line number251 index250 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"链表已清空！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number252 index251 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number253 index252 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"链表清空失败！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number254 index253 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;   </code></div><div class=\"line number255 index254 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">3:</code><code class=\"cpp comments\">//链表的长度</code></div><div class=\"line number256 index255 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">len=getLength(L);</code></div><div class=\"line number257 index256 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"链表的长度为：%d\\n\"</code><code class=\"cpp plain\">,len);</code></div><div class=\"line number258 index257 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number259 index258 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">4:</code><code class=\"cpp comments\">//判断链表是否空</code></div><div class=\"line number260 index259 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(isEmpty(L)==1)</code></div><div class=\"line number261 index260 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"链表为空！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number262 index261 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number263 index262 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"链表不空！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number264 index263 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number265 index264 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">5:</code><code class=\"cpp comments\">//判断链表是否满</code></div><div class=\"line number266 index265 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(isFull(L)==1)</code></div><div class=\"line number267 index266 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"链表已满！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number268 index267 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number269 index268 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"链表不满！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number270 index269 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number271 index270 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">6:</code><code class=\"cpp comments\">//遍历链表</code></div><div class=\"line number272 index271 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">printList(L);</code></div><div class=\"line number273 index272 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number274 index273 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">7: </code><code class=\"cpp comments\">//输出链表要查找元素的位置</code></div><div class=\"line number275 index274 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"您要查找的元素为：\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number276 index275 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;e);</code></div><div class=\"line number277 index276 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(locatElem(L,e)==0)</code></div><div class=\"line number278 index277 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"没有您要查找的元素:%d\\n\"</code><code class=\"cpp plain\">,e);</code></div><div class=\"line number279 index278 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number280 index279 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"您查找的元素[%d]在第[%d]个位置\\n\"</code><code class=\"cpp plain\">,e,locatElem(L,e));</code></div><div class=\"line number281 index280 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number282 index281 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">8:</code></div><div class=\"line number283 index282 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"输入你要插入的位置和元素：\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number284 index283 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d%d\"</code><code class=\"cpp plain\">,&amp;loc,&amp;e);</code></div><div class=\"line number285 index284 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(loc&lt;=0||loc&gt;getLength(L)+1)</code></div><div class=\"line number286 index285 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number287 index286 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"插入位置错误！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number288 index287 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number289 index288 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number290 index289 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">insertElem(L,loc,e);</code></div><div class=\"line number291 index290 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number292 index291 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">9:</code></div><div class=\"line number293 index292 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(getLength(L)==0)</code></div><div class=\"line number294 index293 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number295 index294 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"链表为空无法删除！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number296 index295 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number297 index296 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number298 index297 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"输入你要删除元素的位置：\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number299 index298 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;loc);</code></div><div class=\"line number300 index299 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(loc&lt;=0||loc&gt;getLength(L))</code></div><div class=\"line number301 index300 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number302 index301 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"输入错误！\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number303 index302 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number304 index303 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number305 index304 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">delElem(L,loc);</code></div><div class=\"line number306 index305 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number307 index306 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">default</code><code class=\"cpp plain\">:</code></div><div class=\"line number308 index307 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number309 index308 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number310 index309 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code><code class=\"cpp comments\">//按任意键继续</code></div><div class=\"line number311 index310 alt2\"><code class=\"cpp space');
INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(84, '2、循环链表', '九、链表', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>循环链表是与单链表一样，是一种链式的存储结构，所不同的是，循环链表的最后一个结点的指针是指向该循环链表的第一个结点或者表头结点，从而构成一个环形的链。</p><p>循环链表的运算与单链表的运算基本一致。所不同的有以下几点：</p><p>1、在建立一个循环链表时，必须使其最后一个结点的指针指向表头结点，而不是象单链表那样置为NULL。此种情况还使用于在最后一个结点后插入一个新的结点。 </p><p>2、在判断是否到表尾时，是判断该结点链域的值是否是表头结点，当链域值等于表头指针时，说明已到表尾。而非象单链表那样判断链域值是否为NULL。</p><p>循环链表实现：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div><div class=\"line number121 index120 alt2\">121</div><div class=\"line number122 index121 alt1\">122</div><div class=\"line number123 index122 alt2\">123</div><div class=\"line number124 index123 alt1\">124</div><div class=\"line number125 index124 alt2\">125</div><div class=\"line number126 index125 alt1\">126</div><div class=\"line number127 index126 alt2\">127</div><div class=\"line number128 index127 alt1\">128</div><div class=\"line number129 index128 alt2\">129</div><div class=\"line number130 index129 alt1\">130</div><div class=\"line number131 index130 alt2\">131</div><div class=\"line number132 index131 alt1\">132</div><div class=\"line number133 index132 alt2\">133</div><div class=\"line number134 index133 alt1\">134</div><div class=\"line number135 index134 alt2\">135</div><div class=\"line number136 index135 alt1\">136</div><div class=\"line number137 index136 alt2\">137</div><div class=\"line number138 index137 alt1\">138</div><div class=\"line number139 index138 alt2\">139</div><div class=\"line number140 index139 alt1\">140</div><div class=\"line number141 index140 alt2\">141</div><div class=\"line number142 index141 alt1\">142</div><div class=\"line number143 index142 alt2\">143</div><div class=\"line number144 index143 alt1\">144</div><div class=\"line number145 index144 alt2\">145</div><div class=\"line number146 index145 alt1\">146</div><div class=\"line number147 index146 alt2\">147</div><div class=\"line number148 index147 alt1\">148</div><div class=\"line number149 index148 alt2\">149</div><div class=\"line number150 index149 alt1\">150</div><div class=\"line number151 index150 alt2\">151</div><div class=\"line number152 index151 alt1\">152</div><div class=\"line number153 index152 alt2\">153</div><div class=\"line number154 index153 alt1\">154</div><div class=\"line number155 index154 alt2\">155</div><div class=\"line number156 index155 alt1\">156</div><div class=\"line number157 index156 alt2\">157</div><div class=\"line number158 index157 alt1\">158</div><div class=\"line number159 index158 alt2\">159</div><div class=\"line number160 index159 alt1\">160</div><div class=\"line number161 index160 alt2\">161</div><div class=\"line number162 index161 alt1\">162</div><div class=\"line number163 index162 alt2\">163</div><div class=\"line number164 index163 alt1\">164</div><div class=\"line number165 index164 alt2\">165</div><div class=\"line number166 index165 alt1\">166</div><div class=\"line number167 index166 alt2\">167</div><div class=\"line number168 index167 alt1\">168</div><div class=\"line number169 index168 alt2\">169</div><div class=\"line number170 index169 alt1\">170</div><div class=\"line number171 index170 alt2\">171</div><div class=\"line number172 index171 alt1\">172</div><div class=\"line number173 index172 alt2\">173</div><div class=\"line number174 index173 alt1\">174</div><div class=\"line number175 index174 alt2\">175</div><div class=\"line number176 index175 alt1\">176</div><div class=\"line number177 index176 alt2\">177</div><div class=\"line number178 index177 alt1\">178</div><div class=\"line number179 index178 alt2\">179</div><div class=\"line number180 index179 alt1\">180</div><div class=\"line number181 index180 alt2\">181</div><div class=\"line number182 index181 alt1\">182</div><div class=\"line number183 index182 alt2\">183</div><div class=\"line number184 index183 alt1\">184</div><div class=\"line number185 index184 alt2\">185</div><div class=\"line number186 index185 alt1\">186</div><div class=\"line number187 index186 alt2\">187</div><div class=\"line number188 index187 alt1\">188</div><div class=\"line number189 index188 alt2\">189</div><div class=\"line number190 index189 alt1\">190</div><div class=\"line number191 index190 alt2\">191</div><div class=\"line number192 index191 alt1\">192</div><div class=\"line number193 index192 alt2\">193</div><div class=\"line number194 index193 alt1\">194</div><div class=\"line number195 index194 alt2\">195</div><div class=\"line number196 index195 alt1\">196</div><div class=\"line number197 index196 alt2\">197</div><div class=\"line number198 index197 alt1\">198</div><div class=\"line number199 index198 alt2\">199</div><div class=\"line number200 index199 alt1\">200</div><div class=\"line number201 index200 alt2\">201</div><div class=\"line number202 index201 alt1\">202</div><div class=\"line number203 index202 alt2\">203</div><div class=\"line number204 index203 alt1\">204</div><div class=\"line number205 index204 alt2\">205</div><div class=\"line number206 index205 alt1\">206</div><div class=\"line number207 index206 alt2\">207</div><div class=\"line number208 index207 alt1\">208</div><div class=\"line number209 index208 alt2\">209</div><div class=\"line number210 index209 alt1\">210</div><div class=\"line number211 index210 alt2\">211</div><div class=\"line number212 index211 alt1\">212</div><div class=\"line number213 index212 alt2\">213</div><div class=\"line number214 index213 alt1\">214</div><div class=\"line number215 index214 alt2\">215</div><div class=\"line number216 index215 alt1\">216</div><div class=\"line number217 index216 alt2\">217</div><div class=\"line number218 index217 alt1\">218</div><div class=\"line number219 index218 alt2\">219</div><div class=\"line number220 index219 alt1\">220</div><div class=\"line number221 index220 alt2\">221</div><div class=\"line number222 index221 alt1\">222</div><div class=\"line number223 index222 alt2\">223</div><div class=\"line number224 index223 alt1\">224</div><div class=\"line number225 index224 alt2\">225</div><div class=\"line number226 index225 alt1\">226</div><div class=\"line number227 index226 alt2\">227</div><div class=\"line number228 index227 alt1\">228</div><div class=\"line number229 index228 alt2\">229</div><div class=\"line number230 index229 alt1\">230</div><div class=\"line number231 index230 alt2\">231</div><div class=\"line number232 index231 alt1\">232</div><div class=\"line number233 index232 alt2\">233</div><div class=\"line number234 index233 alt1\">234</div><div class=\"line number235 index234 alt2\">235</div><div class=\"line number236 index235 alt1\">236</div><div class=\"line number237 index236 alt2\">237</div><div class=\"line number238 index237 alt1\">238</div><div class=\"line number239 index238 alt2\">239</div><div class=\"line number240 index239 alt1\">240</div><div class=\"line number241 index240 alt2\">241</div><div class=\"line number242 index241 alt1\">242</div><div class=\"line number243 index242 alt2\">243</div><div class=\"line number244 index243 alt1\">244</div><div class=\"line number245 index244 alt2\">245</div><div class=\"line number246 index245 alt1\">246</div><div class=\"line number247 index246 alt2\">247</div><div class=\"line number248 index247 alt1\">248</div><div class=\"line number249 index248 alt2\">249</div><div class=\"line number250 index249 alt1\">250</div><div class=\"line number251 index250 alt2\">251</div><div class=\"line number252 index251 alt1\">252</div><div class=\"line number253 index252 alt2\">253</div><div class=\"line number254 index253 alt1\">254</div><div class=\"line number255 index254 alt2\">255</div><div class=\"line number256 index255 alt1\">256</div><div class=\"line number257 index256 alt2\">257</div><div class=\"line number258 index257 alt1\">258</div><div class=\"line number259 index258 alt2\">259</div><div class=\"line number260 index259 alt1\">260</div><div class=\"line number261 index260 alt2\">261</div><div class=\"line number262 index261 alt1\">262</div><div class=\"line number263 index262 alt2\">263</div><div class=\"line number264 index263 alt1\">264</div><div class=\"line number265 index264 alt2\">265</div><div class=\"line number266 index265 alt1\">266</div><div class=\"line number267 index266 alt2\">267</div><div class=\"line number268 index267 alt1\">268</div><div class=\"line number269 index268 alt2\">269</div><div class=\"line number270 index269 alt1\">270</div><div class=\"line number271 index270 alt2\">271</div><div class=\"line number272 index271 alt1\">272</div><div class=\"line number273 index272 alt2\">273</div><div class=\"line number274 index273 alt1\">274</div><div class=\"line number275 index274 alt2\">275</div><div class=\"line number276 index275 alt1\">276</div><div class=\"line number277 index276 alt2\">277</div><div class=\"line number278 index277 alt1\">278</div><div class=\"line number279 index278 alt2\">279</div><div class=\"line number280 index279 alt1\">280</div><div class=\"line number281 index280 alt2\">281</div><div class=\"line number282 index281 alt1\">282</div><div class=\"line number283 index282 alt2\">283</div><div class=\"line number284 index283 alt1\">284</div><div class=\"line number285 index284 alt2\">285</div><div class=\"line number286 index285 alt1\">286</div><div class=\"line number287 index286 alt2\">287</div><div class=\"line number288 index287 alt1\">288</div><div class=\"line number289 index288 alt2\">289</div><div class=\"line number290 index289 alt1\">290</div><div class=\"line number291 index290 alt2\">291</div><div class=\"line number292 index291 alt1\">292</div><div class=\"line number293 index292 alt2\">293</div><div class=\"line number294 index293 alt1\">294</div><div class=\"line number295 index294 alt2\">295</div><div class=\"line number296 index295 alt1\">296</div><div class=\"line number297 index296 alt2\">297</div><div class=\"line number298 index297 alt1\">298</div><div class=\"line number299 index298 alt2\">299</div><div class=\"line number300 index299 alt1\">300</div><div class=\"line number301 index300 alt2\">301</div><div class=\"line number302 index301 alt1\">302</div><div class=\"line number303 index302 alt2\">303</div><div class=\"line number304 index303 alt1\">304</div><div class=\"line number305 index304 alt2\">305</div><div class=\"line number306 index305 alt1\">306</div><div class=\"line number307 index306 alt2\">307</div><div class=\"line number308 index307 alt1\">308</div><div class=\"line number309 index308 alt2\">309</div><div class=\"line number310 index309 alt1\">310</div><div class=\"line number311 index310 alt2\">311</div><div class=\"line number312 index311 alt1\">312</div><div class=\"line number313 index312 alt2\">313</div><div class=\"line number314 index313 alt1\">314</div><div class=\"line number315 index314 alt2\">315</div><div class=\"line number316 index315 alt1\">316</div><div class=\"line number317 index316 alt2\">317</div><div class=\"line number318 index317 alt1\">318</div><div class=\"line number319 index318 alt2\">319</div><div class=\"line number320 index319 alt1\">320</div><div class=\"line number321 index320 alt2\">321</div><div class=\"line number322 index321 alt1\">322</div><div class=\"line number323 index322 alt2\">323</div><div class=\"line number324 index323 alt1\">324</div><div class=\"line number325 index324 alt2\">325</div><div class=\"line number326 index325 alt1\">326</div><div class=\"line number327 index326 alt2\">327</div><div class=\"line number328 index327 alt1\">328</div><div class=\"line number329 index328 alt2\">329</div><div class=\"line number330 index329 alt1\">330</div><div class=\"line number331 index330 alt2\">331</div><div class=\"line number332 index331 alt1\">332</div><div class=\"line number333 index332 alt2\">333</div><div class=\"line number334 index333 alt1\">334</div><div class=\"line number335 index334 alt2\">335</div><div class=\"line number336 index335 alt1\">336</div><div class=\"line number337 index336 alt2\">337</div><div class=\"line number338 index337 alt1\">338</div><div class=\"line number339 index338 alt2\">339</div><div class=\"line number340 index339 alt1\">340</div><div class=\"line number341 index340 alt2\">341</div><div class=\"line number342 index341 alt1\">342</div><div class=\"line number343 index342 alt2\">343</div><div class=\"line number344 index343 alt1\">344</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;assert.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#define  OK 1</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ElemType;</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">Node</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ElemType data;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">Node *next;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp plain\">}Node,*PNode;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">CList</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">PNode first;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">PNode last;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">size_t</code> <code class=\"cpp plain\">size;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">}CList;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">InitCList(CList *clist)</code><code class=\"cpp comments\">//初始化</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*clist).first=(*clist).last=(Node*)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(Node));</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">assert</code><code class=\"cpp plain\">((*clist).first!=NULL);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*clist).last-&gt;next=(*clist).first;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*clist).size=0;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">PushFront(CList *clist,ElemType x)</code><code class=\"cpp comments\">//头插</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *s=(Node*)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(Node));</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">assert</code> <code class=\"cpp plain\">(s!=NULL);</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;data=x;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;next=(*clist).first-&gt;next;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*clist).first-&gt;next=s;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">((*clist).first==(*clist).last)</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">(*clist).last=s;</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*clist).size++;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">PushBack(CList *clist,ElemType x)</code><code class=\"cpp comments\">//尾插</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *s=(Node*)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(Node));</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;data=x;</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*clist).last-&gt;next=s;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;next=(*clist).first;</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*clist).last=s;</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*clist).size++;</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">ShowCList(CList clist)</code><code class=\"cpp comments\">//显示链表</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(clist.first-&gt;next==clist.last-&gt;next)</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"show over\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">Node *p=clist.first-&gt;next;</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p!=clist.first)</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d--&gt;\"</code><code class=\"cpp plain\">,p-&gt;data);     </code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"show over\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp plain\">PNode FindByVal(CList clist,ElemType x)</code><code class=\"cpp comments\">//按值查寻</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *p=clist.first-&gt;next;</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p!=clist.first&amp;&amp;p-&gt;data!=x)</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(p==clist.first)</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">NULL;</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">p;</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp plain\">PNode FindByPos(CList clist,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">pos )</code><code class=\"cpp comments\">//按位置插入</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 1;</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *p=clist.first-&gt;next;</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=1;i&lt;pos;i++)</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">p;</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">DeleteBypos(CList *clist,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">pos)</code><code class=\"cpp comments\">//按位置删除</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">PNode p=(*clist).first;</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j=1;</code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">( p&amp;&amp;j&lt;pos)</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p = p-&gt;next;</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">++j;</code></div><div class=\"line number94 index93 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(pos&gt;(*clist).size)</code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"删除位置无效\\n\"</code><code class=\"cpp plain\">); </code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *q=p-&gt;next;</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p-&gt;next=p-&gt;next-&gt;next;</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(p-&gt;next-&gt;next == (*clist).first)</code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">(*clist).last = p;</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number105 index104 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(q);</code></div><div class=\"line number106 index105 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*clist).size--;</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">InsertCListByVal(CList *clist,ElemType e)</code><code class=\"cpp comments\">//按值插入</code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *p=(*clist).first;</code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p-&gt;next!=(*clist).first&amp;&amp;p-&gt;next-&gt;data&lt;e)</code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *s=(Node*)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(Node));</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;data=e;</code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;next=p-&gt;next;</code></div><div class=\"line number118 index117 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p-&gt;next=s;</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*clist).size++;</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number121 index120 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">InsertCListByPos(CList *clist,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">pos,ElemType x)</code><code class=\"cpp comments\">//按位置插入</code></div><div class=\"line number122 index121 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number123 index122 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 1;</code></div><div class=\"line number124 index123 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *p=(*clist).first;</code></div><div class=\"line number125 index124 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code> <code class=\"cpp plain\">(i=1;i&lt;pos;i++)</code></div><div class=\"line number126 index125 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number127 index126 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number128 index127 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number129 index128 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *s=(Node*)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(Node));</code></div><div class=\"line number130 index129 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;data=x;</code></div><div class=\"line number131 index130 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;next=p-&gt;next;</code></div><div class=\"line number132 index131 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p-&gt;next=s;</code></div><div class=\"line number133 index132 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*clist).size++;</code></div><div class=\"line number134 index133 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number135 index134 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">MergeCList(CList *La,CList *Lb,CList *Lc)</code><code class=\"cpp comments\">//合并</code></div><div class=\"line number136 index135 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number137 index136 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">InitCList(La);</code></div><div class=\"line number138 index137 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">InitCList(Lb);</code></div><div class=\"line number139 index138 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">InitCList(Lc);</code></div><div class=\"line number140 index139 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *p=(*La).first;</code></div><div class=\"line number141 index140 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*La).last-&gt;next=(*Lb).first-&gt;next;</code></div><div class=\"line number142 index141 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*Lb).last-&gt;next=(*La).first;</code></div><div class=\"line number143 index142 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*Lc).size=(*La).size+(*Lb).size;</code></div><div class=\"line number144 index143 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">((*Lb).first);</code></div><div class=\"line number145 index144 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number146 index145 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">DestroyList( CList *clist)</code><code class=\"cpp comments\">//销毁</code></div><div class=\"line number147 index146 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number148 index147 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;</code></div><div class=\"line number149 index148 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *p=(*clist).first-&gt;next;</code></div><div class=\"line number150 index149 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=0;i&lt;=(*clist).size;++i)</code></div><div class=\"line number151 index150 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number152 index151 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">(*clist).first-&gt;next=p-&gt;next;</code></div><div class=\"line number153 index152 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(p);</code></div><div class=\"line number154 index153 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=(*clist).first-&gt;next;</code></div><div class=\"line number155 index154 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number156 index155 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">OK;</code></div><div class=\"line number157 index156 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number158 index157 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ClearList( CList *clist)</code><code class=\"cpp comments\">//清空</code></div><div class=\"line number159 index158 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number160 index159 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*clist).size=0;     </code></div><div class=\"line number161 index160 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">OK;</code></div><div class=\"line number162 index161 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number163 index162 alt2\"><code class=\"cpp plain\">PNode FindNextElemByVal(CList clist,ElemType x)</code><code class=\"cpp comments\">//查找后继</code></div><div class=\"line number164 index163 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number165 index164 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *p=clist.first;</code></div><div class=\"line number166 index165 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p-&gt;next!=clist.first&amp;&amp;p-&gt;next-&gt;data!=x)</code></div><div class=\"line number167 index166 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number168 index167 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number169 index168 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number170 index169 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number171 index170 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(p-&gt;next==clist.first)</code></div><div class=\"line number172 index171 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number173 index172 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"输入的前驱无效\\n\"</code><code class=\"cpp plain\">); </code></div><div class=\"line number174 index173 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number175 index174 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">p;</code></div><div class=\"line number176 index175 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number177 index176 alt2\"><code class=\"cpp plain\">PNode FindPriorElemByVal(CList clist,ElemType x)</code><code class=\"cpp comments\">//查找前驱</code></div><div class=\"line number178 index177 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number179 index178 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *p=clist.first;</code></div><div class=\"line number180 index179 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p-&gt;next!=clist.first&amp;&amp;p-&gt;next-&gt;data!=x)</code></div><div class=\"line number181 index180 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number182 index181 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number183 index182 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number184 index183 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code> <code class=\"cpp plain\">(p-&gt;next==clist.first-&gt;next)</code></div><div class=\"line number185 index184 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number186 index185 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"输入的后继无效\\n\"</code><code class=\"cpp plain\">); </code></div><div class=\"line number187 index186 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number188 index187 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(p-&gt;next==clist.first)</code></div><div class=\"line number189 index188 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number190 index189 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">NULL;</code></div><div class=\"line number191 index190 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number192 index191 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">p;</code></div><div class=\"line number193 index192 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number194 index193 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">DeleteByVal(CList *clist,ElemType x)</code><code class=\"cpp comments\">//按值删除</code></div><div class=\"line number195 index194 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number196 index195 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">PNode p=FindPriorElemByVal(*clist, x);</code><code class=\"cpp comments\">//要删除元素的前驱</code></div><div class=\"line number197 index196 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(p==NULL)</code></div><div class=\"line number198 index197 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number199 index198 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"删除元素无效\\n\"</code><code class=\"cpp plain\">); </code></div><div class=\"line number200 index199 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;</code></div><div class=\"line number201 index200 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number202 index201 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *q=p-&gt;next;</code></div><div class=\"line number203 index202 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p-&gt;next=p-&gt;next-&gt;next;</code></div><div class=\"line number204 index203 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(p-&gt;next-&gt;next == (*clist).first)</code></div><div class=\"line number205 index204 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number206 index205 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">(*clist).last = p;</code></div><div class=\"line number207 index206 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number208 index207 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(q);</code></div><div class=\"line number209 index208 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">(*clist).size--;</code></div><div class=\"line number210 index209 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number211 index210 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number212 index211 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number213 index212 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">CList mylist,La,Lb;</code></div><div class=\"line number214 index213 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">InitCList(&amp;mylist);</code></div><div class=\"line number215 index214 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">select=1;</code></div><div class=\"line number216 index215 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">pos;</code></div><div class=\"line number217 index216 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">item;</code></div><div class=\"line number218 index217 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">PNode res;</code></div><div class=\"line number219 index218 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"*******************************\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number220 index219 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"* 1.输入数据H     2.输入数据B *\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number221 index220 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"* 3.显示链表      4.按值查询  *\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number222 index221 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"* 5.按位置查询    6.按值删除  *\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number223 index222 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"* 7.按位置删除    8.按值插入  *\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number224 index223 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"* 9.按位置插入    10.排序     *\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number225 index224 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"* 11.逆置         12.合并     *\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number226 index225 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"* 13.销毁链表     14.清除链表 *\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number227 index226 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"* 15.获取后继     16.获取前驱 *\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number228 index227 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"*******************************\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number229 index228 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code> <code class=\"cpp plain\">(select!=0)</code></div><div class=\"line number230 index229 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number231 index230 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"请选择:&gt;\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number232 index231 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;select);</code></div><div class=\"line number233 index232 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">switch</code><code class=\"cpp plain\">(select)</code></div><div class=\"line number234 index233 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number235 index234 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">1:</code></div><div class=\"line number236 index235 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"请输入数据，-1结束.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number237 index236 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;item);</code></div><div class=\"line number238 index237 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(item != -1)</code></div><div class=\"line number239 index238 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number240 index239 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">PushFront(&amp;mylist,item);</code></div><div class=\"line number241 index240 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;item);</code></div><div class=\"line number242 index241 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}    </code></div><div class=\"line number243 index242 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number244 index243 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">2:</code></div><div class=\"line number245 index244 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"请输入数据，-1结束.\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number246 index245 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;item);</code></div><div class=\"line number247 index246 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(item != -1)</code></div><div class=\"line number248 index247 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number249 index248 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">PushBack(&amp;mylist,item);</code></div><div class=\"line number250 index249 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;item);</code></div><div class=\"line number251 index250 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}            </code></div><div class=\"line number252 index251 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number253 index252 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">3:</code></div><div class=\"line number254 index253 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">ShowCList(mylist);</code></div><div class=\"line number255 index254 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number256 index255 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">4:</code></div><div class=\"line number257 index256 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"请输入要查询的值:&gt;\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number258 index257 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,item);</code></div><div class=\"line number259 index258 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">res = FindByVal(mylist,item);</code></div><div class=\"line number260 index259 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(res)</code></div><div class=\"line number261 index260 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number262 index261 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"要查询的元素存在\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number263 index262 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number264 index263 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number265 index264 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number266 index265 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"要查询的元素不存在\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number267 index266 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number268 index267 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number269 index268 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">5:</code></div><div class=\"line number270 index269 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"请输入要查询位置:&gt;\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number271 index270 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;pos);</code></div><div class=\"line number272 index271 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">res = FindByPos(mylist,pos);</code></div><div class=\"line number273 index272 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(res)</code></div><div class=\"line number274 index273 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number275 index274 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"要查询的元素存在\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number276 index275 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number277 index276 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number278 index277 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{</code></div><div class=\"line number279 index278 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"要查询的元素不存在\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number280 index279 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number281 index280 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number282 index281 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">6:</code></div><div class=\"line number283 index282 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"请输入要删除的值:&gt;\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number284 index283 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;item);</code></div><div class=\"line number285 index284 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">DeleteByVal(&amp;mylist,item);</code></div><div class=\"line number286 index285 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number287 index286 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp plain\">7:</code></div><div class=\"line number288 index287 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"请输入要删除的位置\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number289 index288 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;pos);</code></div><div class=\"line number290 index289 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">DeleteBypos(&amp;mylist, pos );</code></div><div class=\"line number291 index290 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number292 index291 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code ');
INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(85, '3、双向链表', '九、链表', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>在双向链表中，结点除含有数据域外，还有两个链域，一个存储直接后继结点地址，一般称之为右链域；一个存储直接前驱结点地址，一般称之为左链域。</p><p>双向链表表示和实现：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div><div class=\"line number121 index120 alt2\">121</div><div class=\"line number122 index121 alt1\">122</div><div class=\"line number123 index122 alt2\">123</div><div class=\"line number124 index123 alt1\">124</div><div class=\"line number125 index124 alt2\">125</div><div class=\"line number126 index125 alt1\">126</div><div class=\"line number127 index126 alt2\">127</div><div class=\"line number128 index127 alt1\">128</div><div class=\"line number129 index128 alt2\">129</div><div class=\"line number130 index129 alt1\">130</div><div class=\"line number131 index130 alt2\">131</div><div class=\"line number132 index131 alt1\">132</div><div class=\"line number133 index132 alt2\">133</div><div class=\"line number134 index133 alt1\">134</div><div class=\"line number135 index134 alt2\">135</div><div class=\"line number136 index135 alt1\">136</div><div class=\"line number137 index136 alt2\">137</div><div class=\"line number138 index137 alt1\">138</div><div class=\"line number139 index138 alt2\">139</div><div class=\"line number140 index139 alt1\">140</div><div class=\"line number141 index140 alt2\">141</div><div class=\"line number142 index141 alt1\">142</div><div class=\"line number143 index142 alt2\">143</div><div class=\"line number144 index143 alt1\">144</div><div class=\"line number145 index144 alt2\">145</div><div class=\"line number146 index145 alt1\">146</div><div class=\"line number147 index146 alt2\">147</div><div class=\"line number148 index147 alt1\">148</div><div class=\"line number149 index148 alt2\">149</div><div class=\"line number150 index149 alt1\">150</div><div class=\"line number151 index150 alt2\">151</div><div class=\"line number152 index151 alt1\">152</div><div class=\"line number153 index152 alt2\">153</div><div class=\"line number154 index153 alt1\">154</div><div class=\"line number155 index154 alt2\">155</div><div class=\"line number156 index155 alt1\">156</div><div class=\"line number157 index156 alt2\">157</div><div class=\"line number158 index157 alt1\">158</div><div class=\"line number159 index158 alt2\">159</div><div class=\"line number160 index159 alt1\">160</div><div class=\"line number161 index160 alt2\">161</div><div class=\"line number162 index161 alt1\">162</div><div class=\"line number163 index162 alt2\">163</div><div class=\"line number164 index163 alt1\">164</div><div class=\"line number165 index164 alt2\">165</div><div class=\"line number166 index165 alt1\">166</div><div class=\"line number167 index166 alt2\">167</div><div class=\"line number168 index167 alt1\">168</div><div class=\"line number169 index168 alt2\">169</div><div class=\"line number170 index169 alt1\">170</div><div class=\"line number171 index170 alt2\">171</div><div class=\"line number172 index171 alt1\">172</div><div class=\"line number173 index172 alt2\">173</div><div class=\"line number174 index173 alt1\">174</div><div class=\"line number175 index174 alt2\">175</div><div class=\"line number176 index175 alt1\">176</div><div class=\"line number177 index176 alt2\">177</div><div class=\"line number178 index177 alt1\">178</div><div class=\"line number179 index178 alt2\">179</div><div class=\"line number180 index179 alt1\">180</div><div class=\"line number181 index180 alt2\">181</div><div class=\"line number182 index181 alt1\">182</div><div class=\"line number183 index182 alt2\">183</div><div class=\"line number184 index183 alt1\">184</div><div class=\"line number185 index184 alt2\">185</div><div class=\"line number186 index185 alt1\">186</div><div class=\"line number187 index186 alt2\">187</div><div class=\"line number188 index187 alt1\">188</div><div class=\"line number189 index188 alt2\">189</div><div class=\"line number190 index189 alt1\">190</div><div class=\"line number191 index190 alt2\">191</div><div class=\"line number192 index191 alt1\">192</div><div class=\"line number193 index192 alt2\">193</div><div class=\"line number194 index193 alt1\">194</div><div class=\"line number195 index194 alt2\">195</div><div class=\"line number196 index195 alt1\">196</div><div class=\"line number197 index196 alt2\">197</div><div class=\"line number198 index197 alt1\">198</div><div class=\"line number199 index198 alt2\">199</div><div class=\"line number200 index199 alt1\">200</div><div class=\"line number201 index200 alt2\">201</div><div class=\"line number202 index201 alt1\">202</div><div class=\"line number203 index202 alt2\">203</div><div class=\"line number204 index203 alt1\">204</div><div class=\"line number205 index204 alt2\">205</div><div class=\"line number206 index205 alt1\">206</div><div class=\"line number207 index206 alt2\">207</div><div class=\"line number208 index207 alt1\">208</div><div class=\"line number209 index208 alt2\">209</div><div class=\"line number210 index209 alt1\">210</div><div class=\"line number211 index210 alt2\">211</div><div class=\"line number212 index211 alt1\">212</div><div class=\"line number213 index212 alt2\">213</div><div class=\"line number214 index213 alt1\">214</div><div class=\"line number215 index214 alt2\">215</div><div class=\"line number216 index215 alt1\">216</div><div class=\"line number217 index216 alt2\">217</div><div class=\"line number218 index217 alt1\">218</div><div class=\"line number219 index218 alt2\">219</div><div class=\"line number220 index219 alt1\">220</div><div class=\"line number221 index220 alt2\">221</div><div class=\"line number222 index221 alt1\">222</div><div class=\"line number223 index222 alt2\">223</div><div class=\"line number224 index223 alt1\">224</div><div class=\"line number225 index224 alt2\">225</div><div class=\"line number226 index225 alt1\">226</div><div class=\"line number227 index226 alt2\">227</div><div class=\"line number228 index227 alt1\">228</div><div class=\"line number229 index228 alt2\">229</div><div class=\"line number230 index229 alt1\">230</div><div class=\"line number231 index230 alt2\">231</div><div class=\"line number232 index231 alt1\">232</div><div class=\"line number233 index232 alt2\">233</div><div class=\"line number234 index233 alt1\">234</div><div class=\"line number235 index234 alt2\">235</div><div class=\"line number236 index235 alt1\">236</div><div class=\"line number237 index236 alt2\">237</div><div class=\"line number238 index237 alt1\">238</div><div class=\"line number239 index238 alt2\">239</div><div class=\"line number240 index239 alt1\">240</div><div class=\"line number241 index240 alt2\">241</div><div class=\"line number242 index241 alt1\">242</div><div class=\"line number243 index242 alt2\">243</div><div class=\"line number244 index243 alt1\">244</div><div class=\"line number245 index244 alt2\">245</div><div class=\"line number246 index245 alt1\">246</div><div class=\"line number247 index246 alt2\">247</div><div class=\"line number248 index247 alt1\">248</div><div class=\"line number249 index248 alt2\">249</div><div class=\"line number250 index249 alt1\">250</div><div class=\"line number251 index250 alt2\">251</div><div class=\"line number252 index251 alt1\">252</div><div class=\"line number253 index252 alt2\">253</div><div class=\"line number254 index253 alt1\">254</div><div class=\"line number255 index254 alt2\">255</div><div class=\"line number256 index255 alt1\">256</div><div class=\"line number257 index256 alt2\">257</div><div class=\"line number258 index257 alt1\">258</div><div class=\"line number259 index258 alt2\">259</div><div class=\"line number260 index259 alt1\">260</div><div class=\"line number261 index260 alt2\">261</div><div class=\"line number262 index261 alt1\">262</div><div class=\"line number263 index262 alt2\">263</div><div class=\"line number264 index263 alt1\">264</div><div class=\"line number265 index264 alt2\">265</div><div class=\"line number266 index265 alt1\">266</div><div class=\"line number267 index266 alt2\">267</div><div class=\"line number268 index267 alt1\">268</div><div class=\"line number269 index268 alt2\">269</div><div class=\"line number270 index269 alt1\">270</div><div class=\"line number271 index270 alt2\">271</div><div class=\"line number272 index271 alt1\">272</div><div class=\"line number273 index272 alt2\">273</div><div class=\"line number274 index273 alt1\">274</div><div class=\"line number275 index274 alt2\">275</div><div class=\"line number276 index275 alt1\">276</div><div class=\"line number277 index276 alt2\">277</div><div class=\"line number278 index277 alt1\">278</div><div class=\"line number279 index278 alt2\">279</div><div class=\"line number280 index279 alt1\">280</div><div class=\"line number281 index280 alt2\">281</div><div class=\"line number282 index281 alt1\">282</div><div class=\"line number283 index282 alt2\">283</div><div class=\"line number284 index283 alt1\">284</div><div class=\"line number285 index284 alt2\">285</div><div class=\"line number286 index285 alt1\">286</div><div class=\"line number287 index286 alt2\">287</div><div class=\"line number288 index287 alt1\">288</div><div class=\"line number289 index288 alt2\">289</div><div class=\"line number290 index289 alt1\">290</div><div class=\"line number291 index290 alt2\">291</div><div class=\"line number292 index291 alt1\">292</div><div class=\"line number293 index292 alt2\">293</div><div class=\"line number294 index293 alt1\">294</div><div class=\"line number295 index294 alt2\">295</div><div class=\"line number296 index295 alt1\">296</div><div class=\"line number297 index296 alt2\">297</div><div class=\"line number298 index297 alt1\">298</div><div class=\"line number299 index298 alt2\">299</div><div class=\"line number300 index299 alt1\">300</div><div class=\"line number301 index300 alt2\">301</div><div class=\"line number302 index301 alt1\">302</div><div class=\"line number303 index302 alt2\">303</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include \"stdafx.h\"</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ElemType;</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 线性表的双向链表存储结构 </code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">typedef struct DuLNode</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp comments\">{</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 数据域 */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ElemType data;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 前驱后继指针 */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">DuLNode *prior,*next;</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">}DuLNode,*DuLinkList;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp comments\">/* 产生空的双向循环链表L */</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">InitList(DuLinkList *L)</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* L指向头结点 */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">*L=(DuLinkList)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(DuLNode));</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(*L)</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 将头结点的前驱后继都指向头结点，这样构成了一个空表 */</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">(*L)-&gt;next=(*L)-&gt;prior=*L;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp comments\">/* 销毁双向循环链表L */</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">DestroyList(DuLinkList *L)</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p指向第一个结点 */</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DuLinkList q,p=(*L)-&gt;next;</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p没到表头 */</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p!=*L)</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">q=p-&gt;next;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(p);</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=q;</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(*L);</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">*L=NULL;</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp comments\">/* 将L重置为空表 */</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ClearList(DuLinkList L)</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p指向第一个结点 */</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DuLinkList q,p=L-&gt;next;</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p没到表头 */</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p!=L)</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">q=p-&gt;next;</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(p);</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=q;</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 头结点的两个指针域均指向自身，构成空表 */</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">L-&gt;next=L-&gt;prior=L;</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp comments\">/* 若L为空表（空表就是头结点的前驱后继都指向头结点），则返回1，否则返回0 */</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ListEmpty(DuLinkList L)</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(L-&gt;next==L&amp;&amp;L-&gt;prior==L)</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp comments\">/* 返回L中数据元素个数 */</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ListLength(DuLinkList L)</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p指向第一个结点 */</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DuLinkList p=L-&gt;next;</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p没到表头 */</code>    </div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p!=L)</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">i++;</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp comments\">/* 当第i个元素存在时,其值赋给e并返回1,否则返回0 */</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">GetElem(DuLinkList L,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,ElemType *e)</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* j为计数器 */</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j=1;</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p指向第一个结点 */</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DuLinkList p=L-&gt;next;</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 顺指针向后查找,直到p指向第i个元素或p指向头结点 */</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p!=L&amp;&amp;j&lt;i)</code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">j++;</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number94 index93 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 第i个元素不存在 */</code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(p==L||j&gt;i)</code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 取第i个元素 */</code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">*e=p-&gt;data;</code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp comments\">/* 返回L中第1个与e满足关系compare()的数据元素的位序。 </code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\"> </code><code class=\"cpp comments\">* 若这样的数据元素不存在，则返回值为0 */</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">LocateElem(DuLinkList L,ElemType e,</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">(*compare)(ElemType,ElemType))</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number105 index104 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i=0;</code></div><div class=\"line number106 index105 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p指向第1个元素 */</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DuLinkList p=L-&gt;next;</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p!=L)</code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">i++;</code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 找到这样的数据元素 */</code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(compare(p-&gt;data,e))</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number118 index117 alt1\"><code class=\"cpp comments\">/* 若cur_e是L的数据元素，且不是第一个，则用pre_e返回它的前驱 */</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">PriorElem(DuLinkList L,ElemType cur_e,ElemType *pre_e)</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp plain\">{    </code></div><div class=\"line number121 index120 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p指向第2个元素 */</code></div><div class=\"line number122 index121 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DuLinkList p=L-&gt;next-&gt;next;</code></div><div class=\"line number123 index122 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p没到表头 */</code>    </div><div class=\"line number124 index123 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p!=L)</code></div><div class=\"line number125 index124 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number126 index125 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(p-&gt;data==cur_e)</code></div><div class=\"line number127 index126 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number128 index127 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">*pre_e=p-&gt;prior-&gt;data;</code></div><div class=\"line number129 index128 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number130 index129 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number131 index130 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number132 index131 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number133 index132 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number134 index133 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number135 index134 alt2\"><code class=\"cpp comments\">/* 若cur_e是L的数据元素，且不是最后一个，则用next_e返回它的后继 */</code></div><div class=\"line number136 index135 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">NextElem(DuLinkList L,ElemType cur_e,ElemType *next_e)</code></div><div class=\"line number137 index136 alt2\"><code class=\"cpp plain\">{    </code></div><div class=\"line number138 index137 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p指向第2个元素 */</code></div><div class=\"line number139 index138 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DuLinkList p=L-&gt;next-&gt;next;</code></div><div class=\"line number140 index139 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p没到表头 */</code></div><div class=\"line number141 index140 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p!=L)</code></div><div class=\"line number142 index141 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number143 index142 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(p-&gt;prior-&gt;data==cur_e)</code></div><div class=\"line number144 index143 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number145 index144 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">*next_e=p-&gt;data;</code></div><div class=\"line number146 index145 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number147 index146 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number148 index147 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number149 index148 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number150 index149 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number151 index150 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number152 index151 alt1\"><code class=\"cpp comments\">/* 在双向链表L中返回第i个元素的位置指针  */</code></div><div class=\"line number153 index152 alt2\"><code class=\"cpp plain\">DuLinkList GetElemP(DuLinkList L,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i)</code></div><div class=\"line number154 index153 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number155 index154 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j;</code></div><div class=\"line number156 index155 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DuLinkList p=L;</code></div><div class=\"line number157 index156 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j=1;j&lt;=i;j++)</code></div><div class=\"line number158 index157 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number159 index158 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">p;</code></div><div class=\"line number160 index159 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number161 index160 alt2\"><code class=\"cpp comments\">/* 在带头结点的双链循环线性表L中第i个位置之前插入元素e，</code></div><div class=\"line number162 index161 alt1\"><code class=\"cpp comments\">// i的合法值为1≤i≤表长+1 */</code></div><div class=\"line number163 index162 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ListInsert(DuLinkList L,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,ElemType e)</code></div><div class=\"line number164 index163 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number165 index164 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DuLinkList p,s;</code></div><div class=\"line number166 index165 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* i值不合法 */</code></div><div class=\"line number167 index166 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i&lt;1||i&gt;ListLength(L)+1)</code></div><div class=\"line number168 index167 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number169 index168 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 在L中确定第i-1个元素的位置指针p */</code></div><div class=\"line number170 index169 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p=GetElemP(L,i-1);</code></div><div class=\"line number171 index170 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p=NULL,即第i-1个元素不存在 */</code></div><div class=\"line number172 index171 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!p)</code></div><div class=\"line number173 index172 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number174 index173 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s=(DuLinkList)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(DuLNode));</code></div><div class=\"line number175 index174 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!s)</code></div><div class=\"line number176 index175 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number177 index176 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 在第i-1个元素之后插入 */</code></div><div class=\"line number178 index177 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;data=e;</code></div><div class=\"line number179 index178 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;prior=p;</code></div><div class=\"line number180 index179 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;next=p-&gt;next;</code></div><div class=\"line number181 index180 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p-&gt;next-&gt;prior=s;</code></div><div class=\"line number182 index181 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p-&gt;next=s;</code></div><div class=\"line number183 index182 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number184 index183 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number185 index184 alt2\"><code class=\"cpp comments\">/* 删除带头结点的双链循环线性表L的第i个元素,i的合法值为1≤i≤表长+1 */</code></div><div class=\"line number186 index185 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ListDelete(DuLinkList L,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,ElemType *e) </code></div><div class=\"line number187 index186 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number188 index187 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DuLinkList p;</code></div><div class=\"line number189 index188 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* i值不合法 */</code></div><div class=\"line number190 index189 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i&lt;1||i&gt;ListLength(L))</code></div><div class=\"line number191 index190 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number192 index191 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 在L中确定第i个元素的位置指针p */</code></div><div class=\"line number193 index192 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p=GetElemP(L,i); </code></div><div class=\"line number194 index193 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p=NULL,即第i个元素不存在 */</code></div><div class=\"line number195 index194 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!p)</code></div><div class=\"line number196 index195 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number197 index196 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">*e=p-&gt;data;</code></div><div class=\"line number198 index197 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p-&gt;prior-&gt;next=p-&gt;next;</code></div><div class=\"line number199 index198 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p-&gt;next-&gt;prior=p-&gt;prior;</code></div><div class=\"line number200 index199 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(p);</code></div><div class=\"line number201 index200 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number202 index201 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number203 index202 alt2\"><code class=\"cpp comments\">/* 由双链循环线性表L的头结点出发,正序对每个数据元素调用函数visit() */</code></div><div class=\"line number204 index203 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">ListTraverse(DuLinkList L,</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">(*visit)(ElemType))</code></div><div class=\"line number205 index204 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number206 index205 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p指向头结点 */</code></div><div class=\"line number207 index206 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DuLinkList p=L-&gt;next;</code></div><div class=\"line number208 index207 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p!=L)</code></div><div class=\"line number209 index208 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number210 index209 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">visit(p-&gt;data);</code></div><div class=\"line number211 index210 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;next;</code></div><div class=\"line number212 index211 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number213 index212 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number214 index213 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number215 index214 alt2\"><code class=\"cpp comments\">/* 由双链循环线性表L的头结点出发,逆序对每个数据元素调用函数visit() */</code></div><div class=\"line number216 index215 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">ListTraverseBack(DuLinkList L,</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">(*visit)(ElemType))</code></div><div class=\"line number217 index216 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number218 index217 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* p指向尾结点 */</code></div><div class=\"line number219 index218 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DuLinkList p=L-&gt;prior;</code></div><div class=\"line number220 index219 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p!=L)</code></div><div class=\"line number221 index220 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number222 index221 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">visit(p-&gt;data);</code></div><div class=\"line number223 index222 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p=p-&gt;prior;</code></div><div class=\"line number224 index223 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number225 index224 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number226 index225 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number227 index226 alt2\"><code class=\"cpp comments\">/* 数据元素判定函数(判定相等) */</code></div><div class=\"line number228 index227 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">compare(ElemType c1,ElemType c2) </code></div><div class=\"line number229 index228 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number230 index229 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(c1==c2)</code></div><div class=\"line number231 index230 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number232 index231 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number233 index232 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number234 index233 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number235 index234 alt2\"><code class=\"cpp comments\">/* ListTraverse()调用的函数(类型一致) */</code></div><div class=\"line number236 index235 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">vd(ElemType c)</code></div><div class=\"line number237 index236 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number238 index237 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">,c);</code></div><div class=\"line number239 index238 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number240 index239 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number241 index240 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number242 index241 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DuLinkList L;</code></div><div class=\"line number243 index242 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,n;</code></div><div class=\"line number244 index243 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j;</code></div><div class=\"line number245 index244 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ElemType e;</code></div><div class=\"line number246 index245 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">InitList(&amp;L);</code></div><div class=\"line number247 index246 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=1;i&lt;=5;i++)</code></div><div class=\"line number248 index247 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number249 index248 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 在第i个结点之前插入i */</code></div><div class=\"line number250 index249 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">ListInsert(L,i,i);</code></div><div class=\"line number251 index250 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number252 index251 alt1\"><code class=\"cpp spaces\">         </code> </div><div class=\"line number253 index252 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"正序输出链表：\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number254 index253 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 正序输出 */</code></div><div class=\"line number255 index254 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ListTraverse(L,vd);</code></div><div class=\"line number256 index255 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"逆序输出链表：\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number257 index256 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 逆序输出 */</code></div><div class=\"line number258 index257 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ListTraverseBack(L,vd);</code></div><div class=\"line number259 index258 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n=2;</code></div><div class=\"line number260 index259 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 删除并释放第n个结点 */</code></div><div class=\"line number261 index260 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ListDelete(L,n,&amp;e);</code></div><div class=\"line number262 index261 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"删除第%d个结点，值为%d，其余结点为：\"</code><code class=\"cpp plain\">,n,e);</code></div><div class=\"line number263 index262 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 正序输出 */</code></div><div class=\"line number264 index263 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ListTraverse(L,vd);</code></div><div class=\"line number265 index264 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"链表的元素个数为%d\\n\"</code><code class=\"cpp plain\">,ListLength(L));</code></div><div class=\"line number266 index265 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"链表是否空：%d(1:是 0:否)\\n\"</code><code class=\"cpp plain\">,ListEmpty(L));</code></div><div class=\"line number267 index266 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 清空链表 */</code></div><div class=\"line number268 index267 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ClearList(L);</code></div><div class=\"line number269 index268 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"清空后，链表是否空：%d(1:是 0:否)\\n\"</code><code class=\"cpp plain\">,ListEmpty(L));</code></div><div class=\"line number270 index269 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i=1;i&lt;=5;i++)</code></div><div class=\"line number271 index270 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number272 index271 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 重新插入5个结点 */</code></div><div class=\"line number273 index272 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">ListInsert(L,i,i);</code></div><div class=\"line number274 index273 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number275 index274 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 正序输出 */</code></div><div class=\"line number276 index275 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ListTraverse(L,vd);</code></div><div class=\"line number277 index276 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n=3;</code></div><div class=\"line number278 index277 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将链表的第n个元素赋值给e  */</code></div><div class=\"line number279 index278 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">j=GetElem(L,n,&amp;e);</code></div><div class=\"line number280 index279 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(j)</code></div><div class=\"line number281 index280 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"链表的第%d个元素值为%d\\n\"</code><code class=\"cpp plain\">,n,e);</code></div><div class=\"line number282 index281 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number283 index282 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"不存在第%d个元素\\n\"</code><code class=\"cpp plain\">,n);</code></div><div class=\"line number284 index283 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">n=4;</code></div><div class=\"line number285 index284 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">i=LocateElem(L,n,compare);</code></div><div class=\"line number286 index285 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i)</code></div><div class=\"line number287 index286 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"等于%d的元素是第%d个\\n\"</code><code class=\"cpp plain\">,n,i);</code></div><div class=\"line number288 index287 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number289 index288 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"没有等于%d的元素\\n\"</code><code class=\"cpp plain\">,n);</code></div><div class=\"line number290 index289 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">j=PriorElem(L,n,&amp;e);</code></div><div class=\"line number291 index290 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(j)</code></div><div class=\"line number292 index291 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d的前驱是%d\\n\"</code><code class=\"cpp plain\">,n,e);</code></div><div class=\"line number293 index292 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number294 index293 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"不存在%d的前驱\\n\"</code><code class=\"cpp plain\">,n);</code></div><div class=\"line number295 index294 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">j=NextElem(L,n,&amp;e);</code></div><div class=\"line number296 index295 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(j)</code></div><div class=\"line number297 index296 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d的后继是%d\\n\"</code><code class=\"cpp plain\">,n,e);</code></div><div class=\"line number298 index297 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number299 index298 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"不存在%d的后继\\n\"</code><code class=\"cpp plain\">,n);</code></div><div class=\"line number300 index299 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DestroyList(&amp;L);</code></div><div class=\"line number301 index300 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number302 index301 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number303 index302 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(86, '1、顺序栈', '十、栈', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>栈是一种限定只在表尾进行插入或删除操作,栈也是线性表表头称为栈的底部,表尾称为栈的顶部,表为空称为空栈，栈又称为后进先出的线性表,栈有两种表示:顺序栈与链式栈顺序栈是利用一组地址连续的存储单元，依次存放从栈底到栈顶的数据元素,附设一个指针指示栈顶的元素在栈中的位置。</p><p>顺序栈的实现：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt; </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp comments\">/* 表示无穷大 */</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#define INFINITY 65535</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 栈的最大空间 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define MAXSIZE 1000</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp comments\">/* 栈的数据类型 */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ElemType;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp keyword bold\">struct</code><code class=\"cpp plain\">{</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 栈的大小 */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ElemType data[MAXSIZE];</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 栈顶的游标 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">top;</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">}Stack; </code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp comments\">/* 初始化栈 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">InitStack(Stack *s)</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;top = -1;  </code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp comments\">/* 判断栈是否为空 */</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp color1 bold\">bool</code> <code class=\"cpp plain\">IsEmpty(Stack *s)</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(s-&gt;top == -1)  </code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;  </code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;  </code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp comments\">/* 返回栈顶的元素 */</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp plain\">ElemType Top(Stack *s)</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!IsEmpty(s))  </code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">s-&gt;data[s-&gt;top];  </code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">INFINITY;  </code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp comments\">/* 返回并删除栈顶的元素 */</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp plain\">ElemType Pop(Stack *s)</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!IsEmpty(s))  </code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">s-&gt;data[s-&gt;top--];  </code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">INFINITY;  </code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp comments\">/* 将元素压栈 */</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">Push(Stack *s,ElemType e)</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(s-&gt;top &gt;= MAXSIZE - 1)  </code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;  </code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;top++;  </code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;data[s-&gt;top] = e;  </code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp comments\">/* 清空栈 */</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">Clear(Stack *s)</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;top = -1;  </code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp comments\">/* 打印栈底到栈顶的元素 */</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">Print(Stack *s)</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;i &lt;= s-&gt;top;++i)  </code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">,s-&gt;data[i]);  </code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()  </code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Stack s;  </code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">InitStack(&amp;s);  </code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 1;i &lt; 20;i += 2)  </code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">Push(&amp;s,i);  </code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Print(&amp;s);  </code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"栈顶的元素为:\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">k = Top(&amp;s);  </code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\\n\"</code><code class=\"cpp plain\">,k);  </code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Clear(&amp;s);  </code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(IsEmpty(&amp;s))  </code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"栈为空\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code>  </div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"栈不为空\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;  </code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(87, '2、双栈', '十、栈', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>两顺序栈共享一个地址连续的存储单元,一个栈的栈底为起始位置一个栈的栈底为末尾,压入数据时从两边向中间推进,如果指示栈顶的指针top1 + 1 等于另一个栈顶的指针top2时两栈已满, 如果top1 == -1,top2 == MAXSIZE两栈为空。</p><p>双栈的实现：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt; </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp comments\">/* 无限大 */</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#define INFINITY 65535</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 存储单元的最大值 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp preprocessor\">#define MAXSIZE 1000</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp comments\">/* 栈的数据类型 */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ElemType;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">{  </code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 存储单元 */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ElemType data[MAXSIZE];</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">top1;  </code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">top2;  </code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp plain\">}DoubleStack; </code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp comments\">/* 初始化两栈 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">InitStack(DoubleStack *s)</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;top1 = -1;  </code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;top2 = MAXSIZE;  </code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">}  </code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp comments\">/* 将数据元素e压栈,i为栈的序号 */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">Push(DoubleStack *s,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i,ElemType e)</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i == 1)  </code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(s-&gt;top1 + 1 == s-&gt;top2)  </code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;  </code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;data[++s-&gt;top1] = e;  </code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i == 2)  </code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(s-&gt;top2 - 1 == s-&gt;top1)  </code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;  </code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;data[--s-&gt;top2] = e;  </code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp plain\">}  </code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp comments\">/* i为栈的序号,返回栈顶的元素 */</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">ElemType Top(DoubleStack *s,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i)</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i == 1)  </code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(s-&gt;top1 == -1)  </code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">INFINITY;  </code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">s-&gt;data[s-&gt;top1];  </code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i == 2)  </code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(s-&gt;top2 == MAXSIZE)  </code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">INFINITY;  </code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">s-&gt;data[s-&gt;top2];  </code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp plain\">}  </code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp comments\">/* i为栈的序号,返回并删除栈顶的元素 */</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp plain\">ElemType Pop(DoubleStack *s,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i)</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i == 1)  </code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(s-&gt;top1 == -1)  </code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">INFINITY;  </code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">s-&gt;data[s-&gt;top1--];  </code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i == 2)  </code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(s-&gt;top2 == MAXSIZE)  </code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">INFINITY;  </code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">s-&gt;data[s-&gt;top2++];  </code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp plain\">}  </code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp comments\">/* 判断栈是否为空 */</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp color1 bold\">bool</code> <code class=\"cpp plain\">IsEmpty(DoubleStack *s)</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(s-&gt;top1 == -1 &amp;&amp; s-&gt;top2 == MAXSIZE)  </code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;  </code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;  </code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp plain\">}  </code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp comments\">/* 清空栈 */</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">Clear(DoubleStack *s)</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;top1 = -1;  </code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">s-&gt;top2 = MAXSIZE;  </code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp plain\">}  </code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp comments\">/* 打印栈底到栈顶的元素,i为栈的序列 */</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">Print(DoubleStack *s,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i)</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i == 1)  </code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j = 0;j &lt;= s-&gt;top1;++j)  </code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">,s-&gt;data[j]);  </code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i == 2)  </code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j = MAXSIZE - 1;j &gt;= s-&gt;top2;--j)  </code></div><div class=\"line number94 index93 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">,s-&gt;data[j]);  </code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp plain\">} </code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()  </code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">DoubleStack s;  </code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">InitStack(&amp;s);  </code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;  </code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i = 1;i &lt; 20;i += 2)</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number105 index104 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Push(&amp;s,1,i);</code></div><div class=\"line number106 index105 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Push(&amp;s,2,i+1);</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp spaces\">     </code> </div><div class=\"line number109 index108 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Print(&amp;s,1);  </code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Print(&amp;s,2);  </code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">top1 = Top(&amp;s,1);  </code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"第一个栈顶的元素:%d\\n\"</code><code class=\"cpp plain\">,top1);  </code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">top2 = Top(&amp;s,2);  </code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"第二个栈顶的元素:%d\\n\"</code><code class=\"cpp plain\">,top2); </code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;  </code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(88, '1、顺序队列', '十一、队列', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>链式队列与线性表的单链表相似只不过链式队列只允许从头部进行删除、尾部进行插入.需要为链式队列创建一个头结点包括两个指针,指向队头的指针(front)与指向队尾的指针(rear).当两个指针相等时队列为空。</p><p>链式队列的实现：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div><div class=\"line number121 index120 alt2\">121</div><div class=\"line number122 index121 alt1\">122</div><div class=\"line number123 index122 alt2\">123</div><div class=\"line number124 index123 alt1\">124</div><div class=\"line number125 index124 alt2\">125</div><div class=\"line number126 index125 alt1\">126</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">elemType;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sNode{</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 值域 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">elemType data;</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 链接指针 */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sNode *next; </code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp plain\">};</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">queueLK{</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 队首指针 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sNode *front;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">     </code><code class=\"cpp comments\">/* 队尾指针 */</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sNode *rear;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp plain\">};</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp comments\">/* 1.初始化链队 */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">initQueue(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">queueLK *hq)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 把队首和队尾指针置空 */</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">hq-&gt;front = hq-&gt;rear = NULL;</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp comments\">/* 2.向链队中插入一个元素x */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">enQueue(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">queueLK *hq, elemType x)</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 得到一个由newP指针所指向的新结点 */</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sNode *newP;</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">newP = (</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sNode *)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sNode));</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(newP == NULL){</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"内存空间分配失败！ \"</code><code class=\"cpp plain\">);</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(1);</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 把x的值赋给新结点的值域，把新结点的指针域置空 */</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">newP-&gt;data = x;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">newP-&gt;next = NULL;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若链队为空，则新结点即是队首结点又是队尾结点 */</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(hq-&gt;rear == NULL){</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">hq-&gt;front = hq-&gt;rear = newP;</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code><code class=\"cpp keyword bold\">else</code><code class=\"cpp plain\">{    </code><code class=\"cpp comments\">/* 若链队非空，则依次修改队尾结点的指针域和队尾指针，使之指向新的队尾结点 */</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 注意赋值顺序哦 */</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">hq-&gt;rear = hq-&gt;rear-&gt;next = newP;</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp comments\">/* 3.从队列中删除一个元素 */</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp plain\">elemType outQueue(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">queueLK *hq)</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sNode *p;</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">elemType temp;</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若链队为空则停止运行 */</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(hq-&gt;front == NULL){</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"队列为空，无法删除！ \"</code><code class=\"cpp plain\">);</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(1);</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 暂存队尾元素以便返回 */</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">temp = hq-&gt;front-&gt;data;</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 暂存队尾指针以便回收队尾结点 */</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p = hq-&gt;front; </code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 使队首指针指向下一个结点 */</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">hq-&gt;front = p-&gt;next;</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若删除后链队为空，则需同时使队尾指针为空 */</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(hq-&gt;front == NULL){</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">hq-&gt;rear = NULL;</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 回收原队首结点 */</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(p);</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 返回被删除的队首元素值 */</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">temp;</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp comments\">/* 4.读取队首元素 */</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp plain\">elemType peekQueue(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">queueLK *hq)</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若链队为空则停止运行 */</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(hq-&gt;front == NULL){</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"队列为空，无法删除！ \"</code><code class=\"cpp plain\">);</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(1);</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 返回队首元素 */</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">hq-&gt;front-&gt;data;</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp comments\">/* 5.检查链队是否为空，若为空则返回1, 否则返回0 */</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">emptyQueue(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">queueLK *hq)</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 判断队首或队尾任一个指针是否为空即可 */</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(hq-&gt;front == NULL){</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code><code class=\"cpp keyword bold\">else</code><code class=\"cpp plain\">{</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp comments\">/* 6.清除链队中的所有元素 */</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">clearQueue(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">queueLK *hq)</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number94 index93 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 队首指针赋给p */</code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sNode *p = hq-&gt;front;</code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 依次删除队列中的每一个结点，最后使队首指针为空 */</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p != NULL){</code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">hq-&gt;front = hq-&gt;front-&gt;next;</code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(p);</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">p = hq-&gt;front;</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code><code class=\"cpp comments\">/* 循环结束后队首指针已经为空 */</code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 置队尾指针为空 */</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">hq-&gt;rear = NULL;</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;</code></div><div class=\"line number105 index104 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number106 index105 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">argc, </code><code class=\"cpp color1 bold\">char</code><code class=\"cpp plain\">* argv[])</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">queueLK q;</code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[8] = {3, 8, 5, 17, 9, 30, 15, 22};</code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">initQueue(&amp;q);</code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i = 0; i &lt; 8; i++){</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">enQueue(&amp;q, a[i]);</code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">, outQueue(&amp;q));</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d  \"</code><code class=\"cpp plain\">, outQueue(&amp;q));</code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">enQueue(&amp;q, 68);</code></div><div class=\"line number118 index117 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">, peekQueue(&amp;q));</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d  \"</code><code class=\"cpp plain\">, outQueue(&amp;q));</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(!emptyQueue(&amp;q)){</code></div><div class=\"line number121 index120 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">, outQueue(&amp;q));</code></div><div class=\"line number122 index121 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number123 index122 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\" \"</code><code class=\"cpp plain\">);</code></div><div class=\"line number124 index123 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">clearQueue(&amp;q);</code></div><div class=\"line number125 index124 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number126 index125 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(89, '2、顺序队列', '十一、队列', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>顺序队列:用一段地址连续的存储单元存储数据元素，定义两个游标:指向队头的游标(front)、指向队尾的游标(rear),如果front == rear队列为空,如果(rear + 1) % MAXSIZE == front队列满(此为循环队列),如普通队列rear==MAXSIZE队列满</p><p>顺序队列的实现：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div><div class=\"line number121 index120 alt2\">121</div><div class=\"line number122 index121 alt1\">122</div><div class=\"line number123 index122 alt2\">123</div><div class=\"line number124 index123 alt1\">124</div><div class=\"line number125 index124 alt2\">125</div><div class=\"line number126 index125 alt1\">126</div><div class=\"line number127 index126 alt2\">127</div><div class=\"line number128 index127 alt1\">128</div><div class=\"line number129 index128 alt2\">129</div><div class=\"line number130 index129 alt1\">130</div><div class=\"line number131 index130 alt2\">131</div><div class=\"line number132 index131 alt1\">132</div><div class=\"line number133 index132 alt2\">133</div><div class=\"line number134 index133 alt1\">134</div><div class=\"line number135 index134 alt2\">135</div><div class=\"line number136 index135 alt1\">136</div><div class=\"line number137 index136 alt2\">137</div><div class=\"line number138 index137 alt1\">138</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;</code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">elemType;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sequeue{</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 指向存储队列的数组空间 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">elemType *queue;</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 队首指针（下标），队尾指针（下标），队列长度变量 */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">front, rear, len;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* queue数组长度 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">maxSize;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">};</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">againMalloc(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sequeue *q)</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 空间扩展为原来的2倍，原内容被自动拷贝到p所指向的存储空间中 */</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">elemType *p;</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">p = (elemType *)</code><code class=\"cpp functions bold\">realloc</code><code class=\"cpp plain\">(q-&gt;queue, 2 * q-&gt;maxSize * </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(elemType));</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 动态存储空间分配，若失败则退出运行 */</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!p){</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"空间分配失败！ \"</code><code class=\"cpp plain\">);</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(1);</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 使queue指向新的队列空间 */</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">q-&gt;queue = p;</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 把原队列的尾部内容后移maxSize个位置 */</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(q-&gt;rear != q-&gt;maxSize -1){</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i = 0; i &lt;= q-&gt;rear; i++){</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">q-&gt;queue[i+q-&gt;maxSize] = q-&gt;queue[i];</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 队尾指针后移maxSize个位置 */</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">q-&gt;rear += q-&gt;maxSize;</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 把队列空间大小修改为新的长度 */</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">q-&gt;maxSize = 2 * q-&gt;maxSize;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp comments\">/* 1.初始化队列 */</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">initQueue(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sequeue *q, </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">ms)</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 检查ms是否有效，若无效则退出运行 */</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ms &lt;= 0){</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"ms值非法! \"</code><code class=\"cpp plain\">);</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(1);</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 置队列空间大小为ms */</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">q-&gt;maxSize = ms;</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 动态存储空间分配，若失败则退出运行 */</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">q-&gt;queue = (elemType *)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(ms * </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(elemType));</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(!q-&gt;queue){</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"内存空间分配失败！ \"</code><code class=\"cpp plain\">);</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(1);</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 初始置队列为空 */</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">q-&gt;front = q-&gt;rear = 0;</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp comments\">/* 2.向队列中插入元素x */</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">enQueue(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sequeue *q, elemType x)</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 当队列满时进行动态生分配 */</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">((q-&gt;rear + 1) % q-&gt;maxSize == q-&gt;front){</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">againMalloc(q);</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 求出队尾的下一个位置 */</code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">q-&gt;rear = (q-&gt;rear + 1) % q-&gt;maxSize;</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 把x的值赋给新的队尾 */</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">q-&gt;queue[q-&gt;rear] = x;</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp comments\">/* 3.从队列中删除元素并返回 */</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp plain\">elemType outQueue(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sequeue *q)</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若队列为空则终止运行 */</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(q-&gt;front == q-&gt;rear){</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"队列为空，无法删除！ \"</code><code class=\"cpp plain\">);</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(1);</code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 使队首指针指向下一个位置 */</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">q-&gt;front = (q-&gt;front +1) % q-&gt;maxSize;</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 返回队首元素 */</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">q-&gt;queue[q-&gt;front];</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp comments\">/* 4.读取队首元素，不改变队列状态 */</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp plain\">elemType peekQueue(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sequeue *q)</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 若队列为空则终止运行 */</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(q-&gt;front == q-&gt;rear){</code></div><div class=\"line number88 index87 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"队列为空，无法删除！ \"</code><code class=\"cpp plain\">);</code></div><div class=\"line number89 index88 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">exit</code><code class=\"cpp plain\">(1);</code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 队首元素是队首指针的下一个位置中的元素 */</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">q-&gt;queue[(q-&gt;front +1) % q-&gt;maxSize];</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number94 index93 alt1\"><code class=\"cpp comments\">/* 5.检查一个队列是否为空，若是则返回1,否则返回0 */</code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">emptyQueue(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sequeue *q)</code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(q-&gt;front == q-&gt;rear){</code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code><code class=\"cpp keyword bold\">else</code><code class=\"cpp plain\">{</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp comments\">/* 6.清除一个队列，并释放动态存储空间 */</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">clearQueue(</code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sequeue *q)</code></div><div class=\"line number105 index104 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number106 index105 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(q-&gt;queue != NULL){</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(q-&gt;queue);</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 设置队列空间指针为空 */</code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">q-&gt;queue = NULL;</code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 设置队列为空 */</code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">q-&gt;front = q-&gt;rear = 0;</code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 设置队列大小为0 */</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">q-&gt;maxSize = 0;</code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code><code class=\"cpp plain\">;</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">argc, </code><code class=\"cpp color1 bold\">char</code><code class=\"cpp plain\">* argv[])</code></div><div class=\"line number118 index117 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">sequeue q;</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[8] = {3, 8, 5, 17, 9, 30, 15, 22};</code></div><div class=\"line number121 index120 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i;</code></div><div class=\"line number122 index121 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">initQueue(&amp;q, 5);</code></div><div class=\"line number123 index122 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(i = 0; i &lt; 8; i++){</code></div><div class=\"line number124 index123 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">enQueue(&amp;q, a[i]);</code></div><div class=\"line number125 index124 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number126 index125 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">, outQueue(&amp;q));</code></div><div class=\"line number127 index126 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d  \"</code><code class=\"cpp plain\">, outQueue(&amp;q));</code></div><div class=\"line number128 index127 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">enQueue(&amp;q, 68);</code></div><div class=\"line number129 index128 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">, peekQueue(&amp;q));</code></div><div class=\"line number130 index129 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d  \"</code><code class=\"cpp plain\">, outQueue(&amp;q));</code></div><div class=\"line number131 index130 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(!emptyQueue(&amp;q)){</code></div><div class=\"line number132 index131 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">, outQueue(&amp;q));</code></div><div class=\"line number133 index132 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number134 index133 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\" \"</code><code class=\"cpp plain\">);</code></div><div class=\"line number135 index134 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">clearQueue(&amp;q);</code></div><div class=\"line number136 index135 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number137 index136 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number138 index137 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(90, '1、二叉树的概念', '十二、二叉树', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p><strong style=\"white-space: normal;\">二叉树的概念：</strong></p><p>（1）结点的度。结点所拥有的子树的个数称为该结点的度。二叉树就只有0，1，2三重情况。</p><p>（2）叶结点。度为0的结点称为叶结点，或者称为终端结点。</p><p>（3）分枝结点。度不为0的结点称为分支结点，或者称为非终端结点。一棵树的结点除叶结点外，其余的都是分支结点。</p><p>（4）路径、路径长度。如果一棵树的一串结点n1,n2,…,nk有如下关系：结点ni是ni+1的父结点（1≤i&lt;k）,就把n1,n2,…,nk称为一条由n1至nk的路径。这条路径的长度是k-1。</p><p>（6）祖先、子孙。在树中，如果有一条路径从结点M到结点N，那么M就称为N的祖先，而N称为M的子孙。</p><p>（7）结点的层数。规定树的根结点的层数为1，其余结点的层数等于它的双亲结点的层数加1。</p><p>（8）树的深度。树中所有结点的最大层数称为树的深度。</p><p>（9）树的度。树中各结点度的最大值称为该树的度。</p><p>（10）满二叉树。</p><p>在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子结点都在同一层上，这样的一棵二叉树称作满二叉树。深度为K的满二叉树且有2的K次方减1个结点。</p><p>（11）完全二叉树（近似满二叉树）</p><p>完全二叉树是由满二叉树而引出来的。深度为K的，有N个结点的二叉树，当且仅当其每一个结点都与深度为K的满二叉树中编号从1至N的结点一一对应，称之为完全二叉树。</p><p>完全二叉树的特点是：叶子结点只能出现在最下层和次下层，且最下层的叶子结点集中在树的左部。显然，一棵满二叉树必定是一棵完全二叉树，而完全二叉树未必是满二叉树。</p><p>（12）平衡二叉树又被称为AVL树（区别于AVL算法），它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><p><strong>二叉树的主要性质：</strong></p><p>性质1 一棵非空二叉树的第i层上最多有2^(i-1)个结点（i≥1）。</p><p>性质2 一棵深度为k的二叉树中，最多具有2^k－1个结点。</p><p>性质3 对于一棵非空的二叉树，如果叶子结点数为n0，度数为2的结点数为n2，则有:n0＝n2+1。</p><p>性质4 具有n个结点的完全二叉树的深度k为[log2n]+1。</p><p>性质5 对于具有n个结点的完全二叉树，如果按照从上至下和从左到右的顺序对二叉树中的所有结点从1开始顺序编号，则对于任意的序号为i的结点，有：</p><p>    （1）如果i&gt;1，则序号为i的结点的双亲结点的序号为i/2(\"/\"表示整除)；如果i＝1，则序号为i的结点是根结点，无双亲结点。</p><p>    （2）如果2i≤n，则序号为i的结点的左孩子结点的序号为2i；如果2i&gt;n，则序号为i的结点无左孩子。</p><p>    （3）如果2i+1≤n，则序号为i的结点的右孩子结点的序号为2i+1；如果2i+1&gt;n，则序号为i的结点无右孩子。</p><p>    此外，若对二叉树的根结点从0开始编号，则相应的i号结点的双亲结点的编号为（i-1）/2，左孩子的编号为2i+1，右孩子的编号为2i+2。</p> </div>\n</div>');
INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(91, '2、二叉树的实现', '十二、二叉树', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>实现二叉树的建立，递归先序、中序、后序遍历，非递归先序、中序遍历及非递归层序遍历等操作：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div><div class=\"line number86 index85 alt1\">86</div><div class=\"line number87 index86 alt2\">87</div><div class=\"line number88 index87 alt1\">88</div><div class=\"line number89 index88 alt2\">89</div><div class=\"line number90 index89 alt1\">90</div><div class=\"line number91 index90 alt2\">91</div><div class=\"line number92 index91 alt1\">92</div><div class=\"line number93 index92 alt2\">93</div><div class=\"line number94 index93 alt1\">94</div><div class=\"line number95 index94 alt2\">95</div><div class=\"line number96 index95 alt1\">96</div><div class=\"line number97 index96 alt2\">97</div><div class=\"line number98 index97 alt1\">98</div><div class=\"line number99 index98 alt2\">99</div><div class=\"line number100 index99 alt1\">100</div><div class=\"line number101 index100 alt2\">101</div><div class=\"line number102 index101 alt1\">102</div><div class=\"line number103 index102 alt2\">103</div><div class=\"line number104 index103 alt1\">104</div><div class=\"line number105 index104 alt2\">105</div><div class=\"line number106 index105 alt1\">106</div><div class=\"line number107 index106 alt2\">107</div><div class=\"line number108 index107 alt1\">108</div><div class=\"line number109 index108 alt2\">109</div><div class=\"line number110 index109 alt1\">110</div><div class=\"line number111 index110 alt2\">111</div><div class=\"line number112 index111 alt1\">112</div><div class=\"line number113 index112 alt2\">113</div><div class=\"line number114 index113 alt1\">114</div><div class=\"line number115 index114 alt2\">115</div><div class=\"line number116 index115 alt1\">116</div><div class=\"line number117 index116 alt2\">117</div><div class=\"line number118 index117 alt1\">118</div><div class=\"line number119 index118 alt2\">119</div><div class=\"line number120 index119 alt1\">120</div><div class=\"line number121 index120 alt2\">121</div><div class=\"line number122 index121 alt1\">122</div><div class=\"line number123 index122 alt2\">123</div><div class=\"line number124 index123 alt1\">124</div><div class=\"line number125 index124 alt2\">125</div><div class=\"line number126 index125 alt1\">126</div><div class=\"line number127 index126 alt2\">127</div><div class=\"line number128 index127 alt1\">128</div><div class=\"line number129 index128 alt2\">129</div><div class=\"line number130 index129 alt1\">130</div><div class=\"line number131 index130 alt2\">131</div><div class=\"line number132 index131 alt1\">132</div><div class=\"line number133 index132 alt2\">133</div><div class=\"line number134 index133 alt1\">134</div><div class=\"line number135 index134 alt2\">135</div><div class=\"line number136 index135 alt1\">136</div><div class=\"line number137 index136 alt2\">137</div><div class=\"line number138 index137 alt1\">138</div><div class=\"line number139 index138 alt2\">139</div><div class=\"line number140 index139 alt1\">140</div><div class=\"line number141 index140 alt2\">141</div><div class=\"line number142 index141 alt1\">142</div><div class=\"line number143 index142 alt2\">143</div><div class=\"line number144 index143 alt1\">144</div><div class=\"line number145 index144 alt2\">145</div><div class=\"line number146 index145 alt1\">146</div><div class=\"line number147 index146 alt2\">147</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt; </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number3 index2 alt2\"> </div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#define SIZE 100 </code></div><div class=\"line number5 index4 alt2\"> </div><div class=\"line number6 index5 alt1\"><code class=\"cpp comments\">/* 定义二叉树节点结构 */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">BiTNode</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 数据域 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">data;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 左右孩子指针域 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">BiTNode *lchild,*rchild;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">}BiTNode,*BiTree;</code></div><div class=\"line number14 index13 alt1\"> </div><div class=\"line number15 index14 alt2\"> </div><div class=\"line number16 index15 alt1\"><code class=\"cpp comments\">//建立二叉树</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">CreateBiTree(BiTree &amp;T)</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">ch;</code></div><div class=\"line number20 index19 alt1\"> </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 读入一个字符 */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">,&amp;ch);</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(ch==</code><code class=\"cpp string\">\' \'</code><code class=\"cpp plain\">)</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">T=NULL;</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 生成一个新结点 */</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">T=(BiTNode *)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(BiTNode));</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">T-&gt;data=ch;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 生成左子树 */</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">CreateBiTree(T-&gt;lchild);</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 生成右子树 */</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">CreateBiTree(T-&gt;rchild);</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number36 index35 alt1\"> </div><div class=\"line number37 index36 alt2\"><code class=\"cpp comments\">/* 先序遍历的递归 */</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">PreOrder(BiTree T)</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(T)</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 访问结点 */</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c \"</code><code class=\"cpp plain\">,T-&gt;data);</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 遍历左子树 */</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">PreOrder(T-&gt;lchild);</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 遍历右子树 */</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">PreOrder(T-&gt;rchild);</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number50 index49 alt1\"> </div><div class=\"line number51 index50 alt2\"><code class=\"cpp comments\">/* 中序遍历的递归 */</code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">InOrder(BiTree T)</code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(T)</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 遍历左子树 */</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">InOrder(T-&gt;lchild);</code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 访问结点 */</code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c \"</code><code class=\"cpp plain\">,T-&gt;data);</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 遍历右子树 */</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">InOrder(T-&gt;rchild);</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number64 index63 alt1\"> </div><div class=\"line number65 index64 alt2\"><code class=\"cpp comments\">//后序遍历的递归</code></div><div class=\"line number66 index65 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">PostOrder(BiTree T)</code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(T) {</code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 遍历左子树 */</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">PostOrder(T-&gt;lchild);</code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 访问结点 */</code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">PostOrder(T-&gt;rchild);</code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 遍历右子树 */</code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c \"</code><code class=\"cpp plain\">,T-&gt;data);</code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number77 index76 alt2\"> </div><div class=\"line number78 index77 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">visit(BiTree T)</code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(T)</code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c \"</code><code class=\"cpp plain\">,T-&gt;data);</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">1;</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number86 index85 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number87 index86 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number88 index87 alt1\"> </div><div class=\"line number89 index88 alt2\"><code class=\"cpp comments\">//主函数</code></div><div class=\"line number90 index89 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number91 index90 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number92 index91 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">BiTree T;</code></div><div class=\"line number93 index92 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">j;</code></div><div class=\"line number94 index93 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">flag=1;</code></div><div class=\"line number95 index94 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"请建立二叉树。\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number96 index95 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"建树将以三个空格后回车结束。\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number97 index96 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"例如:1 2 3 4 5 6   (回车)\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number98 index97 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 初始化队列 */</code></div><div class=\"line number99 index98 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">CreateBiTree(T);</code></div><div class=\"line number100 index99 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">getchar</code><code class=\"cpp plain\">();</code></div><div class=\"line number101 index100 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(flag)</code></div><div class=\"line number102 index101 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{</code></div><div class=\"line number103 index102 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number104 index103 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"请选择:\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number105 index104 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"1.递归先序遍历\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number106 index105 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"2.递归中序遍历\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number107 index106 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"3.递归后序遍历\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number108 index107 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"0.退出程序\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number109 index108 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%c\"</code><code class=\"cpp plain\">,&amp;j);</code></div><div class=\"line number110 index109 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">switch</code><code class=\"cpp plain\">(j)</code></div><div class=\"line number111 index110 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{</code></div><div class=\"line number112 index111 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp string\">\'1\'</code><code class=\"cpp plain\">:</code></div><div class=\"line number113 index112 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(T) {</code></div><div class=\"line number114 index113 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"递归先序遍历二叉树:\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number115 index114 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">PreOrder(T);</code></div><div class=\"line number116 index115 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number117 index116 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number118 index117 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number119 index118 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"二叉树为空!\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number120 index119 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number121 index120 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp string\">\'2\'</code><code class=\"cpp plain\">:</code></div><div class=\"line number122 index121 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(T){</code></div><div class=\"line number123 index122 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"递归中序遍历二叉树:\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number124 index123 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">InOrder(T);</code></div><div class=\"line number125 index124 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number126 index125 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number127 index126 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number128 index127 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"二叉树为空!\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number129 index128 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number130 index129 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">case</code> <code class=\"cpp string\">\'3\'</code><code class=\"cpp plain\">:</code></div><div class=\"line number131 index130 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(T) {</code></div><div class=\"line number132 index131 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"递归后序遍历二叉树:\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number133 index132 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">PostOrder(T);</code></div><div class=\"line number134 index133 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number135 index134 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}</code></div><div class=\"line number136 index135 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number137 index136 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"二叉树为空!\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number138 index137 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;</code></div><div class=\"line number139 index138 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">default</code><code class=\"cpp plain\">:</code></div><div class=\"line number140 index139 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">flag=0;</code></div><div class=\"line number141 index140 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"程序运行结束，按任意键退出!\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number142 index141 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number143 index142 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}</code></div><div class=\"line number144 index143 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}</code></div><div class=\"line number145 index144 alt2\"> </div><div class=\"line number146 index145 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;</code></div><div class=\"line number147 index146 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(92, '1、二分查找', '十三、查找与排序', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。</p><p>因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</p><p>首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功.</p><p><br/></p><p>第一种情况:无重复序列的查找 </p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt; </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Bin_Search(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*s,</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">value,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n)  </code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">max = n - 1;  </code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">min = 0;  </code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">mid = 0;  </code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(min &lt;= max)  </code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 折半查找 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">mid = min + (max - min) / 2;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* */</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(value &lt; s[mid])</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">max = mid - 1;  </code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 如果小于则在,较小的一半中查找 */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(value &gt; s[mid]) </code><code class=\"cpp comments\">//</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 如果大于则,在大的一半中查找 */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">min = mid + 1;  </code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code>  </div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 找到回来位置  */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">mid;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">-1;  </code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp plain\">} </code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s[] = </code><code class=\"cpp string\">\"abcdefgh\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">value = </code><code class=\"cpp string\">\'h\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">pos;</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">pos = Bin_Search(s,value,</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(s));</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pos is: %d\\n\"</code><code class=\"cpp plain\">,pos);</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table><p>第二种情况：存在重复元素的序列的查找,查找最小序号</p><p>如： aaaaabcccccddddeeeefff</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt; </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt;</code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#include &lt;string.h&gt;</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Bin_Search(</code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">*s,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">value,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n)  </code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 设置最小值为0 */</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">min = 0;</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 设置最大值为n - 1 */</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">max = n - 1;</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">mid;  </code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 位置初始化为-1 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">pos = -1;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(min &lt; max)  </code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 将字符串折半 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">mid = min + (max - min)/ 2;</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 如果中间的值大于要查找的值，则在小的一半中查找 */</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(s[mid] &gt; value) </code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">max = mid - 1;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 如果中间的值小于要查找的值,则在大的一半中查找 */</code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(s[mid] &lt; value)</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">min = mid + 1;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 如果找到记录下位置 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{  </code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">pos = mid; </code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 再在小的一半中继续查找 */</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">max = mid - 1;</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}  </code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 如果是第一个字符等于要查找的值，记下位置 */</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(s[min] == value)</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">pos = min;  </code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">pos;</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp plain\">{</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">s[] = </code><code class=\"cpp string\">\"aaaaabcccccddddeeeefff\"</code><code class=\"cpp plain\">;</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">char</code> <code class=\"cpp plain\">value = </code><code class=\"cpp string\">\'d\'</code><code class=\"cpp plain\">;</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">pos;</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">pos = Bin_Search(s,value,</code><code class=\"cpp functions bold\">strlen</code><code class=\"cpp plain\">(s));</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pos is: %d\\n\"</code><code class=\"cpp plain\">,pos);</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(93, '2、散列表', '十三、查找与排序', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p><p>下面的哈希表函数使用了(除留余数)</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div><div class=\"line number65 index64 alt2\">65</div><div class=\"line number66 index65 alt1\">66</div><div class=\"line number67 index66 alt2\">67</div><div class=\"line number68 index67 alt1\">68</div><div class=\"line number69 index68 alt2\">69</div><div class=\"line number70 index69 alt1\">70</div><div class=\"line number71 index70 alt2\">71</div><div class=\"line number72 index71 alt1\">72</div><div class=\"line number73 index72 alt2\">73</div><div class=\"line number74 index73 alt1\">74</div><div class=\"line number75 index74 alt2\">75</div><div class=\"line number76 index75 alt1\">76</div><div class=\"line number77 index76 alt2\">77</div><div class=\"line number78 index77 alt1\">78</div><div class=\"line number79 index78 alt2\">79</div><div class=\"line number80 index79 alt1\">80</div><div class=\"line number81 index80 alt2\">81</div><div class=\"line number82 index81 alt1\">82</div><div class=\"line number83 index82 alt2\">83</div><div class=\"line number84 index83 alt1\">84</div><div class=\"line number85 index84 alt2\">85</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;  </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt; </code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp preprocessor\">#define MAXSIZE 17  </code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp preprocessor\">#define NULLKEY -32768  </code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 关键字结点 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">node{</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 关键字 */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">data;</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 指向下一个结点 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">node *next;</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp plain\">}Node;  </code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp keyword bold\">typedef</code> <code class=\"cpp keyword bold\">struct</code> <code class=\"cpp plain\">Table{ </code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 动态分配哈希表 */</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *table;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 哈希表的关键字个数 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">count; </code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp plain\">}HashTable; </code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp comments\">/* 初始化哈希表 */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">InitHashTable(HashTable *H)</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 初始化哈希表的大小 */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">H-&gt;count = MAXSIZE; </code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 创建哈希表 */</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">H-&gt;table = (Node *)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(Node) * H-&gt;count);</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 初始化哈希表的数据 */</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;i &lt; H-&gt;count;++i)</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">H-&gt;table[i].data = NULLKEY;  </code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">H-&gt;table[i].next = NULL;  </code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp comments\">/* 哈希表函数 */</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Hash(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">key)</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">key % MAXSIZE;  </code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp plain\">}</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp comments\">/* 将关键字key插入哈希表 */</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">InsertHashTable(HashTable *H,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">key)</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">addr = Hash(key);</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 如果为真，创建单链表 */</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(H-&gt;table[addr].data != key &amp;&amp; H-&gt;table[addr].data != NULLKEY)</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">Node *temp = (Node *)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(Node));  </code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">temp-&gt;next = H-&gt;table[addr].next;  </code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">temp-&gt;data = key;  </code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">H-&gt;table[addr].next = temp;  </code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 则否直接填入 */</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code> <code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(H-&gt;table[addr].data == NULLKEY)</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">H-&gt;table[addr].data = key;  </code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp plain\">}  </code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp comments\">/* 查找关键字key的值 */</code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp color1 bold\">bool</code> <code class=\"cpp plain\">SearchHashTable(HashTable *H,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">key)</code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">addr = Hash(key);  </code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(H-&gt;table[addr].data == key)  </code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;  </code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">Node *p = H-&gt;table[addr].next;</code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 查找单链表 */</code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(p != NULL)</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(p-&gt;data == key)  </code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">true</code><code class=\"cpp plain\">;  </code></div><div class=\"line number65 index64 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code>  </div><div class=\"line number66 index65 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">p = p-&gt;next;  </code></div><div class=\"line number67 index66 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number68 index67 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp keyword bold\">false</code><code class=\"cpp plain\">;  </code></div><div class=\"line number69 index68 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number70 index69 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()  </code></div><div class=\"line number71 index70 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number72 index71 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">HashTable H;  </code></div><div class=\"line number73 index72 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">InitHashTable(&amp;H);  </code></div><div class=\"line number74 index73 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;i &lt; MAXSIZE * 2;i += 2)  </code></div><div class=\"line number75 index74 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">InsertHashTable(&amp;H,i);  </code></div><div class=\"line number76 index75 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"请输入要查找的内容:\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number77 index76 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">key;  </code></div><div class=\"line number78 index77 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">scanf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d\"</code><code class=\"cpp plain\">,&amp;key);  </code></div><div class=\"line number79 index78 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(SearchHashTable(&amp;H,key))  </code></div><div class=\"line number80 index79 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"在哈希表中找到关键字:%d\\n\"</code><code class=\"cpp plain\">,key);  </code></div><div class=\"line number81 index80 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">else</code>  </div><div class=\"line number82 index81 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"在哈希表中未找到关键字:%d\\n\"</code><code class=\"cpp plain\">,key);</code></div><div class=\"line number83 index82 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number84 index83 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;  </code></div><div class=\"line number85 index84 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(94, '3、冒泡排序', '十三、查找与排序', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>冒泡排序（BubbleSort）的基本概念是：依次比较相邻的两个数，将小数放在前面，大数放在后面。即在第一趟：首先比较第1个和第2个数，将小数放前，大数放后。然后比较第2个数和第3个数，将小数放前，大数放后，如此继续，直至比较最后两个数，将小数放前，大数放后。至此第一趟结束，将最大的数放到了最后。在第二趟：仍从第一对数开始比较（因为可能由于第2个数和第3个数的交换，使得第1个数不再小于第2个数），将小数放前，大数放后，一直比较到倒数第二个数（倒数第一的位置上已经是最大的），第二趟结束，在倒数第二的位置上得到一个新的最大数（其实在整个数列中是第二大的数）。如此下去，重复以上过程，直至最终完成排序。</p><p>由于在排序过程中总是小数往前放，大数往后放，相当于气泡往上升，所以称作冒泡排序。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;  </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt; </code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp comments\">/* 交换两个数值 */</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">Swap(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*b)  </code><code class=\"cpp comments\">//  </code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">temp = *a;  </code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">*a = *b;  </code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">*b = temp;  </code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp plain\">}  </code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp comments\">/* 冒泡排序算法 */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">BubbleSort(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len)</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;i &lt; len - 1;++i)  </code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j = len - 2;j &gt;= i;--j)  </code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{  </code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a[j] &gt; a[j + 1])  </code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">Swap(&amp;a[j],&amp;a[j + 1]);  </code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}  </code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}  </code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()  </code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[] = {20,15,22,30,34,14,19,1,48,5,9,10,88,17};  </code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"排序前数组的元素为:\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len = </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(a) / </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(*a);  </code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;i &lt; len;++i)  </code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">,a[i]);  </code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">BubbleSort(a,len);  </code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n排序后数组的元素为:\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;i &lt; len;++i)  </code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">,a[i]);</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;  </code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(95, '4、简单选择排序', '十三、查找与排序', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>在简单选择排序过程中，所需移动记录的次数比较少。最好情况下，即待排序记录初始状态就已经是正序排列了，则不需要移动记录。</p><p>最坏情况下，即待排序记录初始状态是按逆序排列的，则需要移动记录的次数最多为3（n-1）。简单选择排序过程中需要进行的比较次数与初始状态下待排序的记录序列的排列情况无关。当i=1时，需进行n-1次比较；当i=2时，需进行n-2次比较；依次类推，共需要进行的比较次数是(n-1)+(n-2)+…+2+1=n(n-1)/2，即进行比较操作的时间复杂度为 O(n^2)。</p><p>简单选择排序是不稳定排序</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;  </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt; </code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp comments\">/* 交换两个数值 */</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">Swap(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*b)</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">temp = *a;  </code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">*a = *b;  </code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">*b = temp;  </code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp plain\">} </code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp comments\">/* 简单排序算法 */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">SelectSort(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len)</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 用于记录最小元素的下标 */</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">min;</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;i &lt; len - 1;++i)  </code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 设i为最小元素的下标 */</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">min = i;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j = i + 1;j &lt; len;++j)  </code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{  </code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 如果a[min] &gt; a[j]则把j记录为最小值 */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a[min] &gt; a[j])</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">min = j;  </code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}  </code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 如果i不为最小值的下标，进行交换 */</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(i != min)</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">Swap(&amp;a[i],&amp;a[min]);  </code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp plain\">}   </code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)  </code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[] = {20,12,11,9,8,35,56,25,5,6};  </code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len = </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(a) / </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(*a);  </code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"排序前数组的元素:\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;i &lt; len;++i)  </code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">,a[i]);  </code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">SelectSort(a,len);  </code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"排序后数组的元素:\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;i &lt; len;++i)  </code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">,a[i]);</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;  </code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(96, '5、直接插入排序', '十三、查找与排序', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>插入排序(Insertion Sort)的基本思想是：每次将一个待排序的记录，按其关键字大小插入到前面已经排好序的子文件中的适当位置，直到全部记录插入完成为止。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;  </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt; </code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp comments\">/* 直插排序算法 */</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">InsertSort(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len)</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">temp;  </code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j;  </code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 1;i &lt; len;++i)  </code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a[i] &lt; a[i - 1])  </code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{  </code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 记录较小的值 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">temp = a[i];</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j = i - 1;j &gt;= 0 &amp;&amp; a[j] &gt; temp;--j)</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp comments\">/* 将值向后移 */</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">a[j + 1] = a[j];</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 将较小的值插入正确位置 */</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">a[j + 1] = temp;</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}  </code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()  </code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[] = {13,10,11,34,23,17,29,31};  </code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">InsertSort(a,</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(a)/</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(*a));  </code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;i &lt; </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(a) / </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(*a);++i)  </code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">,a[i]);  </code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">); </code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;  </code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');
INSERT INTO `intellectual` (`ID`, `name`, `sort`, `content`) VALUES
(97, '6、希尔排序', '十三、查找与排序', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>希尔排序的实质就是分组插入排序，该方法又称缩小增量排序。</p><p>该方法的基本思想是：先将整个待排元素序列分割成若干个子序列（由相隔某个“增量”的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况），效率是很高的，因此希尔排序在时间效率上比前两种方法有较大提高</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;  </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt; </code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp comments\">/* 希尔排序算法 */</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">ShellSort(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len)</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">gap,j;  </code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(gap = len / 2;gap &gt; 0;gap /= 2)  </code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* j从gap个元素开始 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(j = gap;j &lt; len;++j)</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">{  </code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 每个元素与自己组内的数据进行直接插入排序 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a[j] &lt; a[j - gap])  </code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">{  </code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">temp = a[j];  </code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">k = j - gap;  </code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(k &gt;= 0 &amp;&amp; a[k] &gt; temp)  </code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">{  </code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">a[k + gap] = a[k];  </code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">                    </code><code class=\"cpp plain\">k -= gap;  </code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">}  </code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">                </code><code class=\"cpp plain\">a[k + gap] = temp;  </code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">}  </code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">}  </code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp plain\">}  </code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)  </code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[] = {12,5,35,42,37,15,4,3,2,1,11,9,23};  </code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len = </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(a) / </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(*a);  </code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">ShellSort(a,len);  </code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"经过希尔排序后的数组序列:\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;i &lt; len;++i)  </code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">,a[i]);  </code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;  </code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(98, '7、堆排序', '十三、查找与排序', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>堆排序是利用堆进行排序的算法</p><p>将待排序的序列构造成一个大顶堆(或小顶堆)，此时序列 的最大值就是堆顶的根结点</p><p>将其与堆数组中的未尾元素交换，此时未尾元素就是最大 值,然后将剩余的n - 1个序列重新构造成一个大顶堆，如些反复便能得到一个有序的序列</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;  </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt; </code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp comments\">/* 建立大顶堆 */</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">HeapAdjust(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">n,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len)</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">temp = a[n];  </code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j = n * 2;j &lt; len;j *= 2)  </code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 如果结点的左孩子小于右孩子增加j的值 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(j &lt; len - 1 &amp;&amp; a[j] &lt; a[j + 1])</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp comments\">/* 用于记录较大的结点的下标 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">++j;</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 如果父结点大于等于两个孩子,则满足大顶堆的定义，跳出循环 */</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(temp &gt;= a[j])</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">            </code><code class=\"cpp keyword bold\">break</code><code class=\"cpp plain\">;  </code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 否则用较大的结点替换父结点 */</code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[n] = a[j];</code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 记录下替换父结点的结点下标 */</code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">n = j;</code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">} </code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 把原来的父结点移动到替换父结点的结点位置 */</code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">a[n] = temp;</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">} </code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp comments\">/* 交换两个数值 */</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">Swap(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*b)</code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">temp = *a;  </code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">*a = *b;  </code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">*b = temp;  </code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp plain\">}  </code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp comments\">/* 堆排序算法 */</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">HeapSort(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len)</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 建立大顶堆 */</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = len / 2;i &gt;= 0;--i)</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">HeapAdjust(a,i,len);  </code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = len - 1;i &gt; 0;--i)  </code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 第个元素和最后一个元素进行交换 */</code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">Swap(&amp;a[i],&amp;a[0]);</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 建立大顶堆 */</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">HeapAdjust(a,0,i);</code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp plain\">}  </code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)  </code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[] = {12,45,34,37,66,15,6,4,17,19,25,35,3,2,1};  </code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len = </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(a) / </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(*a);  </code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">HeapSort(a,len);  </code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"排序后的数组序列为:\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;i &lt; len;++i)  </code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">,a[i]);  </code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;  </code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(99, '8、归并排序', '十三、查找与排序', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</p><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p><p>将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div><div class=\"line number59 index58 alt2\">59</div><div class=\"line number60 index59 alt1\">60</div><div class=\"line number61 index60 alt2\">61</div><div class=\"line number62 index61 alt1\">62</div><div class=\"line number63 index62 alt2\">63</div><div class=\"line number64 index63 alt1\">64</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;  </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt; </code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">MSort(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">temp[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">low,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">high);</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp comments\">/* 归并排序算法 */</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">MergeSort(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len)</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 动态分配一个额外的存储空间 */</code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*TR = (</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*)</code><code class=\"cpp functions bold\">malloc</code><code class=\"cpp plain\">(</code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code><code class=\"cpp plain\">) * len);</code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 分裂然后调用归并排序 */</code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">MSort(a,TR,0,len-1); </code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 释放内存 */</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">free</code><code class=\"cpp plain\">(TR);</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp plain\">}</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp comments\">/* 归并排序 */</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">Merge(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">TR[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">low,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">mid,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">high)</code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = low;  </code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">j = mid + 1;  </code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">k = 0;  </code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(i &lt;= mid &amp;&amp; j &lt;= high)  </code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 进行排序存入动态分配的数组中 */</code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(a[i] &lt; a[j])</code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">TR[k++] = a[i++];  </code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">else</code>  </div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">TR[k++] = a[j++];  </code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 如果前一半中还有未处理完的数据,按顺序移入动态分配的数组内 */</code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(i &lt;= mid)</code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">TR[k++] = a[i++];</code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 如果后一半中还有未处理完的数据，按顺序移入动态分配的数组内 */</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(j &lt;= high)</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">TR[k++] = a[j++]; </code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 将排序好的数据移回到原序列中 */</code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">v = 0,i = low;i &lt;= high;++v,++i)</code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">a[i] = TR[v];  </code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp plain\">}  </code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">MSort(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">temp[],</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">low,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">high)  </code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">mid;  </code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(low &lt; high)  </code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 进行分裂 */</code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">mid = (low + high) / 2;</code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 将前一半继续分裂 */</code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">MSort(a,temp,low,mid);</code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 将后一半继续分裂 */</code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">MSort(a,temp,mid + 1,high);</code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 进行归并排序 */</code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">Merge(a,temp,low,mid,high);</code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp plain\">} </code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main(</code><code class=\"cpp keyword bold\">void</code><code class=\"cpp plain\">)  </code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[] = {20,19,35,33,17,42,15,55,9,5,8,3,1};  </code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len = </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(a) / </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(*a);  </code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">MergeSort(a,len);  </code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"排序后的数组序列:\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number59 index58 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;i &lt; len;++i)  </code></div><div class=\"line number60 index59 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">,a[i]);  </code></div><div class=\"line number61 index60 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number62 index61 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number63 index62 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;  </code></div><div class=\"line number64 index63 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>'),
(100, '9、快速排序', '十三、查找与排序', '<div class=\"content_item\">\n<div class=\"item_content\">\n<p>快速排序（Quicksort）是对冒泡排序的一种改进。由C. A. R. Hoare在1962年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"syntaxhighlighter cpp\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div><div class=\"line number7 index6 alt2\">7</div><div class=\"line number8 index7 alt1\">8</div><div class=\"line number9 index8 alt2\">9</div><div class=\"line number10 index9 alt1\">10</div><div class=\"line number11 index10 alt2\">11</div><div class=\"line number12 index11 alt1\">12</div><div class=\"line number13 index12 alt2\">13</div><div class=\"line number14 index13 alt1\">14</div><div class=\"line number15 index14 alt2\">15</div><div class=\"line number16 index15 alt1\">16</div><div class=\"line number17 index16 alt2\">17</div><div class=\"line number18 index17 alt1\">18</div><div class=\"line number19 index18 alt2\">19</div><div class=\"line number20 index19 alt1\">20</div><div class=\"line number21 index20 alt2\">21</div><div class=\"line number22 index21 alt1\">22</div><div class=\"line number23 index22 alt2\">23</div><div class=\"line number24 index23 alt1\">24</div><div class=\"line number25 index24 alt2\">25</div><div class=\"line number26 index25 alt1\">26</div><div class=\"line number27 index26 alt2\">27</div><div class=\"line number28 index27 alt1\">28</div><div class=\"line number29 index28 alt2\">29</div><div class=\"line number30 index29 alt1\">30</div><div class=\"line number31 index30 alt2\">31</div><div class=\"line number32 index31 alt1\">32</div><div class=\"line number33 index32 alt2\">33</div><div class=\"line number34 index33 alt1\">34</div><div class=\"line number35 index34 alt2\">35</div><div class=\"line number36 index35 alt1\">36</div><div class=\"line number37 index36 alt2\">37</div><div class=\"line number38 index37 alt1\">38</div><div class=\"line number39 index38 alt2\">39</div><div class=\"line number40 index39 alt1\">40</div><div class=\"line number41 index40 alt2\">41</div><div class=\"line number42 index41 alt1\">42</div><div class=\"line number43 index42 alt2\">43</div><div class=\"line number44 index43 alt1\">44</div><div class=\"line number45 index44 alt2\">45</div><div class=\"line number46 index45 alt1\">46</div><div class=\"line number47 index46 alt2\">47</div><div class=\"line number48 index47 alt1\">48</div><div class=\"line number49 index48 alt2\">49</div><div class=\"line number50 index49 alt1\">50</div><div class=\"line number51 index50 alt2\">51</div><div class=\"line number52 index51 alt1\">52</div><div class=\"line number53 index52 alt2\">53</div><div class=\"line number54 index53 alt1\">54</div><div class=\"line number55 index54 alt2\">55</div><div class=\"line number56 index55 alt1\">56</div><div class=\"line number57 index56 alt2\">57</div><div class=\"line number58 index57 alt1\">58</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;  </code></div><div class=\"line number2 index1 alt1\"><code class=\"cpp preprocessor\">#include &lt;stdlib.h&gt; </code></div><div class=\"line number3 index2 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Sort(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">low,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">high);</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">Swap(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">low,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">high);</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp comments\">/* 快速排序算法 */</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">QSort(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">low,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">high)</code></div><div class=\"line number7 index6 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number8 index7 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">if</code><code class=\"cpp plain\">(low &lt; high)  </code></div><div class=\"line number9 index8 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number10 index9 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 将a[low].......a[high]一分为二,算出枢轴值 */</code></div><div class=\"line number11 index10 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">pivot = Sort(a,low,high);</code></div><div class=\"line number12 index11 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 将前一半快速排序 */</code></div><div class=\"line number13 index12 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">QSort(a,low,pivot-1);</code></div><div class=\"line number14 index13 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 将后一半快速排序 */</code></div><div class=\"line number15 index14 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">QSort(a,pivot+1,high); </code></div><div class=\"line number16 index15 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number17 index16 alt2\"><code class=\"cpp plain\">} </code></div><div class=\"line number18 index17 alt1\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">QuickSort(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len)  </code></div><div class=\"line number19 index18 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number20 index19 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">QSort(a,0,len-1);  </code></div><div class=\"line number21 index20 alt2\"><code class=\"cpp plain\">}  </code></div><div class=\"line number22 index21 alt1\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">Sort(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">low,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">high)  </code></div><div class=\"line number23 index22 alt2\"><code class=\"cpp plain\">{  </code></div><div class=\"line number24 index23 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 选待排序列的第一个元素为枢轴值 */</code></div><div class=\"line number25 index24 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">pivotkey = a[low]; </code></div><div class=\"line number26 index25 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 从序列的两端后中间扫描进行排序 */</code></div><div class=\"line number27 index26 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(low &lt; high)</code></div><div class=\"line number28 index27 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">{  </code></div><div class=\"line number29 index28 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(low &lt; high &amp;&amp; a[high] &gt;= pivotkey)   </code></div><div class=\"line number30 index29 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">high--;  </code></div><div class=\"line number31 index30 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp comments\">/* 交换两值 */</code></div><div class=\"line number32 index31 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">Swap(a,low,high);</code></div><div class=\"line number33 index32 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp keyword bold\">while</code><code class=\"cpp plain\">(low &lt; high &amp;&amp; a[low] &lt;= pivotkey)  </code></div><div class=\"line number34 index33 alt1\"><code class=\"cpp spaces\">            </code><code class=\"cpp plain\">low++;  </code></div><div class=\"line number35 index34 alt2\"><code class=\"cpp spaces\">        </code><code class=\"cpp plain\">Swap(a,low,high);  </code></div><div class=\"line number36 index35 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">}  </code></div><div class=\"line number37 index36 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp comments\">/* 返回区轴所在位置 */</code></div><div class=\"line number38 index37 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">low;</code></div><div class=\"line number39 index38 alt2\"><code class=\"cpp plain\">}  </code></div><div class=\"line number40 index39 alt1\"><code class=\"cpp comments\">/* 交换两个位置的元素 */</code></div><div class=\"line number41 index40 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">Swap(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">*a,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">low,</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">high)</code></div><div class=\"line number42 index41 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number43 index42 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">temp = a[low];  </code></div><div class=\"line number44 index43 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">a[low] = a[high];  </code></div><div class=\"line number45 index44 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">a[high] = temp;  </code></div><div class=\"line number46 index45 alt1\"><code class=\"cpp plain\">}   </code></div><div class=\"line number47 index46 alt2\"><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">main()  </code></div><div class=\"line number48 index47 alt1\"><code class=\"cpp plain\">{  </code></div><div class=\"line number49 index48 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">a[] = {20,87,12,67,23,10,17,66,81,24,13};  </code></div><div class=\"line number50 index49 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">len = </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(a) / </code><code class=\"cpp keyword bold\">sizeof</code><code class=\"cpp plain\">(*a);  </code></div><div class=\"line number51 index50 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp plain\">QuickSort(a,len);  </code></div><div class=\"line number52 index51 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"排序后的序列为:\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number53 index52 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">for</code><code class=\"cpp plain\">(</code><code class=\"cpp color1 bold\">int</code> <code class=\"cpp plain\">i = 0;i &lt; len;++i)  </code></div><div class=\"line number54 index53 alt1\"><code class=\"cpp spaces\">        </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"%d \"</code><code class=\"cpp plain\">,a[i]);  </code></div><div class=\"line number55 index54 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"\\n\"</code><code class=\"cpp plain\">);  </code></div><div class=\"line number56 index55 alt1\"><code class=\"cpp spaces\">    </code><code class=\"cpp functions bold\">system</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">\"pause\"</code><code class=\"cpp plain\">);</code></div><div class=\"line number57 index56 alt2\"><code class=\"cpp spaces\">    </code><code class=\"cpp keyword bold\">return</code> <code class=\"cpp plain\">0;  </code></div><div class=\"line number58 index57 alt1\"><code class=\"cpp plain\">}</code></div></div></td></tr></tbody></table> </div>\n</div>');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `arithmetic`
--
ALTER TABLE `arithmetic`
  ADD PRIMARY KEY (`ID`);

--
-- Indexes for table `cfunction`
--
ALTER TABLE `cfunction`
  ADD PRIMARY KEY (`ID`);

--
-- Indexes for table `intellectual`
--
ALTER TABLE `intellectual`
  ADD PRIMARY KEY (`ID`);

--
-- 在导出的表使用AUTO_INCREMENT
--

--
-- 使用表AUTO_INCREMENT `arithmetic`
--
ALTER TABLE `arithmetic`
  MODIFY `ID` int(8) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=52;
--
-- 使用表AUTO_INCREMENT `cfunction`
--
ALTER TABLE `cfunction`
  MODIFY `ID` int(8) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=146;
--
-- 使用表AUTO_INCREMENT `intellectual`
--
ALTER TABLE `intellectual`
  MODIFY `ID` int(8) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=101;COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
